
test_logic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000012ba  0000134e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800152  00800152  000013a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002562  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c55  00000000  00000000  00003b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000174c  00000000  00000000  000047cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  00005f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b2  00000000  00000000  000063f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085c  00000000  00000000  00006baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00007406  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	09 c3       	rjmp	.+1554   	; 0x644 <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d0 c5       	rjmp	.+2976   	; 0xbe6 <__vector_17>
      46:	00 00       	nop
      48:	d9 c7       	rjmp	.+4018   	; 0xffc <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea eb       	ldi	r30, 0xBA	; 186
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 35       	cpi	r26, 0x52	; 82
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a2 e5       	ldi	r26, 0x52	; 82
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 36       	cpi	r26, 0x63	; 99
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	6e d7       	rcall	.+3804   	; 0xfa0 <main>
      c4:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <eeprom_write>:
 */ 
#include "eeprom.h"
#include "main.h"
#include "i2c.h"

void eeprom_write(uint16_t address, uint8_t data) {
      ca:	1f 93       	push	r17
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	d8 2f       	mov	r29, r24
      d2:	19 2f       	mov	r17, r25
      d4:	c6 2f       	mov	r28, r22
	i2c_start();
      d6:	38 d2       	rcall	.+1136   	; 0x548 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0); 
      d8:	80 ea       	ldi	r24, 0xA0	; 160
      da:	46 d2       	rcall	.+1164   	; 0x568 <i2c_write>
	i2c_write((address >> 8) & 0xFF); 
      dc:	81 2f       	mov	r24, r17
      de:	44 d2       	rcall	.+1160   	; 0x568 <i2c_write>
	i2c_write(address & 0xFF); 
      e0:	8d 2f       	mov	r24, r29
	i2c_write(data); 
      e2:	42 d2       	rcall	.+1156   	; 0x568 <i2c_write>
      e4:	8c 2f       	mov	r24, r28
      e6:	40 d2       	rcall	.+1152   	; 0x568 <i2c_write>
	i2c_stop();
      e8:	37 d2       	rcall	.+1134   	; 0x558 <i2c_stop>
      ea:	df 91       	pop	r29
}
      ec:	cf 91       	pop	r28
      ee:	1f 91       	pop	r17
      f0:	08 95       	ret

000000f2 <eeprom_read>:
      f2:	cf 93       	push	r28

uint8_t eeprom_read(uint16_t address) {
      f4:	df 93       	push	r29
      f6:	c8 2f       	mov	r28, r24
      f8:	d9 2f       	mov	r29, r25
	uint8_t data;
	i2c_start();
      fa:	26 d2       	rcall	.+1100   	; 0x548 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0); 
      fc:	80 ea       	ldi	r24, 0xA0	; 160
      fe:	34 d2       	rcall	.+1128   	; 0x568 <i2c_write>
	i2c_write((address >> 8) & 0xFF);
     100:	8d 2f       	mov	r24, r29
     102:	32 d2       	rcall	.+1124   	; 0x568 <i2c_write>
	i2c_write(address & 0xFF); 
     104:	8c 2f       	mov	r24, r28
     106:	30 d2       	rcall	.+1120   	; 0x568 <i2c_write>
	i2c_start();
     108:	1f d2       	rcall	.+1086   	; 0x548 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 1); 
     10a:	81 ea       	ldi	r24, 0xA1	; 161
     10c:	2d d2       	rcall	.+1114   	; 0x568 <i2c_write>
     10e:	36 d2       	rcall	.+1132   	; 0x57c <i2c_read_nack>
	data = i2c_read_nack();
     110:	c8 2f       	mov	r28, r24
     112:	22 d2       	rcall	.+1092   	; 0x558 <i2c_stop>
     114:	8c 2f       	mov	r24, r28
	i2c_stop();
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
	return data;
     11a:	08 95       	ret

0000011c <as0>:
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	85 b3       	in	r24, 0x15	; 21

#include "main.h"
#include "fans_control.h"

void as0() {                     // Fan1 Speed 0
	PORTC &= ~(1 << PC2);
     122:	8b 7f       	andi	r24, 0xFB	; 251
     124:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << PC1);
     126:	85 b3       	in	r24, 0x15	; 21
     128:	8d 7f       	andi	r24, 0xFD	; 253
     12a:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << PC0);     // Led Pins
     12c:	85 b3       	in	r24, 0x15	; 21
     12e:	8e 7f       	andi	r24, 0xFE	; 254
     130:	85 bb       	out	0x15, r24	; 21
	PORTG &= ~(1 << PG1);
     132:	c5 e6       	ldi	r28, 0x65	; 101
     134:	d0 e0       	ldi	r29, 0x00	; 0
     136:	88 81       	ld	r24, Y
     138:	8d 7f       	andi	r24, 0xFD	; 253
     13a:	88 83       	st	Y, r24
	PORTG &= ~(1 << PG0);
     13c:	88 81       	ld	r24, Y
     13e:	8e 7f       	andi	r24, 0xFE	; 254
     140:	88 83       	st	Y, r24

	PORTC &= ~(1 << PC7);     //Relay Pins
     142:	85 b3       	in	r24, 0x15	; 21
     144:	8f 77       	andi	r24, 0x7F	; 127
     146:	85 bb       	out	0x15, r24	; 21
	custom_delay_ms(200);
     148:	88 ec       	ldi	r24, 0xC8	; 200
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	8a d2       	rcall	.+1300   	; 0x662 <custom_delay_ms>
	PORTG &= ~(1 << PG2);
     14e:	88 81       	ld	r24, Y
     150:	8b 7f       	andi	r24, 0xFB	; 251
     152:	88 83       	st	Y, r24
	custom_delay_ms(200);
     154:	88 ec       	ldi	r24, 0xC8	; 200
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	84 d2       	rcall	.+1288   	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA7);
     15a:	8b b3       	in	r24, 0x1b	; 27
     15c:	8f 77       	andi	r24, 0x7F	; 127
     15e:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     160:	88 ec       	ldi	r24, 0xC8	; 200
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	7e d2       	rcall	.+1276   	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA6);
     166:	8b b3       	in	r24, 0x1b	; 27
     168:	8f 7b       	andi	r24, 0xBF	; 191
	custom_delay_ms(200);
     16a:	8b bb       	out	0x1b, r24	; 27
     16c:	88 ec       	ldi	r24, 0xC8	; 200
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	78 d2       	rcall	.+1264   	; 0x662 <custom_delay_ms>
}
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	08 95       	ret

00000178 <as1>:

void as1() {
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
	PORTC |= (1 << PC2);
     17c:	85 b3       	in	r24, 0x15	; 21
     17e:	84 60       	ori	r24, 0x04	; 4
     180:	85 bb       	out	0x15, r24	; 21
	
	PORTC &= ~(1 << PC1);
     182:	85 b3       	in	r24, 0x15	; 21
     184:	8d 7f       	andi	r24, 0xFD	; 253
     186:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << PC0);     // Led Pins FAN1 Speed1
     188:	85 b3       	in	r24, 0x15	; 21
     18a:	8e 7f       	andi	r24, 0xFE	; 254
     18c:	85 bb       	out	0x15, r24	; 21
	PORTG &= ~(1 << PG1);
     18e:	c5 e6       	ldi	r28, 0x65	; 101
     190:	d0 e0       	ldi	r29, 0x00	; 0
     192:	88 81       	ld	r24, Y
     194:	8d 7f       	andi	r24, 0xFD	; 253
     196:	88 83       	st	Y, r24
	PORTG &= ~(1 << PG0);
     198:	88 81       	ld	r24, Y
     19a:	8e 7f       	andi	r24, 0xFE	; 254
     19c:	88 83       	st	Y, r24
	
	PORTC &= ~(1 << PC7);
     19e:	85 b3       	in	r24, 0x15	; 21
     1a0:	8f 77       	andi	r24, 0x7F	; 127
     1a2:	85 bb       	out	0x15, r24	; 21
	custom_delay_ms(200);
     1a4:	88 ec       	ldi	r24, 0xC8	; 200
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	5c d2       	rcall	.+1208   	; 0x662 <custom_delay_ms>
	PORTG &=~ (1 << PG2);
     1aa:	88 81       	ld	r24, Y
     1ac:	8b 7f       	andi	r24, 0xFB	; 251
     1ae:	88 83       	st	Y, r24
	custom_delay_ms(200);
     1b0:	88 ec       	ldi	r24, 0xC8	; 200
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	56 d2       	rcall	.+1196   	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA7);      //2.2K
     1b6:	8b b3       	in	r24, 0x1b	; 27
     1b8:	80 68       	ori	r24, 0x80	; 128
     1ba:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     1bc:	88 ec       	ldi	r24, 0xC8	; 200
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	50 d2       	rcall	.+1184   	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA6);
     1c2:	8b b3       	in	r24, 0x1b	; 27
     1c4:	8f 7b       	andi	r24, 0xBF	; 191
	custom_delay_ms(200);
     1c6:	8b bb       	out	0x1b, r24	; 27
     1c8:	88 ec       	ldi	r24, 0xC8	; 200
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	4a d2       	rcall	.+1172   	; 0x662 <custom_delay_ms>
	
}
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	08 95       	ret

000001d4 <as2>:

void as2() {
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
	PORTC |= (1 << PC2);
     1d8:	85 b3       	in	r24, 0x15	; 21
     1da:	84 60       	ori	r24, 0x04	; 4
     1dc:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PC1);
     1de:	85 b3       	in	r24, 0x15	; 21
     1e0:	82 60       	ori	r24, 0x02	; 2
     1e2:	85 bb       	out	0x15, r24	; 21

	PORTC &= ~(1 << PC0);     // Led Pins FAN1 Speed2
     1e4:	85 b3       	in	r24, 0x15	; 21
     1e6:	8e 7f       	andi	r24, 0xFE	; 254
     1e8:	85 bb       	out	0x15, r24	; 21
	PORTG &= ~(1 << PG1);
     1ea:	c5 e6       	ldi	r28, 0x65	; 101
     1ec:	d0 e0       	ldi	r29, 0x00	; 0
     1ee:	88 81       	ld	r24, Y
     1f0:	8d 7f       	andi	r24, 0xFD	; 253
     1f2:	88 83       	st	Y, r24
	PORTG &= ~(1 << PG0);
     1f4:	88 81       	ld	r24, Y
     1f6:	8e 7f       	andi	r24, 0xFE	; 254
     1f8:	88 83       	st	Y, r24

	PORTC &= ~(1 << PC7);
     1fa:	85 b3       	in	r24, 0x15	; 21
     1fc:	8f 77       	andi	r24, 0x7F	; 127
     1fe:	85 bb       	out	0x15, r24	; 21
	custom_delay_ms(200);
     200:	88 ec       	ldi	r24, 0xC8	; 200
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	2e d2       	rcall	.+1116   	; 0x662 <custom_delay_ms>
	PORTG &= ~(1 << PG2);
     206:	88 81       	ld	r24, Y
     208:	8b 7f       	andi	r24, 0xFB	; 251
     20a:	88 83       	st	Y, r24
	custom_delay_ms(200);
     20c:	88 ec       	ldi	r24, 0xC8	; 200
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	28 d2       	rcall	.+1104   	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA7);
     212:	8b b3       	in	r24, 0x1b	; 27
     214:	8f 77       	andi	r24, 0x7F	; 127
     216:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     218:	88 ec       	ldi	r24, 0xC8	; 200
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	22 d2       	rcall	.+1092   	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA6);    //3.3k
     21e:	8b b3       	in	r24, 0x1b	; 27
     220:	80 64       	ori	r24, 0x40	; 64
	custom_delay_ms(200);
     222:	8b bb       	out	0x1b, r24	; 27
     224:	88 ec       	ldi	r24, 0xC8	; 200
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	1c d2       	rcall	.+1080   	; 0x662 <custom_delay_ms>
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <as3>:

void as3() {
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
	PORTC |= (1 << PC2);
     234:	85 b3       	in	r24, 0x15	; 21
     236:	84 60       	ori	r24, 0x04	; 4
     238:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PC1);
     23a:	85 b3       	in	r24, 0x15	; 21
     23c:	82 60       	ori	r24, 0x02	; 2
     23e:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PC0);    // Fan1  Speed 3
     240:	85 b3       	in	r24, 0x15	; 21
     242:	81 60       	ori	r24, 0x01	; 1
     244:	85 bb       	out	0x15, r24	; 21
	
	PORTG &= ~(1 << PG1);
     246:	c5 e6       	ldi	r28, 0x65	; 101
     248:	d0 e0       	ldi	r29, 0x00	; 0
     24a:	88 81       	ld	r24, Y
     24c:	8d 7f       	andi	r24, 0xFD	; 253
     24e:	88 83       	st	Y, r24
	PORTG &= ~(1 << PG0);
     250:	88 81       	ld	r24, Y
     252:	8e 7f       	andi	r24, 0xFE	; 254
     254:	88 83       	st	Y, r24

	PORTC &= ~(1 << PC7);
     256:	85 b3       	in	r24, 0x15	; 21
     258:	8f 77       	andi	r24, 0x7F	; 127
     25a:	85 bb       	out	0x15, r24	; 21
	custom_delay_ms(200);
     25c:	88 ec       	ldi	r24, 0xC8	; 200
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	00 d2       	rcall	.+1024   	; 0x662 <custom_delay_ms>
	PORTG |= (1 << PG2);      // 4.3K
     262:	88 81       	ld	r24, Y
     264:	84 60       	ori	r24, 0x04	; 4
     266:	88 83       	st	Y, r24
	custom_delay_ms(200);
     268:	88 ec       	ldi	r24, 0xC8	; 200
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	fa d1       	rcall	.+1012   	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA7);
     26e:	8b b3       	in	r24, 0x1b	; 27
     270:	8f 77       	andi	r24, 0x7F	; 127
     272:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     274:	88 ec       	ldi	r24, 0xC8	; 200
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	f4 d1       	rcall	.+1000   	; 0x662 <custom_delay_ms>
	
	PORTA |= (1 << PA6);
     27a:	8b b3       	in	r24, 0x1b	; 27
     27c:	80 64       	ori	r24, 0x40	; 64
	custom_delay_ms(200);
     27e:	8b bb       	out	0x1b, r24	; 27
     280:	88 ec       	ldi	r24, 0xC8	; 200
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	ee d1       	rcall	.+988    	; 0x662 <custom_delay_ms>
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <as4>:

void as4() {
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
	PORTC |= (1 << PC2);
     290:	85 b3       	in	r24, 0x15	; 21
     292:	84 60       	ori	r24, 0x04	; 4
     294:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PC1);
     296:	85 b3       	in	r24, 0x15	; 21
     298:	82 60       	ori	r24, 0x02	; 2
     29a:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PC0);    // Fan1  Speed 4
     29c:	85 b3       	in	r24, 0x15	; 21
     29e:	81 60       	ori	r24, 0x01	; 1
     2a0:	85 bb       	out	0x15, r24	; 21
	PORTG |= (1 << PG1);
     2a2:	c5 e6       	ldi	r28, 0x65	; 101
     2a4:	d0 e0       	ldi	r29, 0x00	; 0
     2a6:	88 81       	ld	r24, Y
     2a8:	82 60       	ori	r24, 0x02	; 2
     2aa:	88 83       	st	Y, r24

	PORTG &= ~(1 << PG0);
     2ac:	88 81       	ld	r24, Y
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	88 83       	st	Y, r24

	PORTC &= ~(1 << PC7);
     2b2:	85 b3       	in	r24, 0x15	; 21
     2b4:	8f 77       	andi	r24, 0x7F	; 127
     2b6:	85 bb       	out	0x15, r24	; 21
	custom_delay_ms(200);
     2b8:	88 ec       	ldi	r24, 0xC8	; 200
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	d2 d1       	rcall	.+932    	; 0x662 <custom_delay_ms>
	PORTG &= ~(1 << PG2);
     2be:	88 81       	ld	r24, Y
     2c0:	8b 7f       	andi	r24, 0xFB	; 251
     2c2:	88 83       	st	Y, r24
	custom_delay_ms(200);
     2c4:	88 ec       	ldi	r24, 0xC8	; 200
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	cc d1       	rcall	.+920    	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA7);   //5.5K
     2ca:	8b b3       	in	r24, 0x1b	; 27
     2cc:	80 68       	ori	r24, 0x80	; 128
     2ce:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     2d0:	88 ec       	ldi	r24, 0xC8	; 200
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	c6 d1       	rcall	.+908    	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA6);
     2d6:	8b b3       	in	r24, 0x1b	; 27
     2d8:	80 64       	ori	r24, 0x40	; 64
	custom_delay_ms(200);
     2da:	8b bb       	out	0x1b, r24	; 27
     2dc:	88 ec       	ldi	r24, 0xC8	; 200
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	c0 d1       	rcall	.+896    	; 0x662 <custom_delay_ms>
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <as5>:

void as5() {
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
	PORTC |= (1 << PC2);
     2ec:	85 b3       	in	r24, 0x15	; 21
     2ee:	84 60       	ori	r24, 0x04	; 4
     2f0:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PC1);
     2f2:	85 b3       	in	r24, 0x15	; 21
     2f4:	82 60       	ori	r24, 0x02	; 2
     2f6:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PC0);    // Fan1  Speed 5
     2f8:	85 b3       	in	r24, 0x15	; 21
     2fa:	81 60       	ori	r24, 0x01	; 1
     2fc:	85 bb       	out	0x15, r24	; 21
	PORTG |= (1 << PG1);
     2fe:	c5 e6       	ldi	r28, 0x65	; 101
     300:	d0 e0       	ldi	r29, 0x00	; 0
     302:	88 81       	ld	r24, Y
     304:	82 60       	ori	r24, 0x02	; 2
     306:	88 83       	st	Y, r24
	PORTG |= (1 << PG0);
     308:	88 81       	ld	r24, Y
     30a:	81 60       	ori	r24, 0x01	; 1
     30c:	88 83       	st	Y, r24


	PORTC |= (1 << PC7);     //Direct
     30e:	85 b3       	in	r24, 0x15	; 21
     310:	80 68       	ori	r24, 0x80	; 128
     312:	85 bb       	out	0x15, r24	; 21
	custom_delay_ms(200);
     314:	88 ec       	ldi	r24, 0xC8	; 200
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	a4 d1       	rcall	.+840    	; 0x662 <custom_delay_ms>
	PORTG &= ~(1 << PG2);
     31a:	88 81       	ld	r24, Y
     31c:	8b 7f       	andi	r24, 0xFB	; 251
     31e:	88 83       	st	Y, r24
	custom_delay_ms(200);
     320:	88 ec       	ldi	r24, 0xC8	; 200
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9e d1       	rcall	.+828    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA7);
     326:	8b b3       	in	r24, 0x1b	; 27
     328:	8f 77       	andi	r24, 0x7F	; 127
     32a:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     32c:	88 ec       	ldi	r24, 0xC8	; 200
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	98 d1       	rcall	.+816    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA6);
     332:	8b b3       	in	r24, 0x1b	; 27
     334:	8f 7b       	andi	r24, 0xBF	; 191
	custom_delay_ms(200);
     336:	8b bb       	out	0x1b, r24	; 27
     338:	88 ec       	ldi	r24, 0xC8	; 200
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	92 d1       	rcall	.+804    	; 0x662 <custom_delay_ms>
	
}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <af0>:

//fan2 speed function

void af0() {
	PORTD &=~ (1 << PD5);
     344:	82 b3       	in	r24, 0x12	; 18
     346:	8f 7d       	andi	r24, 0xDF	; 223
     348:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD4);
     34a:	82 b3       	in	r24, 0x12	; 18
     34c:	8f 7e       	andi	r24, 0xEF	; 239
     34e:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD3);    /// Fan2  Speed 0
     350:	82 b3       	in	r24, 0x12	; 18
     352:	87 7f       	andi	r24, 0xF7	; 247
     354:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD2);
     356:	82 b3       	in	r24, 0x12	; 18
     358:	8b 7f       	andi	r24, 0xFB	; 251
     35a:	82 bb       	out	0x12, r24	; 18
	PORTG &= ~(1 << PG4);
     35c:	e5 e6       	ldi	r30, 0x65	; 101
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	8f 7e       	andi	r24, 0xEF	; 239
     364:	80 83       	st	Z, r24

	PORTA &=~ (1 << PA3);
     366:	8b b3       	in	r24, 0x1b	; 27
     368:	87 7f       	andi	r24, 0xF7	; 247
     36a:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     36c:	88 ec       	ldi	r24, 0xC8	; 200
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	78 d1       	rcall	.+752    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA2);
     372:	8b b3       	in	r24, 0x1b	; 27
     374:	8b 7f       	andi	r24, 0xFB	; 251
     376:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     378:	88 ec       	ldi	r24, 0xC8	; 200
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	72 d1       	rcall	.+740    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA1);
     37e:	8b b3       	in	r24, 0x1b	; 27
     380:	8d 7f       	andi	r24, 0xFD	; 253
     382:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     384:	88 ec       	ldi	r24, 0xC8	; 200
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	6c d1       	rcall	.+728    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA0);
     38a:	8b b3       	in	r24, 0x1b	; 27
     38c:	8e 7f       	andi	r24, 0xFE	; 254
	custom_delay_ms(200);
     38e:	8b bb       	out	0x1b, r24	; 27
     390:	88 ec       	ldi	r24, 0xC8	; 200
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	66 c1       	rjmp	.+716    	; 0x662 <custom_delay_ms>
     396:	08 95       	ret

00000398 <af1>:
}

void af1() {
	PORTD |= (1 << PD5);
     398:	82 b3       	in	r24, 0x12	; 18
     39a:	80 62       	ori	r24, 0x20	; 32
     39c:	82 bb       	out	0x12, r24	; 18

	PORTD &= ~(1 << PD4);
     39e:	82 b3       	in	r24, 0x12	; 18
     3a0:	8f 7e       	andi	r24, 0xEF	; 239
     3a2:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD3);    /// Fan2  Speed 1
     3a4:	82 b3       	in	r24, 0x12	; 18
     3a6:	87 7f       	andi	r24, 0xF7	; 247
     3a8:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD2);
     3aa:	82 b3       	in	r24, 0x12	; 18
     3ac:	8b 7f       	andi	r24, 0xFB	; 251
     3ae:	82 bb       	out	0x12, r24	; 18
	PORTG &= ~(1 << PG4);
     3b0:	e5 e6       	ldi	r30, 0x65	; 101
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	8f 7e       	andi	r24, 0xEF	; 239
     3b8:	80 83       	st	Z, r24
	
	PORTA &=~ (1 << PA3);
     3ba:	8b b3       	in	r24, 0x1b	; 27
     3bc:	87 7f       	andi	r24, 0xF7	; 247
     3be:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     3c0:	88 ec       	ldi	r24, 0xC8	; 200
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	4e d1       	rcall	.+668    	; 0x662 <custom_delay_ms>
	PORTA &=~ (1 << PA2);
     3c6:	8b b3       	in	r24, 0x1b	; 27
     3c8:	8b 7f       	andi	r24, 0xFB	; 251
     3ca:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     3cc:	88 ec       	ldi	r24, 0xC8	; 200
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	48 d1       	rcall	.+656    	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA1);    //2.2K
     3d2:	8b b3       	in	r24, 0x1b	; 27
     3d4:	82 60       	ori	r24, 0x02	; 2
     3d6:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     3d8:	88 ec       	ldi	r24, 0xC8	; 200
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	42 d1       	rcall	.+644    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA0);
     3de:	8b b3       	in	r24, 0x1b	; 27
     3e0:	8e 7f       	andi	r24, 0xFE	; 254
	custom_delay_ms(200);
     3e2:	8b bb       	out	0x1b, r24	; 27
     3e4:	88 ec       	ldi	r24, 0xC8	; 200
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	3c c1       	rjmp	.+632    	; 0x662 <custom_delay_ms>
     3ea:	08 95       	ret

000003ec <af2>:
}

void af2() {
	PORTD |= (1 << PD5);
     3ec:	82 b3       	in	r24, 0x12	; 18
     3ee:	80 62       	ori	r24, 0x20	; 32
     3f0:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD4);    // Fan2  Speed 2
     3f2:	82 b3       	in	r24, 0x12	; 18
     3f4:	80 61       	ori	r24, 0x10	; 16
     3f6:	82 bb       	out	0x12, r24	; 18
	
	PORTD &= ~(1 << PD3);
     3f8:	82 b3       	in	r24, 0x12	; 18
     3fa:	87 7f       	andi	r24, 0xF7	; 247
     3fc:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD2);
     3fe:	82 b3       	in	r24, 0x12	; 18
     400:	8b 7f       	andi	r24, 0xFB	; 251
     402:	82 bb       	out	0x12, r24	; 18
	PORTG &= ~(1 << PG4);
     404:	e5 e6       	ldi	r30, 0x65	; 101
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	8f 7e       	andi	r24, 0xEF	; 239
     40c:	80 83       	st	Z, r24
	
	PORTA &= ~(1 << PA3);
     40e:	8b b3       	in	r24, 0x1b	; 27
     410:	87 7f       	andi	r24, 0xF7	; 247
     412:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     414:	88 ec       	ldi	r24, 0xC8	; 200
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	24 d1       	rcall	.+584    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA2);
     41a:	8b b3       	in	r24, 0x1b	; 27
     41c:	8b 7f       	andi	r24, 0xFB	; 251
     41e:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     420:	88 ec       	ldi	r24, 0xC8	; 200
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	1e d1       	rcall	.+572    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA1);
     426:	8b b3       	in	r24, 0x1b	; 27
     428:	8d 7f       	andi	r24, 0xFD	; 253
     42a:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     42c:	88 ec       	ldi	r24, 0xC8	; 200
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	18 d1       	rcall	.+560    	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA0);   //3.3K
     432:	8b b3       	in	r24, 0x1b	; 27
     434:	81 60       	ori	r24, 0x01	; 1
	custom_delay_ms(200);
     436:	8b bb       	out	0x1b, r24	; 27
     438:	88 ec       	ldi	r24, 0xC8	; 200
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	12 c1       	rjmp	.+548    	; 0x662 <custom_delay_ms>
     43e:	08 95       	ret

00000440 <af3>:
}

void af3() {
	PORTD |= (1 << PD5);
     440:	82 b3       	in	r24, 0x12	; 18
     442:	80 62       	ori	r24, 0x20	; 32
     444:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD4);
     446:	82 b3       	in	r24, 0x12	; 18
     448:	80 61       	ori	r24, 0x10	; 16
     44a:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD3);      // Fan2  Speed 3
     44c:	82 b3       	in	r24, 0x12	; 18
     44e:	88 60       	ori	r24, 0x08	; 8
     450:	82 bb       	out	0x12, r24	; 18
	
	PORTD &= ~(1 << PD2);
     452:	82 b3       	in	r24, 0x12	; 18
     454:	8b 7f       	andi	r24, 0xFB	; 251
     456:	82 bb       	out	0x12, r24	; 18
	PORTG &= ~(1 << PG4);
     458:	e5 e6       	ldi	r30, 0x65	; 101
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	8f 7e       	andi	r24, 0xEF	; 239
     460:	80 83       	st	Z, r24

	PORTA &= ~(1 << PA3);
     462:	8b b3       	in	r24, 0x1b	; 27
     464:	87 7f       	andi	r24, 0xF7	; 247
     466:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     468:	88 ec       	ldi	r24, 0xC8	; 200
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	fa d0       	rcall	.+500    	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA2);  //1K+3.3K = 4.3K
     46e:	8b b3       	in	r24, 0x1b	; 27
     470:	84 60       	ori	r24, 0x04	; 4
     472:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     474:	88 ec       	ldi	r24, 0xC8	; 200
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	f4 d0       	rcall	.+488    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA1);
     47a:	8b b3       	in	r24, 0x1b	; 27
     47c:	8d 7f       	andi	r24, 0xFD	; 253
     47e:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     480:	88 ec       	ldi	r24, 0xC8	; 200
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	ee d0       	rcall	.+476    	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA0);
     486:	8b b3       	in	r24, 0x1b	; 27
     488:	81 60       	ori	r24, 0x01	; 1
	custom_delay_ms(200);
     48a:	8b bb       	out	0x1b, r24	; 27
     48c:	88 ec       	ldi	r24, 0xC8	; 200
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	e8 c0       	rjmp	.+464    	; 0x662 <custom_delay_ms>
     492:	08 95       	ret

00000494 <af4>:
}

void af4() {
	PORTD |= (1 << PD5);
     494:	82 b3       	in	r24, 0x12	; 18
     496:	80 62       	ori	r24, 0x20	; 32
     498:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD4);
     49a:	82 b3       	in	r24, 0x12	; 18
     49c:	80 61       	ori	r24, 0x10	; 16
     49e:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD3);      // Fan2  Speed 4
     4a0:	82 b3       	in	r24, 0x12	; 18
     4a2:	88 60       	ori	r24, 0x08	; 8
     4a4:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD2);
     4a6:	82 b3       	in	r24, 0x12	; 18
     4a8:	84 60       	ori	r24, 0x04	; 4
     4aa:	82 bb       	out	0x12, r24	; 18

	PORTG &= ~(1 << PG4);
     4ac:	e5 e6       	ldi	r30, 0x65	; 101
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	8f 7e       	andi	r24, 0xEF	; 239
     4b4:	80 83       	st	Z, r24
	
	PORTA &=~ (1 << PA3);
     4b6:	8b b3       	in	r24, 0x1b	; 27
     4b8:	87 7f       	andi	r24, 0xF7	; 247
     4ba:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     4bc:	88 ec       	ldi	r24, 0xC8	; 200
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	d0 d0       	rcall	.+416    	; 0x662 <custom_delay_ms>
	PORTA &=~ (1 << PA2);
     4c2:	8b b3       	in	r24, 0x1b	; 27
     4c4:	8b 7f       	andi	r24, 0xFB	; 251
     4c6:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     4c8:	88 ec       	ldi	r24, 0xC8	; 200
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	ca d0       	rcall	.+404    	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA1);  //2.2K +3.3K = 5.5K
     4ce:	8b b3       	in	r24, 0x1b	; 27
     4d0:	82 60       	ori	r24, 0x02	; 2
     4d2:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     4d4:	88 ec       	ldi	r24, 0xC8	; 200
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	c4 d0       	rcall	.+392    	; 0x662 <custom_delay_ms>
	PORTA |= (1 << PA0);
     4da:	8b b3       	in	r24, 0x1b	; 27
     4dc:	81 60       	ori	r24, 0x01	; 1
	custom_delay_ms(200);
     4de:	8b bb       	out	0x1b, r24	; 27
     4e0:	88 ec       	ldi	r24, 0xC8	; 200
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	be c0       	rjmp	.+380    	; 0x662 <custom_delay_ms>
     4e6:	08 95       	ret

000004e8 <af5>:
}

void af5() {
	PORTD |= (1 << PD5);
     4e8:	82 b3       	in	r24, 0x12	; 18
     4ea:	80 62       	ori	r24, 0x20	; 32
     4ec:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD4);
     4ee:	82 b3       	in	r24, 0x12	; 18
     4f0:	80 61       	ori	r24, 0x10	; 16
     4f2:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD3);      // Fan2  Speed 5
     4f4:	82 b3       	in	r24, 0x12	; 18
     4f6:	88 60       	ori	r24, 0x08	; 8
     4f8:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD2);
     4fa:	82 b3       	in	r24, 0x12	; 18
     4fc:	84 60       	ori	r24, 0x04	; 4
     4fe:	82 bb       	out	0x12, r24	; 18
	PORTG |= (1 << PG4);
     500:	e5 e6       	ldi	r30, 0x65	; 101
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	80 61       	ori	r24, 0x10	; 16
     508:	80 83       	st	Z, r24

	PORTA |= (1 << PA3);
     50a:	8b b3       	in	r24, 0x1b	; 27
     50c:	88 60       	ori	r24, 0x08	; 8
     50e:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);     //Direct
     510:	88 ec       	ldi	r24, 0xC8	; 200
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a6 d0       	rcall	.+332    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA2);
     516:	8b b3       	in	r24, 0x1b	; 27
     518:	8b 7f       	andi	r24, 0xFB	; 251
     51a:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     51c:	88 ec       	ldi	r24, 0xC8	; 200
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	a0 d0       	rcall	.+320    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA1);
     522:	8b b3       	in	r24, 0x1b	; 27
     524:	8d 7f       	andi	r24, 0xFD	; 253
     526:	8b bb       	out	0x1b, r24	; 27
	custom_delay_ms(200);
     528:	88 ec       	ldi	r24, 0xC8	; 200
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	9a d0       	rcall	.+308    	; 0x662 <custom_delay_ms>
	PORTA &= ~(1 << PA0);
     52e:	8b b3       	in	r24, 0x1b	; 27
     530:	8e 7f       	andi	r24, 0xFE	; 254
	custom_delay_ms(200);
     532:	8b bb       	out	0x1b, r24	; 27
     534:	88 ec       	ldi	r24, 0xC8	; 200
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	94 c0       	rjmp	.+296    	; 0x662 <custom_delay_ms>
     53a:	08 95       	ret

0000053c <i2c_init>:

uint8_t i2c_read_ack(void) {
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
	while (!(TWCR & (1<<TWINT)));
	return TWDR;
}
     53c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     540:	88 e4       	ldi	r24, 0x48	; 72
     542:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     546:	08 95       	ret

00000548 <i2c_start>:
     548:	84 ea       	ldi	r24, 0xA4	; 164
     54a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     54e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     552:	88 23       	and	r24, r24
     554:	e4 f7       	brge	.-8      	; 0x54e <i2c_start+0x6>
     556:	08 95       	ret

00000558 <i2c_stop>:
     558:	84 e9       	ldi	r24, 0x94	; 148
     55a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     55e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     562:	84 fd       	sbrc	r24, 4
     564:	fc cf       	rjmp	.-8      	; 0x55e <i2c_stop+0x6>
     566:	08 95       	ret

00000568 <i2c_write>:
     568:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     56c:	84 e8       	ldi	r24, 0x84	; 132
     56e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     572:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     576:	88 23       	and	r24, r24
     578:	e4 f7       	brge	.-8      	; 0x572 <i2c_write+0xa>
     57a:	08 95       	ret

0000057c <i2c_read_nack>:

uint8_t i2c_read_nack(void) {
	TWCR = (1<<TWEN) | (1<<TWINT);
     57c:	84 e8       	ldi	r24, 0x84	; 132
     57e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
     582:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     586:	88 23       	and	r24, r24
     588:	e4 f7       	brge	.-8      	; 0x582 <i2c_read_nack+0x6>
	return TWDR;
     58a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
     58e:	08 95       	ret

00000590 <light1_ON>:

#include "main.h"
#include "lights.h"

void light1_ON(){
	PORTD |= (1 << PD7);
     590:	82 b3       	in	r24, 0x12	; 18
     592:	80 68       	ori	r24, 0x80	; 128
     594:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1 << PC5);
     596:	85 b3       	in	r24, 0x15	; 21
     598:	80 62       	ori	r24, 0x20	; 32
     59a:	85 bb       	out	0x15, r24	; 21
	lastStates_t.light1state = 1;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <lastStates_t>
     5a2:	08 95       	ret

000005a4 <light1_OFF>:
}

void light1_OFF(){
	PORTD &= ~(1 << PD7);
     5a4:	82 b3       	in	r24, 0x12	; 18
     5a6:	8f 77       	andi	r24, 0x7F	; 127
     5a8:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC5);
     5aa:	85 b3       	in	r24, 0x15	; 21
     5ac:	8f 7d       	andi	r24, 0xDF	; 223
     5ae:	85 bb       	out	0x15, r24	; 21
	lastStates_t.light1state = 0;
     5b0:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <lastStates_t>
     5b4:	08 95       	ret

000005b6 <light2_ON>:
}

void light2_ON(){
	PORTC |= (1 << PC3);
     5b6:	85 b3       	in	r24, 0x15	; 21
     5b8:	88 60       	ori	r24, 0x08	; 8
     5ba:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1 << PC6);
     5bc:	85 b3       	in	r24, 0x15	; 21
     5be:	80 64       	ori	r24, 0x40	; 64
     5c0:	85 bb       	out	0x15, r24	; 21
	lastStates_t.light2state = 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <lastStates_t+0x1>
     5c8:	08 95       	ret

000005ca <light2_OFF>:
}

void light2_OFF(){
	PORTC &= ~(1 << PC3);
     5ca:	85 b3       	in	r24, 0x15	; 21
     5cc:	87 7f       	andi	r24, 0xF7	; 247
     5ce:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << PC6);
     5d0:	85 b3       	in	r24, 0x15	; 21
     5d2:	8f 7b       	andi	r24, 0xBF	; 191
     5d4:	85 bb       	out	0x15, r24	; 21
	lastStates_t.light2state = 0;
     5d6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <lastStates_t+0x1>
     5da:	08 95       	ret

000005dc <light3_ON>:
}

void light3_ON(){
	PORTD |= (1 << PD6);
     5dc:	82 b3       	in	r24, 0x12	; 18
     5de:	80 64       	ori	r24, 0x40	; 64
     5e0:	82 bb       	out	0x12, r24	; 18
	PORTA |= (1 << PA5);
     5e2:	8b b3       	in	r24, 0x1b	; 27
     5e4:	80 62       	ori	r24, 0x20	; 32
     5e6:	8b bb       	out	0x1b, r24	; 27
	lastStates_t.light3state = 1;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <lastStates_t+0x2>
     5ee:	08 95       	ret

000005f0 <light3_OFF>:
}

void light3_OFF(){
	PORTD &= ~(1 << PD6);
     5f0:	82 b3       	in	r24, 0x12	; 18
     5f2:	8f 7b       	andi	r24, 0xBF	; 191
     5f4:	82 bb       	out	0x12, r24	; 18
	PORTA &= ~(1 << PA5);
     5f6:	8b b3       	in	r24, 0x1b	; 27
     5f8:	8f 7d       	andi	r24, 0xDF	; 223
     5fa:	8b bb       	out	0x1b, r24	; 27
	lastStates_t.light3state = 0;
     5fc:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <lastStates_t+0x2>
     600:	08 95       	ret

00000602 <light4_ON>:
}

void light4_ON(){
	PORTC |= (1 << PC4);
     602:	85 b3       	in	r24, 0x15	; 21
     604:	80 61       	ori	r24, 0x10	; 16
     606:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1 << PA4);
     608:	8b b3       	in	r24, 0x1b	; 27
     60a:	80 61       	ori	r24, 0x10	; 16
     60c:	8b bb       	out	0x1b, r24	; 27
	lastStates_t.light4state = 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <lastStates_t+0x3>
     614:	08 95       	ret

00000616 <light4_OFF>:
}

void light4_OFF(){
	PORTC &= ~(1 << PC4);
     616:	85 b3       	in	r24, 0x15	; 21
     618:	8f 7e       	andi	r24, 0xEF	; 239
     61a:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1 << PA4);
     61c:	8b b3       	in	r24, 0x1b	; 27
     61e:	8f 7e       	andi	r24, 0xEF	; 239
     620:	8b bb       	out	0x1b, r24	; 27
	lastStates_t.light4state = 0;
     622:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <lastStates_t+0x3>
     626:	08 95       	ret

00000628 <timer1_init>:
	}
	return 0;
}

void timer1_init() {
	TCCR1B |= (1 << WGM12);
     628:	8e b5       	in	r24, 0x2e	; 46
     62a:	88 60       	ori	r24, 0x08	; 8
     62c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 3624;
     62e:	88 e2       	ldi	r24, 0x28	; 40
     630:	9e e0       	ldi	r25, 0x0E	; 14
     632:	9b bd       	out	0x2b, r25	; 43
     634:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);
     636:	87 b7       	in	r24, 0x37	; 55
     638:	80 61       	ori	r24, 0x10	; 16
     63a:	87 bf       	out	0x37, r24	; 55
	TCCR1B |= (1 << CS12) | (1 << CS10);
     63c:	8e b5       	in	r24, 0x2e	; 46
     63e:	85 60       	ori	r24, 0x05	; 5
     640:	8e bd       	out	0x2e, r24	; 46
     642:	08 95       	ret

00000644 <__vector_12>:
}

ISR(TIMER1_COMPA_vect) {
     644:	1f 92       	push	r1
     646:	0f 92       	push	r0
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	0f 92       	push	r0
     64c:	11 24       	eor	r1, r1
     64e:	8f 93       	push	r24
	timer_flag = 1;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <timer_flag>
}
     656:	8f 91       	pop	r24
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <custom_delay_ms>:

void custom_delay_ms(uint16_t ms) {
     662:	ac 01       	movw	r20, r24
	static uint16_t counter = 0;
	if (timer_flag) {
     664:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <timer_flag>
     668:	99 23       	and	r25, r25
     66a:	99 f0       	breq	.+38     	; 0x692 <custom_delay_ms+0x30>
		timer_flag = 0;
     66c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <timer_flag>
		counter++;
     670:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <counter.1991>
     674:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <counter.1991+0x1>
     678:	2f 5f       	subi	r18, 0xFF	; 255
     67a:	3f 4f       	sbci	r19, 0xFF	; 255
     67c:	30 93 57 01 	sts	0x0157, r19	; 0x800157 <counter.1991+0x1>
     680:	20 93 56 01 	sts	0x0156, r18	; 0x800156 <counter.1991>
		if (counter >= ms) {
     684:	24 17       	cp	r18, r20
     686:	35 07       	cpc	r19, r21
     688:	20 f0       	brcs	.+8      	; 0x692 <custom_delay_ms+0x30>
			counter = 0;
     68a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <counter.1991+0x1>
     68e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <counter.1991>
     692:	08 95       	ret

00000694 <SPI_init_slave>:
		}
	}
}

void SPI_init_slave() {
	DDRB |= (1 << DDB4);
     694:	87 b3       	in	r24, 0x17	; 23
     696:	80 61       	ori	r24, 0x10	; 16
     698:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1 << SPE); 
     69a:	8d b1       	in	r24, 0x0d	; 13
     69c:	80 64       	ori	r24, 0x40	; 64
     69e:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1 << SPIE); 
     6a0:	8d b1       	in	r24, 0x0d	; 13
     6a2:	80 68       	ori	r24, 0x80	; 128
     6a4:	8d b9       	out	0x0d, r24	; 13
     6a6:	08 95       	ret

000006a8 <processCommand>:
}

void processCommand(const char* command){
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	ec 01       	movw	r28, r24
	
	if(strcmp(command, "P1") == 0){     //Hard Reset
     6ae:	6a e2       	ldi	r22, 0x2A	; 42
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	f8 d5       	rcall	.+3056   	; 0x12a4 <strcmp>
     6b4:	89 2b       	or	r24, r25
     6b6:	19 f4       	brne	.+6      	; 0x6be <processCommand+0x16>
		USART_Transmit('Q');
     6b8:	81 e5       	ldi	r24, 0x51	; 81
     6ba:	ec d5       	rcall	.+3032   	; 0x1294 <USART_Transmit>
     6bc:	91 c2       	rjmp	.+1314   	; 0xbe0 <processCommand+0x538>
	}
	
	else if(strcmp(command, "L1") == 0){      // Light 1
     6be:	6d e2       	ldi	r22, 0x2D	; 45
     6c0:	71 e0       	ldi	r23, 0x01	; 1
     6c2:	ce 01       	movw	r24, r28
     6c4:	ef d5       	rcall	.+3038   	; 0x12a4 <strcmp>
     6c6:	89 2b       	or	r24, r25
		USART_Transmit('S');
     6c8:	e9 f4       	brne	.+58     	; 0x704 <processCommand+0x5c>
     6ca:	83 e5       	ldi	r24, 0x53	; 83
     6cc:	e3 d5       	rcall	.+3014   	; 0x1294 <USART_Transmit>
		PORTD ^= (1 << PD7);
     6ce:	82 b3       	in	r24, 0x12	; 18
     6d0:	80 58       	subi	r24, 0x80	; 128
     6d2:	82 bb       	out	0x12, r24	; 18
		PORTC ^= (1 << PC5);     // toggle the LED & Relay
     6d4:	95 b3       	in	r25, 0x15	; 21
     6d6:	80 e2       	ldi	r24, 0x20	; 32
     6d8:	89 27       	eor	r24, r25
     6da:	85 bb       	out	0x15, r24	; 21
		uint8_t newLightState_1 = (lastStates_t.light1state == 0) ? 1 : 0;
     6dc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <lastStates_t>
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	91 11       	cpse	r25, r1
     6e4:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_1 != lastStates_t.light1state){
     6e6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <lastStates_t>
     6ea:	89 17       	cp	r24, r25
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <processCommand+0x48>
     6ee:	78 c2       	rjmp	.+1264   	; 0xbe0 <processCommand+0x538>
			lastStates_t.light1state = newLightState_1;
     6f0:	ed e5       	ldi	r30, 0x5D	; 93
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	80 83       	st	Z, r24
			eeprom_write(light1_address, lastStates_t.light1state);
     6f6:	60 81       	ld	r22, Z
     6f8:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <light1_address>
     6fc:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <light1_address+0x1>
     700:	e4 dc       	rcall	.-1592   	; 0xca <eeprom_write>
		}
	}
	
	else if(strcmp(command, "L2") == 0){      //Light 2
     702:	6e c2       	rjmp	.+1244   	; 0xbe0 <processCommand+0x538>
     704:	60 e3       	ldi	r22, 0x30	; 48
     706:	71 e0       	ldi	r23, 0x01	; 1
     708:	ce 01       	movw	r24, r28
     70a:	cc d5       	rcall	.+2968   	; 0x12a4 <strcmp>
     70c:	89 2b       	or	r24, r25
		USART_Transmit('P');
     70e:	f1 f4       	brne	.+60     	; 0x74c <processCommand+0xa4>
     710:	80 e5       	ldi	r24, 0x50	; 80
     712:	c0 d5       	rcall	.+2944   	; 0x1294 <USART_Transmit>
		PORTC ^= (1 << PC3);
     714:	95 b3       	in	r25, 0x15	; 21
     716:	88 e0       	ldi	r24, 0x08	; 8
     718:	89 27       	eor	r24, r25
     71a:	85 bb       	out	0x15, r24	; 21
		PORTC ^= (1 << PC6);
     71c:	95 b3       	in	r25, 0x15	; 21
     71e:	80 e4       	ldi	r24, 0x40	; 64
     720:	89 27       	eor	r24, r25
     722:	85 bb       	out	0x15, r24	; 21
		uint8_t newLightState_2 = ( lastStates_t.light2state == 0) ? 1 : 0;
     724:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <lastStates_t+0x1>
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	91 11       	cpse	r25, r1
     72c:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_2 != lastStates_t.light2state){
     72e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <lastStates_t+0x1>
     732:	89 17       	cp	r24, r25
     734:	09 f4       	brne	.+2      	; 0x738 <processCommand+0x90>
     736:	54 c2       	rjmp	.+1192   	; 0xbe0 <processCommand+0x538>
			lastStates_t.light2state = newLightState_2;
     738:	ed e5       	ldi	r30, 0x5D	; 93
     73a:	f1 e0       	ldi	r31, 0x01	; 1
			eeprom_write(light2_address, lastStates_t.light2state);
     73c:	81 83       	std	Z+1, r24	; 0x01
     73e:	61 81       	ldd	r22, Z+1	; 0x01
     740:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
     744:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
     748:	c0 dc       	rcall	.-1664   	; 0xca <eeprom_write>
		}
	}
	
	else if (strcmp(command, "L3") == 0) {     //Light 3
     74a:	4a c2       	rjmp	.+1172   	; 0xbe0 <processCommand+0x538>
     74c:	63 e3       	ldi	r22, 0x33	; 51
     74e:	71 e0       	ldi	r23, 0x01	; 1
     750:	ce 01       	movw	r24, r28
     752:	a8 d5       	rcall	.+2896   	; 0x12a4 <strcmp>
     754:	89 2b       	or	r24, r25
     756:	f1 f4       	brne	.+60     	; 0x794 <processCommand+0xec>
		USART_Transmit('R');
     758:	82 e5       	ldi	r24, 0x52	; 82
     75a:	9c d5       	rcall	.+2872   	; 0x1294 <USART_Transmit>
     75c:	92 b3       	in	r25, 0x12	; 18
		PORTD ^= (1 << PD6);
     75e:	80 e4       	ldi	r24, 0x40	; 64
     760:	89 27       	eor	r24, r25
     762:	82 bb       	out	0x12, r24	; 18
     764:	9b b3       	in	r25, 0x1b	; 27
		PORTA ^= (1 << PA5);
     766:	80 e2       	ldi	r24, 0x20	; 32
     768:	89 27       	eor	r24, r25
     76a:	8b bb       	out	0x1b, r24	; 27
     76c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <lastStates_t+0x2>
		uint8_t newLightState_3 = (lastStates_t.light3state == 0) ? 1 : 0;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	91 11       	cpse	r25, r1
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <lastStates_t+0x2>
		if (newLightState_3 != lastStates_t.light3state){
     77a:	89 17       	cp	r24, r25
     77c:	09 f4       	brne	.+2      	; 0x780 <processCommand+0xd8>
     77e:	30 c2       	rjmp	.+1120   	; 0xbe0 <processCommand+0x538>
			lastStates_t.light3state = newLightState_3;
     780:	ed e5       	ldi	r30, 0x5D	; 93
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	82 83       	std	Z+2, r24	; 0x02
			eeprom_write(light3_address, lastStates_t.light3state);
     786:	62 81       	ldd	r22, Z+2	; 0x02
     788:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
     78c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
     790:	9c dc       	rcall	.-1736   	; 0xca <eeprom_write>
		}
	}
	
	else if (strcmp(command, "L4") == 0) {    //Light 4
     792:	26 c2       	rjmp	.+1100   	; 0xbe0 <processCommand+0x538>
     794:	66 e3       	ldi	r22, 0x36	; 54
     796:	71 e0       	ldi	r23, 0x01	; 1
     798:	ce 01       	movw	r24, r28
     79a:	84 d5       	rcall	.+2824   	; 0x12a4 <strcmp>
     79c:	89 2b       	or	r24, r25
     79e:	e9 f4       	brne	.+58     	; 0x7da <processCommand+0x132>
		USART_Transmit('G');
     7a0:	87 e4       	ldi	r24, 0x47	; 71
     7a2:	78 d5       	rcall	.+2800   	; 0x1294 <USART_Transmit>
     7a4:	95 b3       	in	r25, 0x15	; 21
		PORTC ^= (1 << PC4);
     7a6:	80 e1       	ldi	r24, 0x10	; 16
     7a8:	98 27       	eor	r25, r24
     7aa:	95 bb       	out	0x15, r25	; 21
     7ac:	9b b3       	in	r25, 0x1b	; 27
		PORTA ^= (1 << PA4);
     7ae:	89 27       	eor	r24, r25
     7b0:	8b bb       	out	0x1b, r24	; 27
     7b2:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <lastStates_t+0x3>
		uint8_t newLightState_4 = (lastStates_t.light4state == 0) ? 1 : 0;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	91 11       	cpse	r25, r1
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <lastStates_t+0x3>
		if (newLightState_4 != lastStates_t.light4state){
     7c0:	89 17       	cp	r24, r25
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <processCommand+0x11e>
     7c4:	0d c2       	rjmp	.+1050   	; 0xbe0 <processCommand+0x538>
			lastStates_t.light4state = newLightState_4;
     7c6:	ed e5       	ldi	r30, 0x5D	; 93
     7c8:	f1 e0       	ldi	r31, 0x01	; 1
			eeprom_write(light4_address, lastStates_t.light4state);
     7ca:	83 83       	std	Z+3, r24	; 0x03
     7cc:	63 81       	ldd	r22, Z+3	; 0x03
     7ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
     7d2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
     7d6:	79 dc       	rcall	.-1806   	; 0xca <eeprom_write>
		}
	}
	
	else if (strcmp(command, "F0") == 0) {      // Fan 1 ON
     7d8:	03 c2       	rjmp	.+1030   	; 0xbe0 <processCommand+0x538>
     7da:	69 e3       	ldi	r22, 0x39	; 57
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	ce 01       	movw	r24, r28
     7e0:	61 d5       	rcall	.+2754   	; 0x12a4 <strcmp>
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <processCommand+0x140>
     7e6:	7b c0       	rjmp	.+246    	; 0x8de <processCommand+0x236>
		if (lastStates_t.lastF1state == 5) {
     7e8:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
			USART_Transmit('F');
     7ec:	85 30       	cpi	r24, 0x05	; 5
     7ee:	39 f4       	brne	.+14     	; 0x7fe <processCommand+0x156>
     7f0:	86 e4       	ldi	r24, 0x46	; 70
			as5();
     7f2:	50 d5       	rcall	.+2720   	; 0x1294 <USART_Transmit>
     7f4:	79 dd       	rcall	.-1294   	; 0x2e8 <as5>
			lastStates_t.lastF1state = 5;
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
		}
		else if (lastStates_t.lastF1state == 4) {
     7fc:	68 c0       	rjmp	.+208    	; 0x8ce <processCommand+0x226>
     7fe:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
			USART_Transmit('E');
     802:	84 30       	cpi	r24, 0x04	; 4
     804:	39 f4       	brne	.+14     	; 0x814 <processCommand+0x16c>
     806:	85 e4       	ldi	r24, 0x45	; 69
			as4();
     808:	45 d5       	rcall	.+2698   	; 0x1294 <USART_Transmit>
     80a:	40 dd       	rcall	.-1408   	; 0x28c <as4>
			lastStates_t.lastF1state = 4;
     80c:	84 e0       	ldi	r24, 0x04	; 4
     80e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
		}
		else if (lastStates_t.lastF1state == 3) {
     812:	5d c0       	rjmp	.+186    	; 0x8ce <processCommand+0x226>
     814:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
			USART_Transmit('D');
     818:	83 30       	cpi	r24, 0x03	; 3
     81a:	39 f4       	brne	.+14     	; 0x82a <processCommand+0x182>
     81c:	84 e4       	ldi	r24, 0x44	; 68
			as3();
     81e:	3a d5       	rcall	.+2676   	; 0x1294 <USART_Transmit>
			lastStates_t.lastF1state = 3;
     820:	07 dd       	rcall	.-1522   	; 0x230 <as3>
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
		}
		else if (lastStates_t.lastF1state == 2) {
     828:	52 c0       	rjmp	.+164    	; 0x8ce <processCommand+0x226>
     82a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
			USART_Transmit('C');
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	39 f4       	brne	.+14     	; 0x840 <processCommand+0x198>
     832:	83 e4       	ldi	r24, 0x43	; 67
			as2();
     834:	2f d5       	rcall	.+2654   	; 0x1294 <USART_Transmit>
     836:	ce dc       	rcall	.-1636   	; 0x1d4 <as2>
			lastStates_t.lastF1state = 2;
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     83e:	47 c0       	rjmp	.+142    	; 0x8ce <processCommand+0x226>
		}
		else if (lastStates_t.lastF1state == 1) {
     840:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	39 f4       	brne	.+14     	; 0x856 <processCommand+0x1ae>
			USART_Transmit('A');
     848:	81 e4       	ldi	r24, 0x41	; 65
     84a:	24 d5       	rcall	.+2632   	; 0x1294 <USART_Transmit>
     84c:	95 dc       	rcall	.-1750   	; 0x178 <as1>
			as1();
     84e:	81 e0       	ldi	r24, 0x01	; 1
			lastStates_t.lastF1state = 1;
     850:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     854:	3c c0       	rjmp	.+120    	; 0x8ce <processCommand+0x226>
		}
		else if(lastStates_t.lastF1state == 0){
     856:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
     85a:	81 11       	cpse	r24, r1
			switch(fan1_speed){
     85c:	38 c0       	rjmp	.+112    	; 0x8ce <processCommand+0x226>
     85e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <fan1_speed>
     862:	83 30       	cpi	r24, 0x03	; 3
     864:	c9 f0       	breq	.+50     	; 0x898 <processCommand+0x1f0>
     866:	28 f4       	brcc	.+10     	; 0x872 <processCommand+0x1ca>
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	41 f0       	breq	.+16     	; 0x87c <processCommand+0x1d4>
     86c:	82 30       	cpi	r24, 0x02	; 2
     86e:	69 f0       	breq	.+26     	; 0x88a <processCommand+0x1e2>
     870:	28 c0       	rjmp	.+80     	; 0x8c2 <processCommand+0x21a>
     872:	84 30       	cpi	r24, 0x04	; 4
				case 1: as1(); USART_Transmit('A'); lastStates_t.lastF1state = 1; break;
     874:	c1 f0       	breq	.+48     	; 0x8a6 <processCommand+0x1fe>
     876:	85 30       	cpi	r24, 0x05	; 5
     878:	e9 f0       	breq	.+58     	; 0x8b4 <processCommand+0x20c>
     87a:	23 c0       	rjmp	.+70     	; 0x8c2 <processCommand+0x21a>
     87c:	7d dc       	rcall	.-1798   	; 0x178 <as1>
     87e:	81 e4       	ldi	r24, 0x41	; 65
     880:	09 d5       	rcall	.+2578   	; 0x1294 <USART_Transmit>
				case 2: as2(); USART_Transmit('C'); lastStates_t.lastF1state = 2; break;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     888:	22 c0       	rjmp	.+68     	; 0x8ce <processCommand+0x226>
     88a:	a4 dc       	rcall	.-1720   	; 0x1d4 <as2>
     88c:	83 e4       	ldi	r24, 0x43	; 67
     88e:	02 d5       	rcall	.+2564   	; 0x1294 <USART_Transmit>
				case 3: as3(); USART_Transmit('D'); lastStates_t.lastF1state = 3; break;
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     896:	1b c0       	rjmp	.+54     	; 0x8ce <processCommand+0x226>
     898:	cb dc       	rcall	.-1642   	; 0x230 <as3>
     89a:	84 e4       	ldi	r24, 0x44	; 68
     89c:	fb d4       	rcall	.+2550   	; 0x1294 <USART_Transmit>
     89e:	83 e0       	ldi	r24, 0x03	; 3
				case 4: as4(); USART_Transmit('E'); lastStates_t.lastF1state = 4; break;
     8a0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     8a4:	14 c0       	rjmp	.+40     	; 0x8ce <processCommand+0x226>
     8a6:	f2 dc       	rcall	.-1564   	; 0x28c <as4>
     8a8:	85 e4       	ldi	r24, 0x45	; 69
     8aa:	f4 d4       	rcall	.+2536   	; 0x1294 <USART_Transmit>
				case 5: as5(); USART_Transmit('F'); lastStates_t.lastF1state = 5; break;
     8ac:	84 e0       	ldi	r24, 0x04	; 4
     8ae:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     8b2:	0d c0       	rjmp	.+26     	; 0x8ce <processCommand+0x226>
     8b4:	19 dd       	rcall	.-1486   	; 0x2e8 <as5>
     8b6:	86 e4       	ldi	r24, 0x46	; 70
     8b8:	ed d4       	rcall	.+2522   	; 0x1294 <USART_Transmit>
				default: as1(); USART_Transmit('A'); lastStates_t.lastF1state = 1; break;
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     8c0:	06 c0       	rjmp	.+12     	; 0x8ce <processCommand+0x226>
     8c2:	5a dc       	rcall	.-1868   	; 0x178 <as1>
     8c4:	81 e4       	ldi	r24, 0x41	; 65
     8c6:	e6 d4       	rcall	.+2508   	; 0x1294 <USART_Transmit>
			}
		}
		eeprom_write(fan1_address, lastStates_t.lastF1state);
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     8ce:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <lastStates_t+0x4>
     8d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fan1_address>
     8d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fan1_address+0x1>
	}
	
	else if (strcmp(command, "F1") == 0) {      //Fan 1 OFF
     8da:	f7 db       	rcall	.-2066   	; 0xca <eeprom_write>
     8dc:	81 c1       	rjmp	.+770    	; 0xbe0 <processCommand+0x538>
     8de:	6c e3       	ldi	r22, 0x3C	; 60
     8e0:	71 e0       	ldi	r23, 0x01	; 1
		USART_Transmit('B');
     8e2:	ce 01       	movw	r24, r28
     8e4:	df d4       	rcall	.+2494   	; 0x12a4 <strcmp>
     8e6:	89 2b       	or	r24, r25
		as0();
     8e8:	51 f4       	brne	.+20     	; 0x8fe <processCommand+0x256>
     8ea:	82 e4       	ldi	r24, 0x42	; 66
		eeprom_write(fan1_address, 0);
     8ec:	d3 d4       	rcall	.+2470   	; 0x1294 <USART_Transmit>
     8ee:	16 dc       	rcall	.-2004   	; 0x11c <as0>
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fan1_address>
     8f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fan1_address+0x1>
	}
	
	else if (strcmp(command, "F2") == 0) {         // Fan 2 ON
     8fa:	e7 db       	rcall	.-2098   	; 0xca <eeprom_write>
     8fc:	71 c1       	rjmp	.+738    	; 0xbe0 <processCommand+0x538>
     8fe:	6f e3       	ldi	r22, 0x3F	; 63
     900:	71 e0       	ldi	r23, 0x01	; 1
     902:	ce 01       	movw	r24, r28
		if (lastStates_t.lastF2state == 5) {
     904:	cf d4       	rcall	.+2462   	; 0x12a4 <strcmp>
     906:	89 2b       	or	r24, r25
     908:	09 f0       	breq	.+2      	; 0x90c <processCommand+0x264>
     90a:	7b c0       	rjmp	.+246    	; 0xa02 <processCommand+0x35a>
			USART_Transmit('J');
     90c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
			af5();
     910:	85 30       	cpi	r24, 0x05	; 5
			lastStates_t.lastF2state = 5;
     912:	39 f4       	brne	.+14     	; 0x922 <processCommand+0x27a>
     914:	8a e4       	ldi	r24, 0x4A	; 74
     916:	be d4       	rcall	.+2428   	; 0x1294 <USART_Transmit>
     918:	e7 dd       	rcall	.-1074   	; 0x4e8 <af5>
		}
		else if (lastStates_t.lastF2state == 4) {
     91a:	85 e0       	ldi	r24, 0x05	; 5
     91c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     920:	68 c0       	rjmp	.+208    	; 0x9f2 <processCommand+0x34a>
			USART_Transmit('I');
     922:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
     926:	84 30       	cpi	r24, 0x04	; 4
			af4();
     928:	39 f4       	brne	.+14     	; 0x938 <processCommand+0x290>
     92a:	89 e4       	ldi	r24, 0x49	; 73
			lastStates_t.lastF2state = 4;
     92c:	b3 d4       	rcall	.+2406   	; 0x1294 <USART_Transmit>
     92e:	b2 dd       	rcall	.-1180   	; 0x494 <af4>
     930:	84 e0       	ldi	r24, 0x04	; 4
     932:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
		}
		else if (lastStates_t.lastF2state == 3) {
     936:	5d c0       	rjmp	.+186    	; 0x9f2 <processCommand+0x34a>
     938:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
			USART_Transmit('X');
     93c:	83 30       	cpi	r24, 0x03	; 3
     93e:	39 f4       	brne	.+14     	; 0x94e <processCommand+0x2a6>
			af3();
     940:	88 e5       	ldi	r24, 0x58	; 88
			lastStates_t.lastF2state = 3;
     942:	a8 d4       	rcall	.+2384   	; 0x1294 <USART_Transmit>
     944:	7d dd       	rcall	.-1286   	; 0x440 <af3>
     946:	83 e0       	ldi	r24, 0x03	; 3
		}
		else if (lastStates_t.lastF2state == 2) {
     948:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     94c:	52 c0       	rjmp	.+164    	; 0x9f2 <processCommand+0x34a>
			USART_Transmit('Z');
     94e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
			af2();
     952:	82 30       	cpi	r24, 0x02	; 2
			lastStates_t.lastF2state = 2;
     954:	39 f4       	brne	.+14     	; 0x964 <processCommand+0x2bc>
     956:	8a e5       	ldi	r24, 0x5A	; 90
     958:	9d d4       	rcall	.+2362   	; 0x1294 <USART_Transmit>
     95a:	48 dd       	rcall	.-1392   	; 0x3ec <af2>
		}
		else if (lastStates_t.lastF2state == 1){
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
			USART_Transmit('K');
     962:	47 c0       	rjmp	.+142    	; 0x9f2 <processCommand+0x34a>
     964:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
			af1();
			lastStates_t.lastF2state = 1;
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	39 f4       	brne	.+14     	; 0x97a <processCommand+0x2d2>
     96c:	8b e4       	ldi	r24, 0x4B	; 75
		}
		else if (lastStates_t.lastF2state == 0){
     96e:	92 d4       	rcall	.+2340   	; 0x1294 <USART_Transmit>
     970:	13 dd       	rcall	.-1498   	; 0x398 <af1>
     972:	81 e0       	ldi	r24, 0x01	; 1
			switch(fan2_speed){
     974:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     978:	3c c0       	rjmp	.+120    	; 0x9f2 <processCommand+0x34a>
     97a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
     97e:	81 11       	cpse	r24, r1
     980:	38 c0       	rjmp	.+112    	; 0x9f2 <processCommand+0x34a>
     982:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <fan2_speed>
     986:	83 30       	cpi	r24, 0x03	; 3
     988:	c9 f0       	breq	.+50     	; 0x9bc <processCommand+0x314>
     98a:	28 f4       	brcc	.+10     	; 0x996 <processCommand+0x2ee>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	41 f0       	breq	.+16     	; 0x9a0 <processCommand+0x2f8>
				case 1: af1(); USART_Transmit('K'); lastStates_t.lastF2state = 1; break;
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	69 f0       	breq	.+26     	; 0x9ae <processCommand+0x306>
     994:	28 c0       	rjmp	.+80     	; 0x9e6 <processCommand+0x33e>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	c1 f0       	breq	.+48     	; 0x9ca <processCommand+0x322>
     99a:	85 30       	cpi	r24, 0x05	; 5
     99c:	e9 f0       	breq	.+58     	; 0x9d8 <processCommand+0x330>
				case 2: af2(); USART_Transmit('Z'); lastStates_t.lastF2state = 2; break;
     99e:	23 c0       	rjmp	.+70     	; 0x9e6 <processCommand+0x33e>
     9a0:	fb dc       	rcall	.-1546   	; 0x398 <af1>
     9a2:	8b e4       	ldi	r24, 0x4B	; 75
     9a4:	77 d4       	rcall	.+2286   	; 0x1294 <USART_Transmit>
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
				case 3: af3(); USART_Transmit('X'); lastStates_t.lastF2state = 3; break;
     9ac:	22 c0       	rjmp	.+68     	; 0x9f2 <processCommand+0x34a>
     9ae:	1e dd       	rcall	.-1476   	; 0x3ec <af2>
     9b0:	8a e5       	ldi	r24, 0x5A	; 90
     9b2:	70 d4       	rcall	.+2272   	; 0x1294 <USART_Transmit>
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
				case 4: af4(); USART_Transmit('I'); lastStates_t.lastF2state = 4; break;
     9ba:	1b c0       	rjmp	.+54     	; 0x9f2 <processCommand+0x34a>
     9bc:	41 dd       	rcall	.-1406   	; 0x440 <af3>
     9be:	88 e5       	ldi	r24, 0x58	; 88
     9c0:	69 d4       	rcall	.+2258   	; 0x1294 <USART_Transmit>
     9c2:	83 e0       	ldi	r24, 0x03	; 3
     9c4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
				case 5: af5(); USART_Transmit('J'); lastStates_t.lastF2state = 5; break;
     9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <processCommand+0x34a>
     9ca:	64 dd       	rcall	.-1336   	; 0x494 <af4>
     9cc:	89 e4       	ldi	r24, 0x49	; 73
     9ce:	62 d4       	rcall	.+2244   	; 0x1294 <USART_Transmit>
     9d0:	84 e0       	ldi	r24, 0x04	; 4
     9d2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
				default: af1(); USART_Transmit('K'); lastStates_t.lastF2state = 1; break;
     9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <processCommand+0x34a>
     9d8:	87 dd       	rcall	.-1266   	; 0x4e8 <af5>
     9da:	8a e4       	ldi	r24, 0x4A	; 74
     9dc:	5b d4       	rcall	.+2230   	; 0x1294 <USART_Transmit>
     9de:	85 e0       	ldi	r24, 0x05	; 5
     9e0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
			}
		}
		eeprom_write(fan2_address, lastStates_t.lastF2state);
     9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <processCommand+0x34a>
     9e6:	d8 dc       	rcall	.-1616   	; 0x398 <af1>
     9e8:	8b e4       	ldi	r24, 0x4B	; 75
     9ea:	54 d4       	rcall	.+2216   	; 0x1294 <USART_Transmit>
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     9f2:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <lastStates_t+0x5>
	}
	
	else if (strcmp(command, "F3") == 0) {     //Fan 2 OFF
     9f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9fe:	65 db       	rcall	.-2358   	; 0xca <eeprom_write>
		USART_Transmit('W');
     a00:	ef c0       	rjmp	.+478    	; 0xbe0 <processCommand+0x538>
     a02:	62 e4       	ldi	r22, 0x42	; 66
     a04:	71 e0       	ldi	r23, 0x01	; 1
		af0();
     a06:	ce 01       	movw	r24, r28
		eeprom_write(fan2_address, 0);
     a08:	4d d4       	rcall	.+2202   	; 0x12a4 <strcmp>
     a0a:	89 2b       	or	r24, r25
     a0c:	51 f4       	brne	.+20     	; 0xa22 <processCommand+0x37a>
     a0e:	87 e5       	ldi	r24, 0x57	; 87
     a10:	41 d4       	rcall	.+2178   	; 0x1294 <USART_Transmit>
     a12:	98 dc       	rcall	.-1744   	; 0x344 <af0>
     a14:	60 e0       	ldi	r22, 0x00	; 0
	}
	
	else if (strcmp(command, "U1") == 0) {     //Fan 1 Increment
     a16:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a1a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a1e:	55 db       	rcall	.-2390   	; 0xca <eeprom_write>
     a20:	df c0       	rjmp	.+446    	; 0xbe0 <processCommand+0x538>
		if ((PORTC & (1 << PC2)) == 0) {
     a22:	65 e4       	ldi	r22, 0x45	; 69
     a24:	71 e0       	ldi	r23, 0x01	; 1
			USART_Transmit('A');
     a26:	ce 01       	movw	r24, r28
     a28:	3d d4       	rcall	.+2170   	; 0x12a4 <strcmp>
			as1();
     a2a:	89 2b       	or	r24, r25
			lastStates_t.lastF1state = 1;
     a2c:	09 f0       	breq	.+2      	; 0xa30 <processCommand+0x388>
     a2e:	38 c0       	rjmp	.+112    	; 0xaa0 <processCommand+0x3f8>
     a30:	aa 99       	sbic	0x15, 2	; 21
     a32:	07 c0       	rjmp	.+14     	; 0xa42 <processCommand+0x39a>
		}
		else if ((PORTC & (1 << PC1)) == 0) {
     a34:	81 e4       	ldi	r24, 0x41	; 65
     a36:	2e d4       	rcall	.+2140   	; 0x1294 <USART_Transmit>
			USART_Transmit('C');
     a38:	9f db       	rcall	.-2242   	; 0x178 <as1>
			as2();
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
			lastStates_t.lastF1state = 2;
     a40:	27 c0       	rjmp	.+78     	; 0xa90 <processCommand+0x3e8>
     a42:	a9 99       	sbic	0x15, 1	; 21
     a44:	07 c0       	rjmp	.+14     	; 0xa54 <processCommand+0x3ac>
		}
		else if ((PORTC & (1 << PC0)) == 0) {
     a46:	83 e4       	ldi	r24, 0x43	; 67
			USART_Transmit('D');
     a48:	25 d4       	rcall	.+2122   	; 0x1294 <USART_Transmit>
     a4a:	c4 db       	rcall	.-2168   	; 0x1d4 <as2>
     a4c:	82 e0       	ldi	r24, 0x02	; 2
			as3();
     a4e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
			lastStates_t.lastF1state = 3;
     a52:	1e c0       	rjmp	.+60     	; 0xa90 <processCommand+0x3e8>
     a54:	a8 99       	sbic	0x15, 0	; 21
     a56:	07 c0       	rjmp	.+14     	; 0xa66 <processCommand+0x3be>
		}
		else if ((PORTG & (1 << PG1)) == 0) {
     a58:	84 e4       	ldi	r24, 0x44	; 68
     a5a:	1c d4       	rcall	.+2104   	; 0x1294 <USART_Transmit>
     a5c:	e9 db       	rcall	.-2094   	; 0x230 <as3>
     a5e:	83 e0       	ldi	r24, 0x03	; 3
			USART_Transmit('E');
     a60:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     a64:	15 c0       	rjmp	.+42     	; 0xa90 <processCommand+0x3e8>
			as4();
     a66:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			lastStates_t.lastF1state = 4;
     a6a:	81 fd       	sbrc	r24, 1
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <processCommand+0x3d4>
     a6e:	85 e4       	ldi	r24, 0x45	; 69
		}
		else if ((PORTG & (1 << PG0)) == 0) {
     a70:	11 d4       	rcall	.+2082   	; 0x1294 <USART_Transmit>
     a72:	0c dc       	rcall	.-2024   	; 0x28c <as4>
     a74:	84 e0       	ldi	r24, 0x04	; 4
			USART_Transmit('F');
     a76:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     a7a:	0a c0       	rjmp	.+20     	; 0xa90 <processCommand+0x3e8>
			as5();
     a7c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			lastStates_t.lastF1state = 5;
     a80:	80 fd       	sbrc	r24, 0
		}
		eeprom_write(fan1_address, lastStates_t.lastF1state);
     a82:	06 c0       	rjmp	.+12     	; 0xa90 <processCommand+0x3e8>
     a84:	86 e4       	ldi	r24, 0x46	; 70
     a86:	06 d4       	rcall	.+2060   	; 0x1294 <USART_Transmit>
     a88:	2f dc       	rcall	.-1954   	; 0x2e8 <as5>
     a8a:	85 e0       	ldi	r24, 0x05	; 5
     a8c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     a90:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <lastStates_t+0x4>
	}
	
	else if (strcmp(command, "U2") == 0) {        // Fan 2 Increment
     a94:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fan1_address>
     a98:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fan1_address+0x1>
     a9c:	16 db       	rcall	.-2516   	; 0xca <eeprom_write>
     a9e:	a0 c0       	rjmp	.+320    	; 0xbe0 <processCommand+0x538>
		if ((PORTD & (1 << PD5)) == 0) {
     aa0:	68 e4       	ldi	r22, 0x48	; 72
			USART_Transmit('K');
     aa2:	71 e0       	ldi	r23, 0x01	; 1
     aa4:	ce 01       	movw	r24, r28
     aa6:	fe d3       	rcall	.+2044   	; 0x12a4 <strcmp>
			af1();
     aa8:	89 2b       	or	r24, r25
     aaa:	09 f0       	breq	.+2      	; 0xaae <processCommand+0x406>
			lastStates_t.lastF2state = 1;
     aac:	34 c0       	rjmp	.+104    	; 0xb16 <processCommand+0x46e>
     aae:	95 99       	sbic	0x12, 5	; 18
     ab0:	07 c0       	rjmp	.+14     	; 0xac0 <processCommand+0x418>
		}
		else if ((PORTD & (1 << PD4)) == 0) {
     ab2:	8b e4       	ldi	r24, 0x4B	; 75
     ab4:	ef d3       	rcall	.+2014   	; 0x1294 <USART_Transmit>
			USART_Transmit('Z');
     ab6:	70 dc       	rcall	.-1824   	; 0x398 <af1>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
			af2();
     abe:	23 c0       	rjmp	.+70     	; 0xb06 <processCommand+0x45e>
			lastStates_t.lastF2state = 2;
     ac0:	94 99       	sbic	0x12, 4	; 18
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <processCommand+0x42a>
     ac4:	8a e5       	ldi	r24, 0x5A	; 90
		}
		
		else if ((PORTD & (1 << PD3)) == 0) {
     ac6:	e6 d3       	rcall	.+1996   	; 0x1294 <USART_Transmit>
     ac8:	91 dc       	rcall	.-1758   	; 0x3ec <af2>
			USART_Transmit('X');
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
			af3();
     ad0:	1a c0       	rjmp	.+52     	; 0xb06 <processCommand+0x45e>
			lastStates_t.lastF2state = 3;
     ad2:	93 99       	sbic	0x12, 3	; 18
     ad4:	07 c0       	rjmp	.+14     	; 0xae4 <processCommand+0x43c>
     ad6:	88 e5       	ldi	r24, 0x58	; 88
		}
		else if ((PORTD & (1 << PD2)) == 0) {
     ad8:	dd d3       	rcall	.+1978   	; 0x1294 <USART_Transmit>
     ada:	b2 dc       	rcall	.-1692   	; 0x440 <af3>
			USART_Transmit('I');
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
			af4();
     ae2:	11 c0       	rjmp	.+34     	; 0xb06 <processCommand+0x45e>
     ae4:	92 99       	sbic	0x12, 2	; 18
			lastStates_t.lastF2state = 4;
     ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <processCommand+0x44e>
     ae8:	89 e4       	ldi	r24, 0x49	; 73
		}
		
		else if ((PORTD & (1 << PD1)) == 0) {
     aea:	d4 d3       	rcall	.+1960   	; 0x1294 <USART_Transmit>
     aec:	d3 dc       	rcall	.-1626   	; 0x494 <af4>
			USART_Transmit('J');
     aee:	84 e0       	ldi	r24, 0x04	; 4
     af0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
			af5();
     af4:	08 c0       	rjmp	.+16     	; 0xb06 <processCommand+0x45e>
			lastStates_t.lastF2state = 5;
     af6:	91 99       	sbic	0x12, 1	; 18
     af8:	06 c0       	rjmp	.+12     	; 0xb06 <processCommand+0x45e>
     afa:	8a e4       	ldi	r24, 0x4A	; 74
		}
		eeprom_write(fan2_address, lastStates_t.lastF2state);
     afc:	cb d3       	rcall	.+1942   	; 0x1294 <USART_Transmit>
     afe:	f4 dc       	rcall	.-1560   	; 0x4e8 <af5>
     b00:	85 e0       	ldi	r24, 0x05	; 5
     b02:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     b06:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <lastStates_t+0x5>
	}
	
	else if (strcmp(command, "D1") == 0) {    // Fan 1 Decrement
     b0a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b0e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b12:	db da       	rcall	.-2634   	; 0xca <eeprom_write>
     b14:	65 c0       	rjmp	.+202    	; 0xbe0 <processCommand+0x538>
		if ((PORTG & (1 << PG0)) != 0) {
     b16:	6b e4       	ldi	r22, 0x4B	; 75
     b18:	71 e0       	ldi	r23, 0x01	; 1
     b1a:	ce 01       	movw	r24, r28
     b1c:	c3 d3       	rcall	.+1926   	; 0x12a4 <strcmp>
			USART_Transmit('E');
     b1e:	89 2b       	or	r24, r25
     b20:	79 f5       	brne	.+94     	; 0xb80 <processCommand+0x4d8>
     b22:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
			as4();
     b26:	80 ff       	sbrs	r24, 0
			lastStates_t.lastF1state = 4;
     b28:	07 c0       	rjmp	.+14     	; 0xb38 <processCommand+0x490>
     b2a:	85 e4       	ldi	r24, 0x45	; 69
     b2c:	b3 d3       	rcall	.+1894   	; 0x1294 <USART_Transmit>
     b2e:	ae db       	rcall	.-2212   	; 0x28c <as4>
		}
		else if ((PORTG & (1 << PG1)) != 0) {
     b30:	84 e0       	ldi	r24, 0x04	; 4
     b32:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     b36:	1c c0       	rjmp	.+56     	; 0xb70 <processCommand+0x4c8>
			USART_Transmit('D');
     b38:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     b3c:	81 ff       	sbrs	r24, 1
			as3();
     b3e:	07 c0       	rjmp	.+14     	; 0xb4e <processCommand+0x4a6>
     b40:	84 e4       	ldi	r24, 0x44	; 68
			lastStates_t.lastF1state = 3;
     b42:	a8 d3       	rcall	.+1872   	; 0x1294 <USART_Transmit>
     b44:	75 db       	rcall	.-2326   	; 0x230 <as3>
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
		}
		else if ((PORTC & (1 << PC0)) != 0) {
     b4c:	11 c0       	rjmp	.+34     	; 0xb70 <processCommand+0x4c8>
			USART_Transmit('C');
     b4e:	a8 9b       	sbis	0x15, 0	; 21
     b50:	07 c0       	rjmp	.+14     	; 0xb60 <processCommand+0x4b8>
     b52:	83 e4       	ldi	r24, 0x43	; 67
			as2();
     b54:	9f d3       	rcall	.+1854   	; 0x1294 <USART_Transmit>
     b56:	3e db       	rcall	.-2436   	; 0x1d4 <as2>
			lastStates_t.lastF1state = 2;
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     b5e:	08 c0       	rjmp	.+16     	; 0xb70 <processCommand+0x4c8>
		}
		else if ((PORTC & (1 << PC1)) != 0) {
     b60:	a9 9b       	sbis	0x15, 1	; 21
     b62:	06 c0       	rjmp	.+12     	; 0xb70 <processCommand+0x4c8>
			USART_Transmit('A');
     b64:	81 e4       	ldi	r24, 0x41	; 65
     b66:	96 d3       	rcall	.+1836   	; 0x1294 <USART_Transmit>
     b68:	07 db       	rcall	.-2546   	; 0x178 <as1>
			as1();
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
			lastStates_t.lastF1state = 1;
     b70:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <lastStates_t+0x4>
		}
		eeprom_write(fan1_address,lastStates_t.lastF1state);
     b74:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fan1_address>
     b78:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fan1_address+0x1>
     b7c:	a6 da       	rcall	.-2740   	; 0xca <eeprom_write>
     b7e:	30 c0       	rjmp	.+96     	; 0xbe0 <processCommand+0x538>
     b80:	6e e4       	ldi	r22, 0x4E	; 78
     b82:	71 e0       	ldi	r23, 0x01	; 1
     b84:	ce 01       	movw	r24, r28
	}
	
	else if (strcmp(command, "D2") == 0) {  //Fan 2 Decrement
     b86:	8e d3       	rcall	.+1820   	; 0x12a4 <strcmp>
     b88:	89 2b       	or	r24, r25
     b8a:	51 f5       	brne	.+84     	; 0xbe0 <processCommand+0x538>
     b8c:	91 9b       	sbis	0x12, 1	; 18
     b8e:	07 c0       	rjmp	.+14     	; 0xb9e <processCommand+0x4f6>
     b90:	89 e4       	ldi	r24, 0x49	; 73
     b92:	80 d3       	rcall	.+1792   	; 0x1294 <USART_Transmit>
		if ((PORTD & (1 << PD1)) != 0) {
     b94:	7f dc       	rcall	.-1794   	; 0x494 <af4>
     b96:	84 e0       	ldi	r24, 0x04	; 4
			USART_Transmit('I');
     b98:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     b9c:	1a c0       	rjmp	.+52     	; 0xbd2 <processCommand+0x52a>
			af4();
     b9e:	92 9b       	sbis	0x12, 2	; 18
     ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <processCommand+0x508>
			lastStates_t.lastF2state = 4;
     ba2:	88 e5       	ldi	r24, 0x58	; 88
     ba4:	77 d3       	rcall	.+1774   	; 0x1294 <USART_Transmit>
     ba6:	4c dc       	rcall	.-1896   	; 0x440 <af3>
     ba8:	83 e0       	ldi	r24, 0x03	; 3
		}
		else if ((PORTD & (1 << PD2)) != 0) {
     baa:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
			USART_Transmit('X');
     bae:	11 c0       	rjmp	.+34     	; 0xbd2 <processCommand+0x52a>
     bb0:	93 9b       	sbis	0x12, 3	; 18
     bb2:	07 c0       	rjmp	.+14     	; 0xbc2 <processCommand+0x51a>
			af3();
     bb4:	8a e5       	ldi	r24, 0x5A	; 90
     bb6:	6e d3       	rcall	.+1756   	; 0x1294 <USART_Transmit>
			lastStates_t.lastF2state = 3;
     bb8:	19 dc       	rcall	.-1998   	; 0x3ec <af2>
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
		}
		else if ((PORTD & (1 << PD3)) != 0) {
     bc0:	08 c0       	rjmp	.+16     	; 0xbd2 <processCommand+0x52a>
     bc2:	94 9b       	sbis	0x12, 4	; 18
			USART_Transmit('Z');
     bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <processCommand+0x52a>
     bc6:	8b e4       	ldi	r24, 0x4B	; 75
     bc8:	65 d3       	rcall	.+1738   	; 0x1294 <USART_Transmit>
			af2();
     bca:	e6 db       	rcall	.-2100   	; 0x398 <af1>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
			lastStates_t.lastF2state = 2;
     bce:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     bd2:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <lastStates_t+0x5>
		}
		else if ((PORTD & (1 << PD4)) != 0) {
     bd6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			USART_Transmit('K');
     bda:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bde:	75 da       	rcall	.-2838   	; 0xca <eeprom_write>
			af1();
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
			lastStates_t.lastF2state = 1;
     be4:	08 95       	ret

00000be6 <__vector_17>:
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
		}
		eeprom_write(fan2_address,lastStates_t.lastF2state);
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	0b b6       	in	r0, 0x3b	; 59
     bf2:	0f 92       	push	r0
     bf4:	2f 93       	push	r18
     bf6:	3f 93       	push	r19
     bf8:	4f 93       	push	r20
	}
}
     bfa:	5f 93       	push	r21
     bfc:	6f 93       	push	r22
     bfe:	7f 93       	push	r23

ISR(SPI_STC_vect) {
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
     c04:	af 93       	push	r26
     c06:	bf 93       	push	r27
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
	uint8_t receivedData = SPDR;                    // Read received data from SPI data register
     c0c:	9f b1       	in	r25, 0x0f	; 15
	static char receivedBytes[3];
	static uint8_t byteIndex = 0;
	if (byteIndex < 2) {
     c0e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <byteIndex.2022>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	88 f4       	brcc	.+34     	; 0xc38 <__vector_17+0x52>
		receivedBytes[byteIndex] = receivedData;
     c16:	e8 2f       	mov	r30, r24
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ee 5a       	subi	r30, 0xAE	; 174
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	90 83       	st	Z, r25
		byteIndex++;
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <byteIndex.2022>
		if (byteIndex == 2) {
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	39 f4       	brne	.+14     	; 0xc38 <__vector_17+0x52>
			receivedBytes[2] = '\0';
     c2a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end+0x2>
			processCommand(receivedBytes);          // Process the received command
     c2e:	82 e5       	ldi	r24, 0x52	; 82
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	3a dd       	rcall	.-1420   	; 0x6a8 <processCommand>
			byteIndex = 0;
     c34:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <byteIndex.2022>
		}
	}
	SPSR |= (1 << SPIF);
     c38:	8e b1       	in	r24, 0x0e	; 14
     c3a:	80 68       	ori	r24, 0x80	; 128
     c3c:	8e b9       	out	0x0e, r24	; 14
}
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	bf 91       	pop	r27
     c44:	af 91       	pop	r26
     c46:	9f 91       	pop	r25
     c48:	8f 91       	pop	r24
     c4a:	7f 91       	pop	r23
     c4c:	6f 91       	pop	r22
     c4e:	5f 91       	pop	r21
     c50:	4f 91       	pop	r20
     c52:	3f 91       	pop	r19
     c54:	2f 91       	pop	r18
     c56:	0f 90       	pop	r0
     c58:	0b be       	out	0x3b, r0	; 59
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <readLastStatesFromEEPROM>:
		eeprom_write(fan2_address, lastStates_t.lastF2state);
	}

}

void readLastStatesFromEEPROM(void) {
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	2c 97       	sbiw	r28, 0x0c	; 12
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
	uint16_t addresses[] = {light1_address, light2_address, light3_address, light4_address, fan1_address, fan2_address};
     c7e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <light1_address>
     c82:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <light1_address+0x1>
     c86:	9a 83       	std	Y+2, r25	; 0x02
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
     c8e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
     c92:	9c 83       	std	Y+4, r25	; 0x04
     c94:	8b 83       	std	Y+3, r24	; 0x03
     c96:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
     c9a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
     c9e:	9e 83       	std	Y+6, r25	; 0x06
     ca0:	8d 83       	std	Y+5, r24	; 0x05
     ca2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
     ca6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
     caa:	98 87       	std	Y+8, r25	; 0x08
     cac:	8f 83       	std	Y+7, r24	; 0x07
     cae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fan1_address>
     cb2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fan1_address+0x1>
     cb6:	9a 87       	std	Y+10, r25	; 0x0a
     cb8:	89 87       	std	Y+9, r24	; 0x09
     cba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     cbe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cc2:	9c 87       	std	Y+12, r25	; 0x0c
     cc4:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t *state_ptr = (uint8_t *)&lastStates_t;
	for (uint8_t i = 0; i < sizeof(lastStates_t); i++) {
     cc6:	10 e0       	ldi	r17, 0x00	; 0
     cc8:	14 c0       	rjmp	.+40     	; 0xcf2 <readLastStatesFromEEPROM+0x8e>
		state_ptr[i] = eeprom_read(addresses[i]);
     cca:	81 2f       	mov	r24, r17
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	9c 01       	movw	r18, r24
     cd0:	23 5a       	subi	r18, 0xA3	; 163
     cd2:	3e 4f       	sbci	r19, 0xFE	; 254
     cd4:	79 01       	movw	r14, r18
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	e1 e0       	ldi	r30, 0x01	; 1
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	ec 0f       	add	r30, r28
     ce0:	fd 1f       	adc	r31, r29
     ce2:	e8 0f       	add	r30, r24
     ce4:	f9 1f       	adc	r31, r25
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	03 da       	rcall	.-3066   	; 0xf2 <eeprom_read>
     cec:	f7 01       	movw	r30, r14
     cee:	80 83       	st	Z, r24
}

void readLastStatesFromEEPROM(void) {
	uint16_t addresses[] = {light1_address, light2_address, light3_address, light4_address, fan1_address, fan2_address};
	uint8_t *state_ptr = (uint8_t *)&lastStates_t;
	for (uint8_t i = 0; i < sizeof(lastStates_t); i++) {
     cf0:	1f 5f       	subi	r17, 0xFF	; 255
     cf2:	16 30       	cpi	r17, 0x06	; 6
     cf4:	50 f3       	brcs	.-44     	; 0xcca <readLastStatesFromEEPROM+0x66>
		state_ptr[i] = eeprom_read(addresses[i]);
	}
}
     cf6:	2c 96       	adiw	r28, 0x0c	; 12
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <clearEEPROM>:


void clearEEPROM(void) {
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	2c 97       	sbiw	r28, 0x0c	; 12
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
	uint16_t addresses[] = {light1_address, light2_address, light3_address, light4_address, fan1_address, fan2_address};
     d24:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <light1_address>
     d28:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <light1_address+0x1>
     d2c:	9a 83       	std	Y+2, r25	; 0x02
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
     d34:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
     d38:	9c 83       	std	Y+4, r25	; 0x04
     d3a:	8b 83       	std	Y+3, r24	; 0x03
     d3c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
     d40:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
     d44:	9e 83       	std	Y+6, r25	; 0x06
     d46:	8d 83       	std	Y+5, r24	; 0x05
     d48:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
     d4c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
     d50:	98 87       	std	Y+8, r25	; 0x08
     d52:	8f 83       	std	Y+7, r24	; 0x07
     d54:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fan1_address>
     d58:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fan1_address+0x1>
     d5c:	9a 87       	std	Y+10, r25	; 0x0a
     d5e:	89 87       	std	Y+9, r24	; 0x09
     d60:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d64:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d68:	9c 87       	std	Y+12, r25	; 0x0c
     d6a:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t *state_ptr = (uint8_t *)&lastStates_t;
	for (uint8_t i = 0; i < sizeof(lastStates_t); i++) {
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	16 c0       	rjmp	.+44     	; 0xd9c <clearEEPROM+0x8e>
		if (state_ptr[i] == 0xFF) {
     d70:	e1 2f       	mov	r30, r17
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	e3 5a       	subi	r30, 0xA3	; 163
     d76:	fe 4f       	sbci	r31, 0xFE	; 254
     d78:	80 81       	ld	r24, Z
     d7a:	8f 3f       	cpi	r24, 0xFF	; 255
     d7c:	71 f4       	brne	.+28     	; 0xd9a <clearEEPROM+0x8c>
			eeprom_write(addresses[i], 0x0000);  
     d7e:	e1 2f       	mov	r30, r17
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	8c 0f       	add	r24, r28
     d8c:	9d 1f       	adc	r25, r29
     d8e:	e8 0f       	add	r30, r24
     d90:	f9 1f       	adc	r31, r25
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	98 d9       	rcall	.-3280   	; 0xca <eeprom_write>


void clearEEPROM(void) {
	uint16_t addresses[] = {light1_address, light2_address, light3_address, light4_address, fan1_address, fan2_address};
	uint8_t *state_ptr = (uint8_t *)&lastStates_t;
	for (uint8_t i = 0; i < sizeof(lastStates_t); i++) {
     d9a:	1f 5f       	subi	r17, 0xFF	; 255
     d9c:	16 30       	cpi	r17, 0x06	; 6
     d9e:	40 f3       	brcs	.-48     	; 0xd70 <clearEEPROM+0x62>
		if (state_ptr[i] == 0xFF) {
			eeprom_write(addresses[i], 0x0000);  
		}
	}
}
     da0:	2c 96       	adiw	r28, 0x0c	; 12
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	08 95       	ret

00000db4 <retain_Lights_State_From_EEPROM>:

void retain_Lights_State_From_EEPROM(void){
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	a0 97       	sbiw	r28, 0x20	; 32
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
	pin_map_t lightMapping[4][2] = {
     dd0:	88 e1       	ldi	r24, 0x18	; 24
     dd2:	ea e0       	ldi	r30, 0x0A	; 10
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	de 01       	movw	r26, r28
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	01 90       	ld	r0, Z+
     ddc:	0d 92       	st	X+, r0
     dde:	8a 95       	dec	r24
     de0:	e1 f7       	brne	.-8      	; 0xdda <retain_Lights_State_From_EEPROM+0x26>
		{{&PORTC, PC3}, {&PORTC, PC6}},  // light2state
		{{&PORTD, PD6}, {&PORTA, PA5}},  // light3state
		{{&PORTC, PC4}, {&PORTA, PA4}}   // light4state
	};

	uint8_t *lightStates[4] = {
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	e2 e2       	ldi	r30, 0x22	; 34
     de6:	f1 e0       	ldi	r31, 0x01	; 1
     de8:	de 01       	movw	r26, r28
     dea:	59 96       	adiw	r26, 0x19	; 25
     dec:	01 90       	ld	r0, Z+
     dee:	0d 92       	st	X+, r0
     df0:	8a 95       	dec	r24
     df2:	e1 f7       	brne	.-8      	; 0xdec <retain_Lights_State_From_EEPROM+0x38>
		&lastStates_t.light2state,
		&lastStates_t.light3state,
		&lastStates_t.light4state
	};

	for(uint8_t i = 0; i < 4; i++) {
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	46 c0       	rjmp	.+140    	; 0xe84 <retain_Lights_State_From_EEPROM+0xd0>
		if(*lightStates[i]) {
     df8:	82 2f       	mov	r24, r18
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	fc 01       	movw	r30, r24
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	4c 0f       	add	r20, r28
     e08:	5d 1f       	adc	r21, r29
     e0a:	e4 0f       	add	r30, r20
     e0c:	f5 1f       	adc	r31, r21
     e0e:	00 8c       	ldd	r0, Z+24	; 0x18
     e10:	f1 8d       	ldd	r31, Z+25	; 0x19
     e12:	e0 2d       	mov	r30, r0
     e14:	30 81       	ld	r19, Z
     e16:	33 23       	and	r19, r19
     e18:	a1 f1       	breq	.+104    	; 0xe82 <retain_Lights_State_From_EEPROM+0xce>
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
     e1a:	7c 01       	movw	r14, r24
     e1c:	ee 0c       	add	r14, r14
     e1e:	ff 1c       	adc	r15, r15
     e20:	d7 01       	movw	r26, r14
     e22:	a8 0f       	add	r26, r24
     e24:	b9 1f       	adc	r27, r25
     e26:	aa 0f       	add	r26, r26
     e28:	bb 1f       	adc	r27, r27
     e2a:	a4 0f       	add	r26, r20
     e2c:	b5 1f       	adc	r27, r21
     e2e:	0d 91       	ld	r16, X+
     e30:	1c 91       	ld	r17, X
     e32:	11 97       	sbiw	r26, 0x01	; 1
     e34:	f8 01       	movw	r30, r16
     e36:	30 81       	ld	r19, Z
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	ba 01       	movw	r22, r20
     e3e:	12 96       	adiw	r26, 0x02	; 2
     e40:	0c 90       	ld	r0, X
     e42:	12 97       	sbiw	r26, 0x02	; 2
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <retain_Lights_State_From_EEPROM+0x96>
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <retain_Lights_State_From_EEPROM+0x92>
     e4e:	63 27       	eor	r22, r19
     e50:	60 83       	st	Z, r22
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
     e52:	13 96       	adiw	r26, 0x03	; 3
     e54:	0d 90       	ld	r0, X+
     e56:	bc 91       	ld	r27, X
     e58:	a0 2d       	mov	r26, r0
     e5a:	3c 91       	ld	r19, X
     e5c:	f7 01       	movw	r30, r14
     e5e:	e8 0f       	add	r30, r24
     e60:	f9 1f       	adc	r31, r25
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	8c 0f       	add	r24, r28
     e6c:	9d 1f       	adc	r25, r29
     e6e:	e8 0f       	add	r30, r24
     e70:	f9 1f       	adc	r31, r25
     e72:	05 80       	ldd	r0, Z+5	; 0x05
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <retain_Lights_State_From_EEPROM+0xc6>
     e76:	44 0f       	add	r20, r20
     e78:	55 1f       	adc	r21, r21
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <retain_Lights_State_From_EEPROM+0xc2>
     e7e:	43 27       	eor	r20, r19
     e80:	4c 93       	st	X, r20
		&lastStates_t.light2state,
		&lastStates_t.light3state,
		&lastStates_t.light4state
	};

	for(uint8_t i = 0; i < 4; i++) {
     e82:	2f 5f       	subi	r18, 0xFF	; 255
     e84:	24 30       	cpi	r18, 0x04	; 4
     e86:	08 f4       	brcc	.+2      	; 0xe8a <retain_Lights_State_From_EEPROM+0xd6>
     e88:	b7 cf       	rjmp	.-146    	; 0xdf8 <retain_Lights_State_From_EEPROM+0x44>
		if(*lightStates[i]) {
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
		}
	}
}
     e8a:	a0 96       	adiw	r28, 0x20	; 32
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	08 95       	ret

00000ea4 <retain_Fan1_State_From_EEPROM>:

void retain_Fan1_State_From_EEPROM() {
	if(lastStates_t.lastF1state == 0){
     ea4:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
     ea8:	81 11       	cpse	r24, r1
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <retain_Fan1_State_From_EEPROM+0x10>
		as0();
     eac:	37 d9       	rcall	.-3474   	; 0x11c <as0>
		lastStates_t.lastF1state = 0;
     eae:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <lastStates_t+0x4>
     eb2:	08 95       	ret
		}else if(lastStates_t.lastF1state == 1){
     eb4:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
     eb8:	81 30       	cpi	r24, 0x01	; 1
		as1();
     eba:	29 f4       	brne	.+10     	; 0xec6 <retain_Fan1_State_From_EEPROM+0x22>
     ebc:	5d d9       	rcall	.-3398   	; 0x178 <as1>
		lastStates_t.lastF1state = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     ec4:	08 95       	ret
		}else if(lastStates_t.lastF1state == 2){
     ec6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
     eca:	82 30       	cpi	r24, 0x02	; 2
		as2();
     ecc:	29 f4       	brne	.+10     	; 0xed8 <retain_Fan1_State_From_EEPROM+0x34>
     ece:	82 d9       	rcall	.-3324   	; 0x1d4 <as2>
		lastStates_t.lastF1state = 2;
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     ed6:	08 95       	ret
		}else if(lastStates_t.lastF1state == 3){
     ed8:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
     edc:	83 30       	cpi	r24, 0x03	; 3
		as3();
     ede:	29 f4       	brne	.+10     	; 0xeea <retain_Fan1_State_From_EEPROM+0x46>
     ee0:	a7 d9       	rcall	.-3250   	; 0x230 <as3>
		lastStates_t.lastF1state = 3;
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     ee8:	08 95       	ret
		}else if(lastStates_t.lastF1state == 4){
     eea:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
     eee:	84 30       	cpi	r24, 0x04	; 4
		as4();
     ef0:	29 f4       	brne	.+10     	; 0xefc <retain_Fan1_State_From_EEPROM+0x58>
     ef2:	cc d9       	rcall	.-3176   	; 0x28c <as4>
		lastStates_t.lastF1state = 4;
     ef4:	84 e0       	ldi	r24, 0x04	; 4
     ef6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
		}else if(lastStates_t.lastF1state == 5){
     efa:	08 95       	ret
     efc:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastStates_t+0x4>
     f00:	85 30       	cpi	r24, 0x05	; 5
		as5();
     f02:	21 f4       	brne	.+8      	; 0xf0c <retain_Fan1_State_From_EEPROM+0x68>
     f04:	f1 d9       	rcall	.-3102   	; 0x2e8 <as5>
		lastStates_t.lastF1state = 5;
     f06:	85 e0       	ldi	r24, 0x05	; 5
     f08:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
     f0c:	08 95       	ret

00000f0e <retain_Fan2_State_From_EEPROM>:
	}
}

void retain_Fan2_State_From_EEPROM(){
	if(lastStates_t.lastF2state == 0){
     f0e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
     f12:	81 11       	cpse	r24, r1
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <retain_Fan2_State_From_EEPROM+0x10>
		af0();
     f16:	16 da       	rcall	.-3028   	; 0x344 <af0>
		lastStates_t.lastF2state = 0;
     f18:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <lastStates_t+0x5>
     f1c:	08 95       	ret
		}else if(lastStates_t.lastF2state == 1){
     f1e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
     f22:	81 30       	cpi	r24, 0x01	; 1
		af1();
     f24:	29 f4       	brne	.+10     	; 0xf30 <retain_Fan2_State_From_EEPROM+0x22>
     f26:	38 da       	rcall	.-2960   	; 0x398 <af1>
		lastStates_t.lastF2state = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     f2e:	08 95       	ret
		}else if(lastStates_t.lastF2state == 2){
     f30:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
     f34:	82 30       	cpi	r24, 0x02	; 2
		af2();
     f36:	29 f4       	brne	.+10     	; 0xf42 <retain_Fan2_State_From_EEPROM+0x34>
     f38:	59 da       	rcall	.-2894   	; 0x3ec <af2>
		lastStates_t.lastF2state = 2;
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     f40:	08 95       	ret
		}else if(lastStates_t.lastF2state == 3){
     f42:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
     f46:	83 30       	cpi	r24, 0x03	; 3
		af3();
     f48:	29 f4       	brne	.+10     	; 0xf54 <retain_Fan2_State_From_EEPROM+0x46>
     f4a:	7a da       	rcall	.-2828   	; 0x440 <af3>
		lastStates_t.lastF2state = 3;
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     f52:	08 95       	ret
		}else if(lastStates_t.lastF2state == 4){
     f54:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
     f58:	84 30       	cpi	r24, 0x04	; 4
		af4();
     f5a:	29 f4       	brne	.+10     	; 0xf66 <retain_Fan2_State_From_EEPROM+0x58>
     f5c:	9b da       	rcall	.-2762   	; 0x494 <af4>
		lastStates_t.lastF2state = 4;
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
		}else if(lastStates_t.lastF2state == 5){
     f64:	08 95       	ret
     f66:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <lastStates_t+0x5>
     f6a:	85 30       	cpi	r24, 0x05	; 5
		af5();
     f6c:	21 f4       	brne	.+8      	; 0xf76 <retain_Fan2_State_From_EEPROM+0x68>
     f6e:	bc da       	rcall	.-2696   	; 0x4e8 <af5>
		lastStates_t.lastF2state = 5;
     f70:	85 e0       	ldi	r24, 0x05	; 5
     f72:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
     f76:	08 95       	ret

00000f78 <setup>:
	}
}

void setup(){
	i2c_init();
     f78:	e1 da       	rcall	.-2622   	; 0x53c <i2c_init>
	timer1_init();
     f7a:	56 db       	rcall	.-2388   	; 0x628 <timer1_init>
	SPI_init_slave(); // Initialize SPI as a slave
     f7c:	8b db       	rcall	.-2282   	; 0x694 <SPI_init_slave>
	USART_Init(MYUBRR); //Initialize Uart
     f7e:	87 e6       	ldi	r24, 0x67	; 103
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	7c d1       	rcall	.+760    	; 0x127c <USART_Init>
     f84:	81 b3       	in	r24, 0x11	; 17
	
	DDRD |= (1 << PD1) |(1 << PD2) |(1 << PD3) |(1 << PD4) |(1 << PD5) |(1 << PD6) |(1 << PD7);              // Set PORTD pins as output
     f86:	8e 6f       	ori	r24, 0xFE	; 254
     f88:	81 bb       	out	0x11, r24	; 17
     f8a:	e4 e6       	ldi	r30, 0x64	; 100
	DDRG |= (1 << PG0) | (1 << PG1)| (1 << PG2)|(1 << PG4);                                                             // Set PORTG pins 0 and 1 as output for LEDs
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	87 61       	ori	r24, 0x17	; 23
     f92:	80 83       	st	Z, r24
     f94:	84 b3       	in	r24, 0x14	; 20
	DDRC |= (1 << PC5) | (1 << PC6)| (1 << PC7)| (1 << PC0)| (1 << PC1)| (1 << PC2)| (1 << PC3)| (1 << PC4); // Set PORTC pins as output
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	84 bb       	out	0x14, r24	; 20
     f9a:	9a b3       	in	r25, 0x1a	; 26
	DDRA |= (1 << PA5) | (1 << PA4)|(1 << PA7) | (1 << PA6)| (1 << PA3)|(1 << PA2) | (1 << PA1)| (1 << PA0); // Set PORTA pins as output
     f9c:	8a bb       	out	0x1a, r24	; 26
     f9e:	08 95       	ret

00000fa0 <main>:
     fa0:	eb df       	rcall	.-42     	; 0xf78 <setup>
uint16_t fan1_address   = 0x0004;
uint16_t fan2_address   = 0x0005;

int main(void){
	setup();
	custom_delay_ms(100);
     fa2:	84 e6       	ldi	r24, 0x64	; 100
     fa4:	90 e0       	ldi	r25, 0x00	; 0
	readLastStatesFromEEPROM();
     fa6:	5d db       	rcall	.-2374   	; 0x662 <custom_delay_ms>
	custom_delay_ms(100);
     fa8:	5d de       	rcall	.-838    	; 0xc64 <readLastStatesFromEEPROM>
     faa:	84 e6       	ldi	r24, 0x64	; 100
     fac:	90 e0       	ldi	r25, 0x00	; 0
	retain_Lights_State_From_EEPROM();
     fae:	59 db       	rcall	.-2382   	; 0x662 <custom_delay_ms>
	custom_delay_ms(100);
     fb0:	01 df       	rcall	.-510    	; 0xdb4 <retain_Lights_State_From_EEPROM>
     fb2:	84 e6       	ldi	r24, 0x64	; 100
	retain_Fan1_State_From_EEPROM();
     fb4:	90 e0       	ldi	r25, 0x00	; 0
	custom_delay_ms(100);
     fb6:	55 db       	rcall	.-2390   	; 0x662 <custom_delay_ms>
     fb8:	75 df       	rcall	.-278    	; 0xea4 <retain_Fan1_State_From_EEPROM>
     fba:	84 e6       	ldi	r24, 0x64	; 100
	retain_Fan2_State_From_EEPROM();
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	51 db       	rcall	.-2398   	; 0x662 <custom_delay_ms>
	custom_delay_ms(100);
     fc0:	a6 df       	rcall	.-180    	; 0xf0e <retain_Fan2_State_From_EEPROM>
     fc2:	84 e6       	ldi	r24, 0x64	; 100
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	4d db       	rcall	.-2406   	; 0x662 <custom_delay_ms>
	clearEEPROM();
     fc8:	a2 de       	rcall	.-700    	; 0xd0e <clearEEPROM>
     fca:	78 94       	sei
	sei(); // global interrupt
     fcc:	ff cf       	rjmp	.-2      	; 0xfcc <main+0x2c>

00000fce <handle_All_ON>:
     fce:	e0 da       	rcall	.-2624   	; 0x590 <light1_ON>
	DDRA |= (1 << PA5) | (1 << PA4)|(1 << PA7) | (1 << PA6)| (1 << PA3)|(1 << PA2) | (1 << PA1)| (1 << PA0); // Set PORTA pins as output
}

void handle_All_ON() {
	light1_ON();
	light2_ON();
     fd0:	f2 da       	rcall	.-2588   	; 0x5b6 <light2_ON>
	light3_ON();
     fd2:	04 db       	rcall	.-2552   	; 0x5dc <light3_ON>
	light4_ON();
     fd4:	16 db       	rcall	.-2516   	; 0x602 <light4_ON>
     fd6:	2c d9       	rcall	.-3496   	; 0x230 <as3>
	as3();
     fd8:	33 da       	rcall	.-2970   	; 0x440 <af3>
     fda:	ed e5       	ldi	r30, 0x5D	; 93
	af3();
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
     fde:	83 e0       	ldi	r24, 0x03	; 3
	lastStates_t.lastF1state = 3;
     fe0:	84 83       	std	Z+4, r24	; 0x04
     fe2:	85 83       	std	Z+5, r24	; 0x05
     fe4:	08 95       	ret

00000fe6 <handle_All_OFF>:
     fe6:	de da       	rcall	.-2628   	; 0x5a4 <light1_OFF>
	lastStates_t.lastF2state = 3;
     fe8:	f0 da       	rcall	.-2592   	; 0x5ca <light2_OFF>
     fea:	02 db       	rcall	.-2556   	; 0x5f0 <light3_OFF>

void handle_All_OFF() {
	light1_OFF();
	light2_OFF();
	light3_OFF();
	light4_OFF();
     fec:	14 db       	rcall	.-2520   	; 0x616 <light4_OFF>
	as0();
     fee:	96 d8       	rcall	.-3796   	; 0x11c <as0>
     ff0:	a9 d9       	rcall	.-3246   	; 0x344 <af0>
	af0();
     ff2:	ed e5       	ldi	r30, 0x5D	; 93
     ff4:	f1 e0       	ldi	r31, 0x01	; 1
	lastStates_t.lastF1state = 0;
     ff6:	14 82       	std	Z+4, r1	; 0x04
     ff8:	15 82       	std	Z+5, r1	; 0x05
     ffa:	08 95       	ret

00000ffc <__vector_18>:
	lastStates_t.lastF2state = 0;
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
		}
	}
	SPSR |= (1 << SPIF);
}

ISR(USART0_RX_vect) {
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	0b b6       	in	r0, 0x3b	; 59
    1008:	0f 92       	push	r0
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
	unsigned char receivedData = UDR0;
    1026:	8c b1       	in	r24, 0x0c	; 12

	if (receivedData == 'L') {
    1028:	8c 34       	cpi	r24, 0x4C	; 76
    102a:	81 f4       	brne	.+32     	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
		receivedData = USART_Receive();
    102c:	37 d1       	rcall	.+622    	; 0x129c <USART_Receive>
		if (receivedData == '1') {
    102e:	81 33       	cpi	r24, 0x31	; 49
			light1_ON();
    1030:	11 f4       	brne	.+4      	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    1032:	ae da       	rcall	.-2724   	; 0x590 <light1_ON>
    1034:	03 c0       	rjmp	.+6      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
		}
		else if (receivedData == '0') {
    1036:	80 33       	cpi	r24, 0x30	; 48
			light1_OFF();
    1038:	09 f4       	brne	.+2      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    103a:	b4 da       	rcall	.-2712   	; 0x5a4 <light1_OFF>
		}
		eeprom_write(light1_address, lastStates_t.light1state);
    103c:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <lastStates_t>
    1040:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <light1_address>
    1044:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <light1_address+0x1>
    1048:	40 d8       	rcall	.-3968   	; 0xca <eeprom_write>
	}
	else if (receivedData == 'M') {
    104a:	03 c1       	rjmp	.+518    	; 0x1252 <__stack+0x153>
    104c:	8d 34       	cpi	r24, 0x4D	; 77
		receivedData = USART_Receive();
    104e:	81 f4       	brne	.+32     	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
		if (receivedData == '1') {
    1050:	25 d1       	rcall	.+586    	; 0x129c <USART_Receive>
    1052:	81 33       	cpi	r24, 0x31	; 49
			light2_ON();
    1054:	11 f4       	brne	.+4      	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    1056:	af da       	rcall	.-2722   	; 0x5b6 <light2_ON>
		}
		else if (receivedData == '0') {
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    105a:	80 33       	cpi	r24, 0x30	; 48
			light2_OFF();
    105c:	09 f4       	brne	.+2      	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
		}
		eeprom_write(light2_address, lastStates_t.light2state);
    105e:	b5 da       	rcall	.-2710   	; 0x5ca <light2_OFF>
    1060:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <lastStates_t+0x1>
    1064:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
    1068:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
    106c:	2e d8       	rcall	.-4004   	; 0xca <eeprom_write>
	}
	else if (receivedData == 'N') {
    106e:	f1 c0       	rjmp	.+482    	; 0x1252 <__stack+0x153>
    1070:	8e 34       	cpi	r24, 0x4E	; 78
		receivedData = USART_Receive();
    1072:	81 f4       	brne	.+32     	; 0x1094 <__DATA_REGION_LENGTH__+0x94>
		if (receivedData == '1') {
    1074:	13 d1       	rcall	.+550    	; 0x129c <USART_Receive>
    1076:	81 33       	cpi	r24, 0x31	; 49
			light3_ON();
    1078:	11 f4       	brne	.+4      	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
    107a:	b0 da       	rcall	.-2720   	; 0x5dc <light3_ON>
		}
		else if (receivedData == '0') {
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
    107e:	80 33       	cpi	r24, 0x30	; 48
			light3_OFF();
    1080:	09 f4       	brne	.+2      	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
    1082:	b6 da       	rcall	.-2708   	; 0x5f0 <light3_OFF>
		}
		eeprom_write(light3_address, lastStates_t.light3state);
    1084:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <lastStates_t+0x2>
    1088:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
    108c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
    1090:	1c d8       	rcall	.-4040   	; 0xca <eeprom_write>
	}
	else if (receivedData == 'P') {
    1092:	df c0       	rjmp	.+446    	; 0x1252 <__stack+0x153>
		receivedData = USART_Receive();
    1094:	80 35       	cpi	r24, 0x50	; 80
    1096:	81 f4       	brne	.+32     	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
		if (receivedData == '1') {
    1098:	01 d1       	rcall	.+514    	; 0x129c <USART_Receive>
			light4_ON();
    109a:	81 33       	cpi	r24, 0x31	; 49
    109c:	11 f4       	brne	.+4      	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
    109e:	b1 da       	rcall	.-2718   	; 0x602 <light4_ON>
		}
		else if (receivedData == '0') {
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <__DATA_REGION_LENGTH__+0xa8>
    10a2:	80 33       	cpi	r24, 0x30	; 48
			light4_OFF();
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <__DATA_REGION_LENGTH__+0xa8>
		}
		eeprom_write(light4_address, lastStates_t.light4state);
    10a6:	b7 da       	rcall	.-2706   	; 0x616 <light4_OFF>
    10a8:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <lastStates_t+0x3>
    10ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
    10b0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
    10b4:	0a d8       	rcall	.-4076   	; 0xca <eeprom_write>
	}
	else if (receivedData == 'F') {
    10b6:	cd c0       	rjmp	.+410    	; 0x1252 <__stack+0x153>
    10b8:	86 34       	cpi	r24, 0x46	; 70
		receivedData = USART_Receive();
    10ba:	09 f0       	breq	.+2      	; 0x10be <__DATA_REGION_LENGTH__+0xbe>
		if (receivedData == '1') {
    10bc:	49 c0       	rjmp	.+146    	; 0x1150 <__stack+0x51>
    10be:	ee d0       	rcall	.+476    	; 0x129c <USART_Receive>
			as1();
    10c0:	81 33       	cpi	r24, 0x31	; 49
    10c2:	b1 f5       	brne	.+108    	; 0x1130 <__stack+0x31>
			lastStates_t.lastF1state = 1;
    10c4:	59 d8       	rcall	.-3918   	; 0x178 <as1>
    10c6:	81 e0       	ldi	r24, 0x01	; 1
			fan1_speed = 1;
    10c8:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
			receivedData = USART_Receive();
    10cc:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <fan1_speed>
			if (receivedData == 'U') {
    10d0:	e5 d0       	rcall	.+458    	; 0x129c <USART_Receive>
    10d2:	85 35       	cpi	r24, 0x55	; 85
				receivedData = USART_Receive();
    10d4:	21 f5       	brne	.+72     	; 0x111e <__stack+0x1f>
    10d6:	e2 d0       	rcall	.+452    	; 0x129c <USART_Receive>
				if (receivedData == '2') {
    10d8:	82 33       	cpi	r24, 0x32	; 50
					as2();
    10da:	39 f4       	brne	.+14     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10dc:	7b d8       	rcall	.-3850   	; 0x1d4 <as2>
					lastStates_t.lastF1state = 2;
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
					fan1_speed = 2;
    10e4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <fan1_speed>
    10e8:	1a c0       	rjmp	.+52     	; 0x111e <__stack+0x1f>
				}
				else if (receivedData == '3') {
    10ea:	83 33       	cpi	r24, 0x33	; 51
    10ec:	39 f4       	brne	.+14     	; 0x10fc <__DATA_REGION_LENGTH__+0xfc>
					as3();
    10ee:	a0 d8       	rcall	.-3776   	; 0x230 <as3>
    10f0:	83 e0       	ldi	r24, 0x03	; 3
					lastStates_t.lastF1state = 3;
    10f2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
    10f6:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <fan1_speed>
					fan1_speed = 3;
    10fa:	11 c0       	rjmp	.+34     	; 0x111e <__stack+0x1f>
				}
				else if (receivedData == '4') {
    10fc:	84 33       	cpi	r24, 0x34	; 52
    10fe:	39 f4       	brne	.+14     	; 0x110e <__stack+0xf>
					as4();
    1100:	c5 d8       	rcall	.-3702   	; 0x28c <as4>
    1102:	84 e0       	ldi	r24, 0x04	; 4
					lastStates_t.lastF1state = 4;
    1104:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
    1108:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <fan1_speed>
					fan1_speed = 4;
    110c:	08 c0       	rjmp	.+16     	; 0x111e <__stack+0x1f>
    110e:	85 33       	cpi	r24, 0x35	; 53
				}
				else if (receivedData == '5') {
    1110:	31 f4       	brne	.+12     	; 0x111e <__stack+0x1f>
    1112:	ea d8       	rcall	.-3628   	; 0x2e8 <as5>
					as5();
    1114:	85 e0       	ldi	r24, 0x05	; 5
    1116:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastStates_t+0x4>
					lastStates_t.lastF1state = 5;
    111a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <fan1_speed>
					fan1_speed = 5;
    111e:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <lastStates_t+0x4>
				}
			}
			eeprom_write(fan1_address, lastStates_t.lastF1state);
    1122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fan1_address>
    1126:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fan1_address+0x1>
    112a:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
    112e:	91 c0       	rjmp	.+290    	; 0x1252 <__stack+0x153>
    1130:	80 33       	cpi	r24, 0x30	; 48
    1132:	09 f0       	breq	.+2      	; 0x1136 <__stack+0x37>
		}
		else if (receivedData == '0') {
    1134:	8e c0       	rjmp	.+284    	; 0x1252 <__stack+0x153>
    1136:	0e 94 8e 00 	call	0x11c	; 0x11c <as0>
			as0();
    113a:	ed e5       	ldi	r30, 0x5D	; 93
			lastStates_t.lastF1state = 0;
    113c:	f1 e0       	ldi	r31, 0x01	; 1
    113e:	14 82       	std	Z+4, r1	; 0x04
			eeprom_write(fan1_address, lastStates_t.lastF1state);
    1140:	64 81       	ldd	r22, Z+4	; 0x04
    1142:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fan1_address>
    1146:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fan1_address+0x1>
    114a:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
		}
	}
	
	else if (receivedData == 'G') {
    114e:	81 c0       	rjmp	.+258    	; 0x1252 <__stack+0x153>
    1150:	87 34       	cpi	r24, 0x47	; 71
		receivedData = USART_Receive();
    1152:	09 f0       	breq	.+2      	; 0x1156 <__stack+0x57>
    1154:	48 c0       	rjmp	.+144    	; 0x11e6 <__stack+0xe7>
		if (receivedData == '1') {
    1156:	a2 d0       	rcall	.+324    	; 0x129c <USART_Receive>
    1158:	81 33       	cpi	r24, 0x31	; 49
			af1();
    115a:	b1 f5       	brne	.+108    	; 0x11c8 <__stack+0xc9>
    115c:	1d d9       	rcall	.-3526   	; 0x398 <af1>
			lastStates_t.lastF2state = 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
			fan2_speed = 1;
    1164:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <fan2_speed>
			receivedData = USART_Receive();
    1168:	99 d0       	rcall	.+306    	; 0x129c <USART_Receive>
			if (receivedData == 'H') {
    116a:	88 34       	cpi	r24, 0x48	; 72
    116c:	21 f5       	brne	.+72     	; 0x11b6 <__stack+0xb7>
				receivedData = USART_Receive();
    116e:	96 d0       	rcall	.+300    	; 0x129c <USART_Receive>
    1170:	82 33       	cpi	r24, 0x32	; 50
				if (receivedData == '2') {
    1172:	39 f4       	brne	.+14     	; 0x1182 <__stack+0x83>
					af2();
    1174:	3b d9       	rcall	.-3466   	; 0x3ec <af2>
    1176:	82 e0       	ldi	r24, 0x02	; 2
					lastStates_t.lastF2state = 2;
    1178:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
    117c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <fan2_speed>
					fan2_speed = 2;
    1180:	1a c0       	rjmp	.+52     	; 0x11b6 <__stack+0xb7>
				}
				else if (receivedData == '3') {
    1182:	83 33       	cpi	r24, 0x33	; 51
    1184:	39 f4       	brne	.+14     	; 0x1194 <__stack+0x95>
					af3();
    1186:	5c d9       	rcall	.-3400   	; 0x440 <af3>
    1188:	83 e0       	ldi	r24, 0x03	; 3
					lastStates_t.lastF2state = 3;
    118a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
    118e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <fan2_speed>
					fan2_speed = 3;
    1192:	11 c0       	rjmp	.+34     	; 0x11b6 <__stack+0xb7>
				}
				else if (receivedData == '4') {
    1194:	84 33       	cpi	r24, 0x34	; 52
    1196:	39 f4       	brne	.+14     	; 0x11a6 <__stack+0xa7>
					af4();
    1198:	7d d9       	rcall	.-3334   	; 0x494 <af4>
    119a:	84 e0       	ldi	r24, 0x04	; 4
					lastStates_t.lastF2state = 4;
    119c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
    11a0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <fan2_speed>
					fan2_speed = 4;
    11a4:	08 c0       	rjmp	.+16     	; 0x11b6 <__stack+0xb7>
    11a6:	85 33       	cpi	r24, 0x35	; 53
				}
				else if (receivedData == '5') {
    11a8:	31 f4       	brne	.+12     	; 0x11b6 <__stack+0xb7>
    11aa:	9e d9       	rcall	.-3268   	; 0x4e8 <af5>
					af5();
    11ac:	85 e0       	ldi	r24, 0x05	; 5
    11ae:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastStates_t+0x5>
					lastStates_t.lastF2state = 5;
    11b2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <fan2_speed>
					fan2_speed = 5;
    11b6:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <lastStates_t+0x5>
				}
			}
			eeprom_write(fan2_address, lastStates_t.lastF2state);
    11ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    11be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11c2:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
    11c6:	45 c0       	rjmp	.+138    	; 0x1252 <__stack+0x153>
		}
		else if (receivedData == '0') {
    11c8:	80 33       	cpi	r24, 0x30	; 48
    11ca:	09 f0       	breq	.+2      	; 0x11ce <__stack+0xcf>
			af0();
    11cc:	42 c0       	rjmp	.+132    	; 0x1252 <__stack+0x153>
    11ce:	ba d8       	rcall	.-3724   	; 0x344 <af0>
			lastStates_t.lastF2state = 0;
    11d0:	ed e5       	ldi	r30, 0x5D	; 93
    11d2:	f1 e0       	ldi	r31, 0x01	; 1
    11d4:	15 82       	std	Z+5, r1	; 0x05
			eeprom_write(fan2_address, lastStates_t.lastF2state);
    11d6:	65 81       	ldd	r22, Z+5	; 0x05
    11d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    11dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11e0:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
    11e4:	36 c0       	rjmp	.+108    	; 0x1252 <__stack+0x153>
		}
	}
	else if (receivedData == 'Z') {
    11e6:	8a 35       	cpi	r24, 0x5A	; 90
    11e8:	a1 f5       	brne	.+104    	; 0x1252 <__stack+0x153>
		receivedData = USART_Receive();
    11ea:	58 d0       	rcall	.+176    	; 0x129c <USART_Receive>
    11ec:	81 33       	cpi	r24, 0x31	; 49
		if (receivedData == '1') {
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <__stack+0xf5>
    11f0:	ee de       	rcall	.-548    	; 0xfce <handle_All_ON>
			handle_All_ON();
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <__stack+0xfb>
    11f4:	80 33       	cpi	r24, 0x30	; 48
    11f6:	09 f4       	brne	.+2      	; 0x11fa <__stack+0xfb>
			} else if (receivedData == '0') {
    11f8:	f6 de       	rcall	.-532    	; 0xfe6 <handle_All_OFF>
    11fa:	cd e5       	ldi	r28, 0x5D	; 93
			handle_All_OFF();
    11fc:	d1 e0       	ldi	r29, 0x01	; 1
    11fe:	68 81       	ld	r22, Y
		}
		eeprom_write(light1_address, lastStates_t.light1state);
    1200:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <light1_address>
    1204:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <light1_address+0x1>
    1208:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
    120c:	69 81       	ldd	r22, Y+1	; 0x01
    120e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
		eeprom_write(light2_address, lastStates_t.light2state);
    1212:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
    1216:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
    121a:	6a 81       	ldd	r22, Y+2	; 0x02
    121c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
		eeprom_write(light3_address, lastStates_t.light3state);
    1220:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
    1224:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
    1228:	6b 81       	ldd	r22, Y+3	; 0x03
    122a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
		eeprom_write(light4_address, lastStates_t.light4state);
    122e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
    1232:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
    1236:	6c 81       	ldd	r22, Y+4	; 0x04
    1238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fan1_address>
		eeprom_write(fan1_address, lastStates_t.lastF1state);
    123c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fan1_address+0x1>
    1240:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
    1244:	6d 81       	ldd	r22, Y+5	; 0x05
    1246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		eeprom_write(fan2_address, lastStates_t.lastF2state);
    124a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    124e:	0e 94 65 00 	call	0xca	; 0xca <eeprom_write>
    1252:	ff 91       	pop	r31
    1254:	ef 91       	pop	r30
    1256:	df 91       	pop	r29
	}

}
    1258:	cf 91       	pop	r28
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0b be       	out	0x3b, r0	; 59
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <USART_Init>:
#include "uart.h"
#include "main.h"

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
    127c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
    1280:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1282:	88 e1       	ldi	r24, 0x18	; 24
    1284:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<RXCIE0);
    1286:	8a b1       	in	r24, 0x0a	; 10
    1288:	80 68       	ori	r24, 0x80	; 128
    128a:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
    128c:	8e e0       	ldi	r24, 0x0E	; 14
    128e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1292:	08 95       	ret

00001294 <USART_Transmit>:
}

void USART_Transmit(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
    1294:	5d 9b       	sbis	0x0b, 5	; 11
    1296:	fe cf       	rjmp	.-4      	; 0x1294 <USART_Transmit>
	UDR0 = data;
    1298:	8c b9       	out	0x0c, r24	; 12
    129a:	08 95       	ret

0000129c <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
    129c:	5f 9b       	sbis	0x0b, 7	; 11
    129e:	fe cf       	rjmp	.-4      	; 0x129c <USART_Receive>
	return UDR0;
    12a0:	8c b1       	in	r24, 0x0c	; 12
    12a2:	08 95       	ret

000012a4 <strcmp>:
    12a4:	fb 01       	movw	r30, r22
    12a6:	dc 01       	movw	r26, r24
    12a8:	8d 91       	ld	r24, X+
    12aa:	01 90       	ld	r0, Z+
    12ac:	80 19       	sub	r24, r0
    12ae:	01 10       	cpse	r0, r1
    12b0:	d9 f3       	breq	.-10     	; 0x12a8 <strcmp+0x4>
    12b2:	99 0b       	sbc	r25, r25
    12b4:	08 95       	ret

000012b6 <_exit>:
    12b6:	f8 94       	cli

000012b8 <__stop_program>:
    12b8:	ff cf       	rjmp	.-2      	; 0x12b8 <__stop_program>
