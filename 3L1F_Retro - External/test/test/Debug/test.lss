
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000978  00000a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800118  00800118  00000a24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c5  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd5  00000000  00000000  000023b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da9  00000000  00000000  0000318e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000820  00000000  00000000  00004288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c6  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000526e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_6>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_20>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e8 e7       	ldi	r30, 0x78	; 120
  e0:	f9 e0       	ldi	r31, 0x09	; 9
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 31       	cpi	r26, 0x18	; 24
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a8 e1       	ldi	r26, 0x18	; 24
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a3 32       	cpi	r26, 0x23	; 35
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 81 04 	call	0x902	; 0x902 <main>
 102:	0c 94 ba 04 	jmp	0x974	; 0x974 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <eeprom_write>:

#include "eeprom.h"
#include "main.h"
#include "i2c.h"

void eeprom_write(uint16_t address, uint8_t data) {
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	d8 2f       	mov	r29, r24
 112:	19 2f       	mov	r17, r25
 114:	c6 2f       	mov	r28, r22
	i2c_start();
 116:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
 11a:	80 ea       	ldi	r24, 0xA0	; 160
 11c:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_write>
	i2c_write((address >> 8) & 0xFF);
 120:	81 2f       	mov	r24, r17
 122:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_write>
	i2c_write(address & 0xFF);
 126:	8d 2f       	mov	r24, r29
 128:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_write>
	i2c_write(data);
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_write>
	i2c_stop();
 132:	0e 94 12 01 	call	0x224	; 0x224 <i2c_stop>
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	08 95       	ret

0000013e <eeprom_read>:

uint8_t eeprom_read(uint16_t address) {
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	c8 2f       	mov	r28, r24
 144:	d9 2f       	mov	r29, r25
	uint8_t data;
	i2c_start();
 146:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
 14a:	80 ea       	ldi	r24, 0xA0	; 160
 14c:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_write>
	i2c_write((address >> 8) & 0xFF);
 150:	8d 2f       	mov	r24, r29
 152:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_write>
	i2c_write(address & 0xFF);
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_write>
	i2c_start();
 15c:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 1);
 160:	81 ea       	ldi	r24, 0xA1	; 161
 162:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_write>
	data = i2c_read_nack();
 166:	0e 94 20 01 	call	0x240	; 0x240 <i2c_read_nack>
 16a:	c8 2f       	mov	r28, r24
	i2c_stop();
 16c:	0e 94 12 01 	call	0x224	; 0x224 <i2c_stop>
	return data;
 170:	8c 2f       	mov	r24, r28
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <fanSpeed0>:

#include "main.h"
#include "fanSpeed.h"

void fanSpeed0(){
	PORTE &= ~(1 << PE3);
 178:	8e b1       	in	r24, 0x0e	; 14
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	8e b9       	out	0x0e, r24	; 14
	PORTE &= ~(1 << PE2);
 17e:	8e b1       	in	r24, 0x0e	; 14
 180:	8b 7f       	andi	r24, 0xFB	; 251
 182:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1 << PD7);
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 77       	andi	r24, 0x7F	; 127
 188:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7b       	andi	r24, 0xBF	; 191
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	08 95       	ret

00000192 <fanSpeed1>:
}

void fanSpeed1(){
	PORTE &= ~(1 << PE3);
 192:	8e b1       	in	r24, 0x0e	; 14
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	8e b9       	out	0x0e, r24	; 14
	PORTE |= (1 << PE2);
 198:	8e b1       	in	r24, 0x0e	; 14
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1 << PD7);
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8f 77       	andi	r24, 0x7F	; 127
 1a2:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8f 7b       	andi	r24, 0xBF	; 191
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	08 95       	ret

000001ac <fanSpeed2>:
}

void fanSpeed2(){
	PORTE |= (1 << PE3);
 1ac:	8e b1       	in	r24, 0x0e	; 14
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	8e b9       	out	0x0e, r24	; 14
	PORTE &= ~(1 << PE2);
 1b2:	8e b1       	in	r24, 0x0e	; 14
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	8e b9       	out	0x0e, r24	; 14
	PORTD |= (1 << PD7);
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	8f 7b       	andi	r24, 0xBF	; 191
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	08 95       	ret

000001c6 <fanSpeed3>:
}

void fanSpeed3(){
	PORTE |= (1 << PE3);
 1c6:	8e b1       	in	r24, 0x0e	; 14
 1c8:	88 60       	ori	r24, 0x08	; 8
 1ca:	8e b9       	out	0x0e, r24	; 14
	PORTE |= (1 << PE2);
 1cc:	8e b1       	in	r24, 0x0e	; 14
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1 << PD7);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 77       	andi	r24, 0x7F	; 127
 1d6:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 7b       	andi	r24, 0xBF	; 191
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	08 95       	ret

000001e0 <fanSpeed4>:
}

void fanSpeed4(){
	PORTE &= ~(1 << PE3);
 1e0:	8e b1       	in	r24, 0x0e	; 14
 1e2:	87 7f       	andi	r24, 0xF7	; 247
 1e4:	8e b9       	out	0x0e, r24	; 14
	PORTE |= (1 << PE2);
 1e6:	8e b1       	in	r24, 0x0e	; 14
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	8e b9       	out	0x0e, r24	; 14
	PORTD |= (1 << PD7);
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	8f 7b       	andi	r24, 0xBF	; 191
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	08 95       	ret

000001fa <fanSpeed5>:
}

void fanSpeed5(){
	PORTE &= ~(1 << PE3);
 1fa:	8e b1       	in	r24, 0x0e	; 14
 1fc:	87 7f       	andi	r24, 0xF7	; 247
 1fe:	8e b9       	out	0x0e, r24	; 14
	PORTE &= ~(1 << PE2);
 200:	8e b1       	in	r24, 0x0e	; 14
 202:	8b 7f       	andi	r24, 0xFB	; 251
 204:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1 << PD7);
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8f 77       	andi	r24, 0x7F	; 127
 20a:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD6);
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	80 64       	ori	r24, 0x40	; 64
 210:	8b b9       	out	0x0b, r24	; 11
 212:	08 95       	ret

00000214 <i2c_start>:

uint8_t i2c_read_ack(void) {
	TWCR0 = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
	while (!(TWCR0 & (1<<TWINT)));
	return TWDR0;
}
 214:	84 ea       	ldi	r24, 0xA4	; 164
 216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21e:	88 23       	and	r24, r24
 220:	e4 f7       	brge	.-8      	; 0x21a <i2c_start+0x6>
 222:	08 95       	ret

00000224 <i2c_stop>:
 224:	84 e9       	ldi	r24, 0x94	; 148
 226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22a:	08 95       	ret

0000022c <i2c_write>:
 22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 230:	84 e8       	ldi	r24, 0x84	; 132
 232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 236:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23a:	88 23       	and	r24, r24
 23c:	e4 f7       	brge	.-8      	; 0x236 <i2c_write+0xa>
 23e:	08 95       	ret

00000240 <i2c_read_nack>:

uint8_t i2c_read_nack(void) {
	TWCR0 = (1<<TWEN) | (1<<TWINT);
 240:	84 e8       	ldi	r24, 0x84	; 132
 242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1<<TWINT)));
 246:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24a:	88 23       	and	r24, r24
 24c:	e4 f7       	brge	.-8      	; 0x246 <i2c_read_nack+0x6>
	return TWDR0;
 24e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 252:	08 95       	ret

00000254 <EXTERNAL_IRQ_0_init>:
	for (uint8_t i = 0; i < sizeof(laststate); i++) {
		if (state_ptr[i] == 0xFF) {
			eeprom_write(addresses[i], 0x0000);
		}
	}
}
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
 25a:	8c e3       	ldi	r24, 0x3C	; 60
 25c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret

00000264 <__vector_6>:
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	cf 93       	push	r28
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
 28c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <startup_Flag>
 290:	88 23       	and	r24, r24
 292:	61 f0       	breq	.+24     	; 0x2ac <__vector_6+0x48>
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	81 ee       	ldi	r24, 0xE1	; 225
 298:	94 e0       	ldi	r25, 0x04	; 4
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <__vector_6+0x36>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <__vector_6+0x40>
 2a4:	00 00       	nop
 2a6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <startup_Flag>
 2aa:	e5 c0       	rjmp	.+458    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 2ac:	ef ef       	ldi	r30, 0xFF	; 255
 2ae:	f0 e7       	ldi	r31, 0x70	; 112
 2b0:	22 e0       	ldi	r18, 0x02	; 2
 2b2:	e1 50       	subi	r30, 0x01	; 1
 2b4:	f0 40       	sbci	r31, 0x00	; 0
 2b6:	20 40       	sbci	r18, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <__vector_6+0x4e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <__vector_6+0x58>
 2bc:	00 00       	nop
 2be:	86 b1       	in	r24, 0x06	; 6
 2c0:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c4:	c8 27       	eor	r28, r24
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	c2 ff       	sbrs	r28, 2
 2cc:	23 c0       	rjmp	.+70     	; 0x314 <__vector_6+0xb0>
 2ce:	9b b1       	in	r25, 0x0b	; 11
 2d0:	88 e0       	ldi	r24, 0x08	; 8
 2d2:	89 27       	eor	r24, r25
 2d4:	8b b9       	out	0x0b, r24	; 11
 2d6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <laststate>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	91 11       	cpse	r25, r1
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <laststate>
 2e4:	89 17       	cp	r24, r25
 2e6:	b1 f0       	breq	.+44     	; 0x314 <__vector_6+0xb0>
 2e8:	0e e1       	ldi	r16, 0x1E	; 30
 2ea:	11 e0       	ldi	r17, 0x01	; 1
 2ec:	f8 01       	movw	r30, r16
 2ee:	80 83       	st	Z, r24
 2f0:	60 81       	ld	r22, Z
 2f2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <light1_address>
 2f6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <light1_address+0x1>
 2fa:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 2fe:	f8 01       	movw	r30, r16
 300:	80 81       	ld	r24, Z
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	21 f4       	brne	.+8      	; 0x30e <__vector_6+0xaa>
 306:	80 e5       	ldi	r24, 0x50	; 80
 308:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 30c:	03 c0       	rjmp	.+6      	; 0x314 <__vector_6+0xb0>
 30e:	81 e5       	ldi	r24, 0x51	; 81
 310:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 314:	c3 ff       	sbrs	r28, 3
 316:	23 c0       	rjmp	.+70     	; 0x35e <__vector_6+0xfa>
 318:	9b b1       	in	r25, 0x0b	; 11
 31a:	80 e1       	ldi	r24, 0x10	; 16
 31c:	89 27       	eor	r24, r25
 31e:	8b b9       	out	0x0b, r24	; 11
 320:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <laststate+0x1>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	91 11       	cpse	r25, r1
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <laststate+0x1>
 32e:	89 17       	cp	r24, r25
 330:	b1 f0       	breq	.+44     	; 0x35e <__vector_6+0xfa>
 332:	0e e1       	ldi	r16, 0x1E	; 30
 334:	11 e0       	ldi	r17, 0x01	; 1
 336:	f8 01       	movw	r30, r16
 338:	81 83       	std	Z+1, r24	; 0x01
 33a:	61 81       	ldd	r22, Z+1	; 0x01
 33c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <light2_address>
 340:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <light2_address+0x1>
 344:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 348:	f8 01       	movw	r30, r16
 34a:	81 81       	ldd	r24, Z+1	; 0x01
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	21 f4       	brne	.+8      	; 0x358 <__vector_6+0xf4>
 350:	82 e5       	ldi	r24, 0x52	; 82
 352:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 356:	03 c0       	rjmp	.+6      	; 0x35e <__vector_6+0xfa>
 358:	83 e5       	ldi	r24, 0x53	; 83
 35a:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 35e:	c4 ff       	sbrs	r28, 4
 360:	23 c0       	rjmp	.+70     	; 0x3a8 <__vector_6+0x144>
 362:	9b b1       	in	r25, 0x0b	; 11
 364:	80 e2       	ldi	r24, 0x20	; 32
 366:	89 27       	eor	r24, r25
 368:	8b b9       	out	0x0b, r24	; 11
 36a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <laststate+0x2>
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	91 11       	cpse	r25, r1
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <laststate+0x2>
 378:	89 17       	cp	r24, r25
 37a:	b1 f0       	breq	.+44     	; 0x3a8 <__vector_6+0x144>
 37c:	0e e1       	ldi	r16, 0x1E	; 30
 37e:	11 e0       	ldi	r17, 0x01	; 1
 380:	f8 01       	movw	r30, r16
 382:	82 83       	std	Z+2, r24	; 0x02
 384:	62 81       	ldd	r22, Z+2	; 0x02
 386:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <light3_address>
 38a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <light3_address+0x1>
 38e:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 392:	f8 01       	movw	r30, r16
 394:	82 81       	ldd	r24, Z+2	; 0x02
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	21 f4       	brne	.+8      	; 0x3a2 <__vector_6+0x13e>
 39a:	84 e5       	ldi	r24, 0x54	; 84
 39c:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <__vector_6+0x144>
 3a2:	85 e5       	ldi	r24, 0x55	; 85
 3a4:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 3a8:	c5 ff       	sbrs	r28, 5
 3aa:	65 c0       	rjmp	.+202    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3ac:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <laststate+0x3>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	91 11       	cpse	r25, r1
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <laststate+0x3>
 3ba:	89 17       	cp	r24, r25
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <__vector_6+0x15c>
 3be:	5b c0       	rjmp	.+182    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3c0:	ee e1       	ldi	r30, 0x1E	; 30
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	83 83       	std	Z+3, r24	; 0x03
 3c6:	83 81       	ldd	r24, Z+3	; 0x03
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	09 f0       	breq	.+2      	; 0x3ce <__vector_6+0x16a>
 3cc:	45 c0       	rjmp	.+138    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 3ce:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <fan_speed>
 3d2:	83 30       	cpi	r24, 0x03	; 3
 3d4:	e9 f0       	breq	.+58     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3d6:	28 f4       	brcc	.+10     	; 0x3e2 <__vector_6+0x17e>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	41 f0       	breq	.+16     	; 0x3ec <__vector_6+0x188>
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	79 f0       	breq	.+30     	; 0x3fe <__vector_6+0x19a>
 3e0:	32 c0       	rjmp	.+100    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	f1 f0       	breq	.+60     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3e6:	85 30       	cpi	r24, 0x05	; 5
 3e8:	29 f1       	breq	.+74     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3ea:	2d c0       	rjmp	.+90     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 3ec:	0e 94 c9 00 	call	0x192	; 0x192 <fanSpeed1>
 3f0:	81 e4       	ldi	r24, 0x41	; 65
 3f2:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 3fc:	34 c0       	rjmp	.+104    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 3fe:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fanSpeed2>
 402:	83 e4       	ldi	r24, 0x43	; 67
 404:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 40e:	2b c0       	rjmp	.+86     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 410:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
 414:	84 e4       	ldi	r24, 0x44	; 68
 416:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 420:	22 c0       	rjmp	.+68     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 422:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <fanSpeed4>
 426:	85 e4       	ldi	r24, 0x45	; 69
 428:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 432:	19 c0       	rjmp	.+50     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 434:	0e 94 fd 00 	call	0x1fa	; 0x1fa <fanSpeed5>
 438:	86 e4       	ldi	r24, 0x46	; 70
 43a:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 43e:	85 e0       	ldi	r24, 0x05	; 5
 440:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 444:	10 c0       	rjmp	.+32     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 446:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
 44a:	84 e4       	ldi	r24, 0x44	; 68
 44c:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 456:	07 c0       	rjmp	.+14     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 458:	0e 94 bc 00 	call	0x178	; 0x178 <fanSpeed0>
 45c:	82 e4       	ldi	r24, 0x42	; 66
 45e:	0e 94 a1 04 	call	0x942	; 0x942 <USART_Transmit>
 462:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <laststate+0x3>
 466:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <laststate+0x3>
 46a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 46e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 472:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	cf 91       	pop	r28
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <__vector_20>:
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	2f 93       	push	r18
 4aa:	3f 93       	push	r19
 4ac:	4f 93       	push	r20
 4ae:	5f 93       	push	r21
 4b0:	6f 93       	push	r22
 4b2:	7f 93       	push	r23
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	af 93       	push	r26
 4ba:	bf 93       	push	r27
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
 4c4:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4c8:	cc 34       	cpi	r28, 0x4C	; 76
 4ca:	e1 f4       	brne	.+56     	; 0x504 <__vector_20+0x66>
 4cc:	0e 94 b3 04 	call	0x966	; 0x966 <USART_Receive>
 4d0:	c8 2f       	mov	r28, r24
 4d2:	81 33       	cpi	r24, 0x31	; 49
 4d4:	39 f4       	brne	.+14     	; 0x4e4 <__vector_20+0x46>
 4d6:	8b b1       	in	r24, 0x0b	; 11
 4d8:	88 60       	ori	r24, 0x08	; 8
 4da:	8b b9       	out	0x0b, r24	; 11
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <laststate>
 4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <__vector_20+0x54>
 4e4:	80 33       	cpi	r24, 0x30	; 48
 4e6:	29 f4       	brne	.+10     	; 0x4f2 <__vector_20+0x54>
 4e8:	8b b1       	in	r24, 0x0b	; 11
 4ea:	87 7f       	andi	r24, 0xF7	; 247
 4ec:	8b b9       	out	0x0b, r24	; 11
 4ee:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <laststate>
 4f2:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <laststate>
 4f6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <light1_address>
 4fa:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <light1_address+0x1>
 4fe:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 502:	3b c0       	rjmp	.+118    	; 0x57a <__vector_20+0xdc>
 504:	cd 34       	cpi	r28, 0x4D	; 77
 506:	e1 f4       	brne	.+56     	; 0x540 <__vector_20+0xa2>
 508:	0e 94 b3 04 	call	0x966	; 0x966 <USART_Receive>
 50c:	c8 2f       	mov	r28, r24
 50e:	81 33       	cpi	r24, 0x31	; 49
 510:	39 f4       	brne	.+14     	; 0x520 <__vector_20+0x82>
 512:	8b b1       	in	r24, 0x0b	; 11
 514:	80 61       	ori	r24, 0x10	; 16
 516:	8b b9       	out	0x0b, r24	; 11
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x1>
 51e:	07 c0       	rjmp	.+14     	; 0x52e <__vector_20+0x90>
 520:	80 33       	cpi	r24, 0x30	; 48
 522:	29 f4       	brne	.+10     	; 0x52e <__vector_20+0x90>
 524:	8b b1       	in	r24, 0x0b	; 11
 526:	8f 7e       	andi	r24, 0xEF	; 239
 528:	8b b9       	out	0x0b, r24	; 11
 52a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <laststate+0x1>
 52e:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <laststate+0x1>
 532:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <light2_address>
 536:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <light2_address+0x1>
 53a:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 53e:	1d c0       	rjmp	.+58     	; 0x57a <__vector_20+0xdc>
 540:	ce 34       	cpi	r28, 0x4E	; 78
 542:	d9 f4       	brne	.+54     	; 0x57a <__vector_20+0xdc>
 544:	0e 94 b3 04 	call	0x966	; 0x966 <USART_Receive>
 548:	c8 2f       	mov	r28, r24
 54a:	81 33       	cpi	r24, 0x31	; 49
 54c:	39 f4       	brne	.+14     	; 0x55c <__vector_20+0xbe>
 54e:	8b b1       	in	r24, 0x0b	; 11
 550:	80 62       	ori	r24, 0x20	; 32
 552:	8b b9       	out	0x0b, r24	; 11
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <laststate+0x2>
 55a:	07 c0       	rjmp	.+14     	; 0x56a <__vector_20+0xcc>
 55c:	80 33       	cpi	r24, 0x30	; 48
 55e:	29 f4       	brne	.+10     	; 0x56a <__vector_20+0xcc>
 560:	8b b1       	in	r24, 0x0b	; 11
 562:	8f 7d       	andi	r24, 0xDF	; 223
 564:	8b b9       	out	0x0b, r24	; 11
 566:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <laststate+0x2>
 56a:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <laststate+0x2>
 56e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <light3_address>
 572:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <light3_address+0x1>
 576:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 57a:	c6 34       	cpi	r28, 0x46	; 70
 57c:	09 f0       	breq	.+2      	; 0x580 <__vector_20+0xe2>
 57e:	53 c0       	rjmp	.+166    	; 0x626 <__vector_20+0x188>
 580:	0e 94 b3 04 	call	0x966	; 0x966 <USART_Receive>
 584:	c8 2f       	mov	r28, r24
 586:	81 33       	cpi	r24, 0x31	; 49
 588:	09 f0       	breq	.+2      	; 0x58c <__vector_20+0xee>
 58a:	3f c0       	rjmp	.+126    	; 0x60a <__vector_20+0x16c>
 58c:	0e 94 c9 00 	call	0x192	; 0x192 <fanSpeed1>
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <fan_speed>
 596:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 59a:	0e 94 b3 04 	call	0x966	; 0x966 <USART_Receive>
 59e:	c8 2f       	mov	r28, r24
 5a0:	85 35       	cpi	r24, 0x55	; 85
 5a2:	51 f5       	brne	.+84     	; 0x5f8 <__vector_20+0x15a>
 5a4:	0e 94 b3 04 	call	0x966	; 0x966 <USART_Receive>
 5a8:	c8 2f       	mov	r28, r24
 5aa:	82 33       	cpi	r24, 0x32	; 50
 5ac:	41 f4       	brne	.+16     	; 0x5be <__vector_20+0x120>
 5ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fanSpeed2>
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <fan_speed>
 5b8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 5bc:	1d c0       	rjmp	.+58     	; 0x5f8 <__vector_20+0x15a>
 5be:	83 33       	cpi	r24, 0x33	; 51
 5c0:	41 f4       	brne	.+16     	; 0x5d2 <__vector_20+0x134>
 5c2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
 5c6:	83 e0       	ldi	r24, 0x03	; 3
 5c8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <fan_speed>
 5cc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <__vector_20+0x15a>
 5d2:	84 33       	cpi	r24, 0x34	; 52
 5d4:	41 f4       	brne	.+16     	; 0x5e6 <__vector_20+0x148>
 5d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <fanSpeed4>
 5da:	84 e0       	ldi	r24, 0x04	; 4
 5dc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <fan_speed>
 5e0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <__vector_20+0x15a>
 5e6:	85 33       	cpi	r24, 0x35	; 53
 5e8:	39 f4       	brne	.+14     	; 0x5f8 <__vector_20+0x15a>
 5ea:	0e 94 fd 00 	call	0x1fa	; 0x1fa <fanSpeed5>
 5ee:	85 e0       	ldi	r24, 0x05	; 5
 5f0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <fan_speed>
 5f4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 5f8:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <laststate+0x3>
 5fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 600:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 604:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 608:	0e c0       	rjmp	.+28     	; 0x626 <__vector_20+0x188>
 60a:	80 33       	cpi	r24, 0x30	; 48
 60c:	61 f4       	brne	.+24     	; 0x626 <__vector_20+0x188>
 60e:	0e 94 bc 00 	call	0x178	; 0x178 <fanSpeed0>
 612:	ee e1       	ldi	r30, 0x1E	; 30
 614:	f1 e0       	ldi	r31, 0x01	; 1
 616:	13 82       	std	Z+3, r1	; 0x03
 618:	63 81       	ldd	r22, Z+3	; 0x03
 61a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 61e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 622:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 626:	ca 35       	cpi	r28, 0x5A	; 90
 628:	09 f0       	breq	.+2      	; 0x62c <__vector_20+0x18e>
 62a:	4b c0       	rjmp	.+150    	; 0x6c2 <__vector_20+0x224>
 62c:	0e 94 b3 04 	call	0x966	; 0x966 <USART_Receive>
 630:	81 33       	cpi	r24, 0x31	; 49
 632:	b1 f4       	brne	.+44     	; 0x660 <__vector_20+0x1c2>
 634:	8b b1       	in	r24, 0x0b	; 11
 636:	80 62       	ori	r24, 0x20	; 32
 638:	8b b9       	out	0x0b, r24	; 11
 63a:	8b b1       	in	r24, 0x0b	; 11
 63c:	80 61       	ori	r24, 0x10	; 16
 63e:	8b b9       	out	0x0b, r24	; 11
 640:	8b b1       	in	r24, 0x0b	; 11
 642:	88 60       	ori	r24, 0x08	; 8
 644:	8b b9       	out	0x0b, r24	; 11
 646:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
 64a:	ee e1       	ldi	r30, 0x1E	; 30
 64c:	f1 e0       	ldi	r31, 0x01	; 1
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	80 83       	st	Z, r24
 652:	81 83       	std	Z+1, r24	; 0x01
 654:	82 83       	std	Z+2, r24	; 0x02
 656:	83 e0       	ldi	r24, 0x03	; 3
 658:	83 83       	std	Z+3, r24	; 0x03
 65a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <fan_speed>
 65e:	13 c0       	rjmp	.+38     	; 0x686 <__vector_20+0x1e8>
 660:	80 33       	cpi	r24, 0x30	; 48
 662:	89 f4       	brne	.+34     	; 0x686 <__vector_20+0x1e8>
 664:	8b b1       	in	r24, 0x0b	; 11
 666:	8f 7d       	andi	r24, 0xDF	; 223
 668:	8b b9       	out	0x0b, r24	; 11
 66a:	8b b1       	in	r24, 0x0b	; 11
 66c:	8f 7e       	andi	r24, 0xEF	; 239
 66e:	8b b9       	out	0x0b, r24	; 11
 670:	8b b1       	in	r24, 0x0b	; 11
 672:	87 7f       	andi	r24, 0xF7	; 247
 674:	8b b9       	out	0x0b, r24	; 11
 676:	0e 94 bc 00 	call	0x178	; 0x178 <fanSpeed0>
 67a:	ee e1       	ldi	r30, 0x1E	; 30
 67c:	f1 e0       	ldi	r31, 0x01	; 1
 67e:	10 82       	st	Z, r1
 680:	11 82       	std	Z+1, r1	; 0x01
 682:	12 82       	std	Z+2, r1	; 0x02
 684:	13 82       	std	Z+3, r1	; 0x03
 686:	ce e1       	ldi	r28, 0x1E	; 30
 688:	d1 e0       	ldi	r29, 0x01	; 1
 68a:	68 81       	ld	r22, Y
 68c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <light1_address>
 690:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <light1_address+0x1>
 694:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 698:	69 81       	ldd	r22, Y+1	; 0x01
 69a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <light2_address>
 69e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <light2_address+0x1>
 6a2:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 6a6:	6a 81       	ldd	r22, Y+2	; 0x02
 6a8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <light3_address>
 6ac:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <light3_address+0x1>
 6b0:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 6b4:	6b 81       	ldd	r22, Y+3	; 0x03
 6b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 6ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 6be:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <setup>:
 6e8:	8a b1       	in	r24, 0x0a	; 10
 6ea:	88 6f       	ori	r24, 0xF8	; 248
 6ec:	8a b9       	out	0x0a, r24	; 10
 6ee:	8d b1       	in	r24, 0x0d	; 13
 6f0:	8c 60       	ori	r24, 0x0C	; 12
 6f2:	8d b9       	out	0x0d, r24	; 13
 6f4:	87 b1       	in	r24, 0x07	; 7
 6f6:	83 7c       	andi	r24, 0xC3	; 195
 6f8:	87 b9       	out	0x07, r24	; 7
 6fa:	88 b1       	in	r24, 0x08	; 8
 6fc:	8c 63       	ori	r24, 0x3C	; 60
 6fe:	88 b9       	out	0x08, r24	; 8
 700:	86 b1       	in	r24, 0x06	; 6
 702:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pin_state>
 706:	08 95       	ret

00000708 <__vector_13>:
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	8f 93       	push	r24
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <timer_flag>
 71a:	8f 91       	pop	r24
 71c:	0f 90       	pop	r0
 71e:	0f be       	out	0x3f, r0	; 63
 720:	0f 90       	pop	r0
 722:	1f 90       	pop	r1
 724:	18 95       	reti

00000726 <custom_delay_ms>:
 726:	ac 01       	movw	r20, r24
 728:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <timer_flag>
 72c:	99 23       	and	r25, r25
 72e:	99 f0       	breq	.+38     	; 0x756 <custom_delay_ms+0x30>
 730:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <timer_flag>
 734:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 738:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 73c:	2f 5f       	subi	r18, 0xFF	; 255
 73e:	3f 4f       	sbci	r19, 0xFF	; 255
 740:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__data_end+0x1>
 744:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__data_end>
 748:	24 17       	cp	r18, r20
 74a:	35 07       	cpc	r19, r21
 74c:	20 f0       	brcs	.+8      	; 0x756 <custom_delay_ms+0x30>
 74e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 752:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 756:	08 95       	ret

00000758 <readLastStatesFromEEPROM>:
 758:	ef 92       	push	r14
 75a:	ff 92       	push	r15
 75c:	1f 93       	push	r17
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
 766:	28 97       	sbiw	r28, 0x08	; 8
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	f8 94       	cli
 76c:	de bf       	out	0x3e, r29	; 62
 76e:	0f be       	out	0x3f, r0	; 63
 770:	cd bf       	out	0x3d, r28	; 61
 772:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <light1_address>
 776:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <light1_address+0x1>
 77a:	9a 83       	std	Y+2, r25	; 0x02
 77c:	89 83       	std	Y+1, r24	; 0x01
 77e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <light2_address>
 782:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <light2_address+0x1>
 786:	9c 83       	std	Y+4, r25	; 0x04
 788:	8b 83       	std	Y+3, r24	; 0x03
 78a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <light3_address>
 78e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <light3_address+0x1>
 792:	9e 83       	std	Y+6, r25	; 0x06
 794:	8d 83       	std	Y+5, r24	; 0x05
 796:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 79a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 79e:	98 87       	std	Y+8, r25	; 0x08
 7a0:	8f 83       	std	Y+7, r24	; 0x07
 7a2:	10 e0       	ldi	r17, 0x00	; 0
 7a4:	15 c0       	rjmp	.+42     	; 0x7d0 <readLastStatesFromEEPROM+0x78>
 7a6:	81 2f       	mov	r24, r17
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	9c 01       	movw	r18, r24
 7ac:	22 5e       	subi	r18, 0xE2	; 226
 7ae:	3e 4f       	sbci	r19, 0xFE	; 254
 7b0:	79 01       	movw	r14, r18
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	e1 e0       	ldi	r30, 0x01	; 1
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	ec 0f       	add	r30, r28
 7bc:	fd 1f       	adc	r31, r29
 7be:	e8 0f       	add	r30, r24
 7c0:	f9 1f       	adc	r31, r25
 7c2:	80 81       	ld	r24, Z
 7c4:	91 81       	ldd	r25, Z+1	; 0x01
 7c6:	0e 94 9f 00 	call	0x13e	; 0x13e <eeprom_read>
 7ca:	f7 01       	movw	r30, r14
 7cc:	80 83       	st	Z, r24
 7ce:	1f 5f       	subi	r17, 0xFF	; 255
 7d0:	14 30       	cpi	r17, 0x04	; 4
 7d2:	48 f3       	brcs	.-46     	; 0x7a6 <readLastStatesFromEEPROM+0x4e>
 7d4:	28 96       	adiw	r28, 0x08	; 8
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	cd bf       	out	0x3d, r28	; 61
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	ff 90       	pop	r15
 7e8:	ef 90       	pop	r14
 7ea:	08 95       	ret

000007ec <retain_Lights_State_From_EEPROM>:

void retain_Lights_State_From_EEPROM(void){
 7ec:	cf 93       	push	r28
 7ee:	df 93       	push	r29
 7f0:	cd b7       	in	r28, 0x3d	; 61
 7f2:	de b7       	in	r29, 0x3e	; 62
 7f4:	2f 97       	sbiw	r28, 0x0f	; 15
 7f6:	0f b6       	in	r0, 0x3f	; 63
 7f8:	f8 94       	cli
 7fa:	de bf       	out	0x3e, r29	; 62
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	cd bf       	out	0x3d, r28	; 61
	pin_map_t lightMapping[3][1] = {
 800:	89 e0       	ldi	r24, 0x09	; 9
 802:	e8 e0       	ldi	r30, 0x08	; 8
 804:	f1 e0       	ldi	r31, 0x01	; 1
 806:	de 01       	movw	r26, r28
 808:	11 96       	adiw	r26, 0x01	; 1
 80a:	01 90       	ld	r0, Z+
 80c:	0d 92       	st	X+, r0
 80e:	8a 95       	dec	r24
 810:	e1 f7       	brne	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		{{&PORTD, PD3}},  // switch1state
		{{&PORTD, PD4}},  // switch2state
		{{&PORTD, PD5}},  // switch3state
	};

	uint8_t *switchStates[3] = { &laststate.switch1Status, &laststate.switch2Status, &laststate.switch3status};
 812:	86 e0       	ldi	r24, 0x06	; 6
 814:	e1 e1       	ldi	r30, 0x11	; 17
 816:	f1 e0       	ldi	r31, 0x01	; 1
 818:	de 01       	movw	r26, r28
 81a:	1a 96       	adiw	r26, 0x0a	; 10
 81c:	01 90       	ld	r0, Z+
 81e:	0d 92       	st	X+, r0
 820:	8a 95       	dec	r24
 822:	e1 f7       	brne	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>

	for(uint8_t i = 0; i < 3; i++) {
 824:	20 e0       	ldi	r18, 0x00	; 0
 826:	27 c0       	rjmp	.+78     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
		if(*switchStates[i]) {
 828:	82 2f       	mov	r24, r18
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	fc 01       	movw	r30, r24
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	50 e0       	ldi	r21, 0x00	; 0
 836:	4c 0f       	add	r20, r28
 838:	5d 1f       	adc	r21, r29
 83a:	e4 0f       	add	r30, r20
 83c:	f5 1f       	adc	r31, r21
 83e:	01 84       	ldd	r0, Z+9	; 0x09
 840:	f2 85       	ldd	r31, Z+10	; 0x0a
 842:	e0 2d       	mov	r30, r0
 844:	30 81       	ld	r19, Z
 846:	33 23       	and	r19, r19
 848:	a9 f0       	breq	.+42     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
 84a:	fc 01       	movw	r30, r24
 84c:	ee 0f       	add	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	8e 0f       	add	r24, r30
 852:	9f 1f       	adc	r25, r31
 854:	fa 01       	movw	r30, r20
 856:	e8 0f       	add	r30, r24
 858:	f9 1f       	adc	r31, r25
 85a:	a0 81       	ld	r26, Z
 85c:	b1 81       	ldd	r27, Z+1	; 0x01
 85e:	3c 91       	ld	r19, X
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	02 80       	ldd	r0, Z+2	; 0x02
 866:	02 c0       	rjmp	.+4      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	0a 94       	dec	r0
 86e:	e2 f7       	brpl	.-8      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 870:	83 27       	eor	r24, r19
 872:	8c 93       	st	X, r24
		{{&PORTD, PD5}},  // switch3state
	};

	uint8_t *switchStates[3] = { &laststate.switch1Status, &laststate.switch2Status, &laststate.switch3status};

	for(uint8_t i = 0; i < 3; i++) {
 874:	2f 5f       	subi	r18, 0xFF	; 255
 876:	23 30       	cpi	r18, 0x03	; 3
 878:	b8 f2       	brcs	.-82     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
		if(*switchStates[i]) {
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
		}
	}
}
 87a:	2f 96       	adiw	r28, 0x0f	; 15
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	f8 94       	cli
 880:	de bf       	out	0x3e, r29	; 62
 882:	0f be       	out	0x3f, r0	; 63
 884:	cd bf       	out	0x3d, r28	; 61
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	08 95       	ret

0000088c <retain_Fan_State_From_EEPROM>:

void retain_Fan_State_From_EEPROM(void){
	if(laststate.fanSwitchStatus == 0){
 88c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <laststate+0x3>
 890:	81 11       	cpse	r24, r1
 892:	05 c0       	rjmp	.+10     	; 0x89e <retain_Fan_State_From_EEPROM+0x12>
		fanSpeed0();
 894:	0e 94 bc 00 	call	0x178	; 0x178 <fanSpeed0>
		laststate.fanSwitchStatus = 0;
 898:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <laststate+0x3>
 89c:	08 95       	ret
	}
	else if(laststate.fanSwitchStatus == 1){
 89e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <laststate+0x3>
 8a2:	81 30       	cpi	r24, 0x01	; 1
 8a4:	31 f4       	brne	.+12     	; 0x8b2 <retain_Fan_State_From_EEPROM+0x26>
		fanSpeed1();
 8a6:	0e 94 c9 00 	call	0x192	; 0x192 <fanSpeed1>
		laststate.fanSwitchStatus = 1;
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 8b0:	08 95       	ret
	}
	else if(laststate.fanSwitchStatus == 2){
 8b2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <laststate+0x3>
 8b6:	82 30       	cpi	r24, 0x02	; 2
 8b8:	31 f4       	brne	.+12     	; 0x8c6 <retain_Fan_State_From_EEPROM+0x3a>
		fanSpeed2();
 8ba:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fanSpeed2>
		laststate.fanSwitchStatus = 2;
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 8c4:	08 95       	ret
	}
	else if(laststate.fanSwitchStatus == 3){
 8c6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <laststate+0x3>
 8ca:	83 30       	cpi	r24, 0x03	; 3
 8cc:	31 f4       	brne	.+12     	; 0x8da <retain_Fan_State_From_EEPROM+0x4e>
		fanSpeed3();
 8ce:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
		laststate.fanSwitchStatus = 3;
 8d2:	83 e0       	ldi	r24, 0x03	; 3
 8d4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 8d8:	08 95       	ret
	}
	else if(laststate.fanSwitchStatus == 4){
 8da:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <laststate+0x3>
 8de:	84 30       	cpi	r24, 0x04	; 4
 8e0:	31 f4       	brne	.+12     	; 0x8ee <retain_Fan_State_From_EEPROM+0x62>
		fanSpeed4();
 8e2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <fanSpeed4>
		laststate.fanSwitchStatus = 4;
 8e6:	84 e0       	ldi	r24, 0x04	; 4
 8e8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 8ec:	08 95       	ret
	}
	else if(laststate.fanSwitchStatus == 5){
 8ee:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <laststate+0x3>
 8f2:	85 30       	cpi	r24, 0x05	; 5
 8f4:	29 f4       	brne	.+10     	; 0x900 <__stack+0x1>
		fanSpeed5();
 8f6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <fanSpeed5>
		laststate.fanSwitchStatus = 5;
 8fa:	85 e0       	ldi	r24, 0x05	; 5
 8fc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <laststate+0x3>
 900:	08 95       	ret

00000902 <main>:
uint16_t light2_address = 0x0001;
uint16_t light3_address = 0x0002;
uint16_t fan1_address   = 0x0003;

int main(void) {
	setup();  
 902:	0e 94 74 03 	call	0x6e8	; 0x6e8 <setup>
	EXTERNAL_IRQ_0_init();
 906:	0e 94 2a 01 	call	0x254	; 0x254 <EXTERNAL_IRQ_0_init>
	USART_Init(MYUBRR);
 90a:	83 e3       	ldi	r24, 0x33	; 51
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 a8 04 	call	0x950	; 0x950 <USART_Init>
	sei();   
 912:	78 94       	sei
	custom_delay_ms(100);
 914:	84 e6       	ldi	r24, 0x64	; 100
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 93 03 	call	0x726	; 0x726 <custom_delay_ms>
	readLastStatesFromEEPROM();
 91c:	0e 94 ac 03 	call	0x758	; 0x758 <readLastStatesFromEEPROM>
	custom_delay_ms(100);
 920:	84 e6       	ldi	r24, 0x64	; 100
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 93 03 	call	0x726	; 0x726 <custom_delay_ms>
	retain_Lights_State_From_EEPROM();
 928:	0e 94 f6 03 	call	0x7ec	; 0x7ec <retain_Lights_State_From_EEPROM>
	custom_delay_ms(100);
 92c:	84 e6       	ldi	r24, 0x64	; 100
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 93 03 	call	0x726	; 0x726 <custom_delay_ms>
	retain_Fan_State_From_EEPROM();
 934:	0e 94 46 04 	call	0x88c	; 0x88c <retain_Fan_State_From_EEPROM>
	custom_delay_ms(100);
 938:	84 e6       	ldi	r24, 0x64	; 100
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 93 03 	call	0x726	; 0x726 <custom_delay_ms>
 940:	ff cf       	rjmp	.-2      	; 0x940 <main+0x3e>

00000942 <USART_Transmit>:
#include "uart.h"
#include "main.h"

void USART_Transmit( unsigned char data )
{
	while ( !( UCSR0A & (1<<UDRE)) );
 942:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 946:	95 ff       	sbrs	r25, 5
 948:	fc cf       	rjmp	.-8      	; 0x942 <USART_Transmit>
	UDR0 = data;
 94a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 94e:	08 95       	ret

00000950 <USART_Init>:
}

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 950:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 954:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);  // Enable receiver and transmitter
 958:	88 e9       	ldi	r24, 0x98	; 152
 95a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0); // 8-bit data, 1 stop bit
 95e:	86 e0       	ldi	r24, 0x06	; 6
 960:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 964:	08 95       	ret

00000966 <USART_Receive>:
}


unsigned char USART_Receive( void )
{
	while ( !(UCSR0A & (1<<RXC)) );
 966:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 96a:	88 23       	and	r24, r24
 96c:	e4 f7       	brge	.-8      	; 0x966 <USART_Receive>
	return UDR0;
 96e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 972:	08 95       	ret

00000974 <_exit>:
 974:	f8 94       	cli

00000976 <__stop_program>:
 976:	ff cf       	rjmp	.-2      	; 0x976 <__stop_program>
