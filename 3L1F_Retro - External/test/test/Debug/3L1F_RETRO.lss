
3L1F_RETRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000009b6  00000a4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800118  00800118  00000a62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ed  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e68  00000000  00000000  00002549  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2f  00000000  00000000  000033b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  000041e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000852  00000000  00000000  00004554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089d  00000000  00000000  00004da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_6>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_20>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e6 eb       	ldi	r30, 0xB6	; 182
  e0:	f9 e0       	ldi	r31, 0x09	; 9
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 31       	cpi	r26, 0x18	; 24
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a8 e1       	ldi	r26, 0x18	; 24
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a1 32       	cpi	r26, 0x21	; 33
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 73 03 	call	0x6e6	; 0x6e6 <main>
 102:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <eeprom_write>:

#include "eeprom.h"
#include "main.h"
#include "i2c.h"

void eeprom_write(uint16_t address, uint8_t data) {
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	d8 2f       	mov	r29, r24
 112:	19 2f       	mov	r17, r25
 114:	c6 2f       	mov	r28, r22
	i2c_start();
 116:	0e 94 13 01 	call	0x226	; 0x226 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
 11a:	80 ea       	ldi	r24, 0xA0	; 160
 11c:	0e 94 1f 01 	call	0x23e	; 0x23e <i2c_write>
	i2c_write((address >> 8) & 0xFF);
 120:	81 2f       	mov	r24, r17
 122:	0e 94 1f 01 	call	0x23e	; 0x23e <i2c_write>
	i2c_write(address & 0xFF);
 126:	8d 2f       	mov	r24, r29
 128:	0e 94 1f 01 	call	0x23e	; 0x23e <i2c_write>
	i2c_write(data);
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 1f 01 	call	0x23e	; 0x23e <i2c_write>
	i2c_stop();
 132:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_stop>
	//USART_Transmit('W');
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	08 95       	ret

0000013e <eeprom_read>:

uint8_t eeprom_read(uint16_t address) {
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	c8 2f       	mov	r28, r24
 144:	d9 2f       	mov	r29, r25
	uint8_t data;
	i2c_start();
 146:	0e 94 13 01 	call	0x226	; 0x226 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
 14a:	80 ea       	ldi	r24, 0xA0	; 160
 14c:	0e 94 1f 01 	call	0x23e	; 0x23e <i2c_write>
	i2c_write((address >> 8) & 0xFF);
 150:	8d 2f       	mov	r24, r29
 152:	0e 94 1f 01 	call	0x23e	; 0x23e <i2c_write>
	i2c_write(address & 0xFF);
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 1f 01 	call	0x23e	; 0x23e <i2c_write>
	i2c_start();
 15c:	0e 94 13 01 	call	0x226	; 0x226 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 1);
 160:	81 ea       	ldi	r24, 0xA1	; 161
 162:	0e 94 1f 01 	call	0x23e	; 0x23e <i2c_write>
	data = i2c_read_nack();
 166:	0e 94 29 01 	call	0x252	; 0x252 <i2c_read_nack>
 16a:	c8 2f       	mov	r28, r24
	i2c_stop();
 16c:	0e 94 1b 01 	call	0x236	; 0x236 <i2c_stop>
	return data;
	//USART_Transmit('R');
 170:	8c 2f       	mov	r24, r28
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <fanSpeed0>:

#include "main.h"
#include "fanSpeed.h"

void fanSpeed0(){
	PORTE &= ~(1 << PE3);
 178:	8e b1       	in	r24, 0x0e	; 14
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	8e b9       	out	0x0e, r24	; 14
	PORTE &= ~(1 << PE2);
 17e:	8e b1       	in	r24, 0x0e	; 14
 180:	8b 7f       	andi	r24, 0xFB	; 251
 182:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1 << PD7);
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 77       	andi	r24, 0x7F	; 127
 188:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7b       	andi	r24, 0xBF	; 191
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	08 95       	ret

00000192 <fanSpeed1>:
}

void fanSpeed1(){
	PORTE &= ~(1 << PE3);
 192:	8e b1       	in	r24, 0x0e	; 14
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	8e b9       	out	0x0e, r24	; 14
	PORTE |= (1 << PE2);
 198:	8e b1       	in	r24, 0x0e	; 14
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1 << PD7);
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8f 77       	andi	r24, 0x7F	; 127
 1a2:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8f 7b       	andi	r24, 0xBF	; 191
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	08 95       	ret

000001ac <fanSpeed2>:
}

void fanSpeed2(){
	PORTE |= (1 << PE3);
 1ac:	8e b1       	in	r24, 0x0e	; 14
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	8e b9       	out	0x0e, r24	; 14
	PORTE &= ~(1 << PE2);
 1b2:	8e b1       	in	r24, 0x0e	; 14
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	8e b9       	out	0x0e, r24	; 14
	PORTD |= (1 << PD7);
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	8f 7b       	andi	r24, 0xBF	; 191
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	08 95       	ret

000001c6 <fanSpeed3>:
}

void fanSpeed3(){
	PORTE |= (1 << PE3);
 1c6:	8e b1       	in	r24, 0x0e	; 14
 1c8:	88 60       	ori	r24, 0x08	; 8
 1ca:	8e b9       	out	0x0e, r24	; 14
	PORTE |= (1 << PE2);
 1cc:	8e b1       	in	r24, 0x0e	; 14
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1 << PD7);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 77       	andi	r24, 0x7F	; 127
 1d6:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 7b       	andi	r24, 0xBF	; 191
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	08 95       	ret

000001e0 <fanSpeed4>:
}

void fanSpeed4(){
	PORTE &= ~(1 << PE3);
 1e0:	8e b1       	in	r24, 0x0e	; 14
 1e2:	87 7f       	andi	r24, 0xF7	; 247
 1e4:	8e b9       	out	0x0e, r24	; 14
	PORTE |= (1 << PE2);
 1e6:	8e b1       	in	r24, 0x0e	; 14
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	8e b9       	out	0x0e, r24	; 14
	PORTD |= (1 << PD7);
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PD6);
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	8f 7b       	andi	r24, 0xBF	; 191
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	08 95       	ret

000001fa <fanSpeed5>:
}

void fanSpeed5(){
	PORTE &= ~(1 << PE3);
 1fa:	8e b1       	in	r24, 0x0e	; 14
 1fc:	87 7f       	andi	r24, 0xF7	; 247
 1fe:	8e b9       	out	0x0e, r24	; 14
	PORTE &= ~(1 << PE2);
 200:	8e b1       	in	r24, 0x0e	; 14
 202:	8b 7f       	andi	r24, 0xFB	; 251
 204:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1 << PD7);
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8f 77       	andi	r24, 0x7F	; 127
 20a:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD6);
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	80 64       	ori	r24, 0x40	; 64
 210:	8b b9       	out	0x0b, r24	; 11
 212:	08 95       	ret

00000214 <i2c_init>:

uint8_t i2c_read_ack(void) {
	TWCR0 = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
	while (!(TWCR0 & (1<<TWINT)));
	return TWDR0;
}
 214:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 218:	88 e4       	ldi	r24, 0x48	; 72
 21a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 224:	08 95       	ret

00000226 <i2c_start>:
 226:	84 ea       	ldi	r24, 0xA4	; 164
 228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 230:	88 23       	and	r24, r24
 232:	e4 f7       	brge	.-8      	; 0x22c <i2c_start+0x6>
 234:	08 95       	ret

00000236 <i2c_stop>:
 236:	84 e9       	ldi	r24, 0x94	; 148
 238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23c:	08 95       	ret

0000023e <i2c_write>:
 23e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 242:	84 e8       	ldi	r24, 0x84	; 132
 244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 248:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24c:	88 23       	and	r24, r24
 24e:	e4 f7       	brge	.-8      	; 0x248 <i2c_write+0xa>
 250:	08 95       	ret

00000252 <i2c_read_nack>:

uint8_t i2c_read_nack(void) {
	TWCR0 = (1<<TWEN) | (1<<TWINT);
 252:	84 e8       	ldi	r24, 0x84	; 132
 254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1<<TWINT)));
 258:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25c:	88 23       	and	r24, r24
 25e:	e4 f7       	brge	.-8      	; 0x258 <i2c_read_nack+0x6>
	return TWDR0;
 260:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 264:	08 95       	ret

00000266 <EXTERNAL_IRQ_0_init>:
	static uint16_t counter = 0;
	if (timer_flag) {
		timer_flag = 0;
		counter++;
		if (counter >= ms) {
			counter = 0;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
 26c:	8c e3       	ldi	r24, 0x3C	; 60
 26e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret

00000276 <__vector_6>:
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
 29c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <startup_Flag>
 2a0:	88 23       	and	r24, r24
 2a2:	61 f0       	breq	.+24     	; 0x2bc <__vector_6+0x46>
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	81 ee       	ldi	r24, 0xE1	; 225
 2a8:	94 e0       	ldi	r25, 0x04	; 4
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <__vector_6+0x34>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <__vector_6+0x3e>
 2b4:	00 00       	nop
 2b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <startup_Flag>
 2ba:	e9 c0       	rjmp	.+466    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	80 e7       	ldi	r24, 0x70	; 112
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <__vector_6+0x4c>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <__vector_6+0x56>
 2cc:	00 00       	nop
 2ce:	96 b1       	in	r25, 0x06	; 6
 2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d4:	89 27       	eor	r24, r25
 2d6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
 2da:	82 ff       	sbrs	r24, 2
 2dc:	21 c0       	rjmp	.+66     	; 0x320 <__vector_6+0xaa>
 2de:	9b b1       	in	r25, 0x0b	; 11
 2e0:	88 e0       	ldi	r24, 0x08	; 8
 2e2:	89 27       	eor	r24, r25
 2e4:	8b b9       	out	0x0b, r24	; 11
 2e6:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <laststate>
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	91 11       	cpse	r25, r1
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <laststate>
 2f4:	89 17       	cp	r24, r25
 2f6:	09 f4       	brne	.+2      	; 0x2fa <__vector_6+0x84>
 2f8:	ca c0       	rjmp	.+404    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 2fa:	cc e1       	ldi	r28, 0x1C	; 28
 2fc:	d1 e0       	ldi	r29, 0x01	; 1
 2fe:	88 83       	st	Y, r24
 300:	68 81       	ld	r22, Y
 302:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 306:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 30a:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 30e:	88 81       	ld	r24, Y
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	11 f4       	brne	.+4      	; 0x318 <__vector_6+0xa2>
 314:	80 e5       	ldi	r24, 0x50	; 80
 316:	01 c0       	rjmp	.+2      	; 0x31a <__vector_6+0xa4>
 318:	81 e5       	ldi	r24, 0x51	; 81
 31a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 31e:	b7 c0       	rjmp	.+366    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 320:	83 ff       	sbrs	r24, 3
 322:	21 c0       	rjmp	.+66     	; 0x366 <__vector_6+0xf0>
 324:	9b b1       	in	r25, 0x0b	; 11
 326:	80 e1       	ldi	r24, 0x10	; 16
 328:	89 27       	eor	r24, r25
 32a:	8b b9       	out	0x0b, r24	; 11
 32c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <laststate+0x1>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	91 11       	cpse	r25, r1
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <laststate+0x1>
 33a:	89 17       	cp	r24, r25
 33c:	09 f4       	brne	.+2      	; 0x340 <__vector_6+0xca>
 33e:	a7 c0       	rjmp	.+334    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 340:	cc e1       	ldi	r28, 0x1C	; 28
 342:	d1 e0       	ldi	r29, 0x01	; 1
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	69 81       	ldd	r22, Y+1	; 0x01
 348:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <light2_address>
 34c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <light2_address+0x1>
 350:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	11 f4       	brne	.+4      	; 0x35e <__vector_6+0xe8>
 35a:	82 e5       	ldi	r24, 0x52	; 82
 35c:	01 c0       	rjmp	.+2      	; 0x360 <__vector_6+0xea>
 35e:	83 e5       	ldi	r24, 0x53	; 83
 360:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 364:	94 c0       	rjmp	.+296    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 366:	84 ff       	sbrs	r24, 4
 368:	21 c0       	rjmp	.+66     	; 0x3ac <__vector_6+0x136>
 36a:	9b b1       	in	r25, 0x0b	; 11
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	89 27       	eor	r24, r25
 370:	8b b9       	out	0x0b, r24	; 11
 372:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <laststate+0x2>
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	91 11       	cpse	r25, r1
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <laststate+0x2>
 380:	89 17       	cp	r24, r25
 382:	09 f4       	brne	.+2      	; 0x386 <__vector_6+0x110>
 384:	84 c0       	rjmp	.+264    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 386:	cc e1       	ldi	r28, 0x1C	; 28
 388:	d1 e0       	ldi	r29, 0x01	; 1
 38a:	8a 83       	std	Y+2, r24	; 0x02
 38c:	6a 81       	ldd	r22, Y+2	; 0x02
 38e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <light3_address>
 392:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <light3_address+0x1>
 396:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	11 f4       	brne	.+4      	; 0x3a4 <__vector_6+0x12e>
 3a0:	84 e5       	ldi	r24, 0x54	; 84
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <__vector_6+0x130>
 3a4:	85 e5       	ldi	r24, 0x55	; 85
 3a6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 3aa:	71 c0       	rjmp	.+226    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 3ac:	85 ff       	sbrs	r24, 5
 3ae:	6f c0       	rjmp	.+222    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 3b0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <laststate+0x3>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	91 11       	cpse	r25, r1
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <laststate+0x3>
 3be:	89 17       	cp	r24, r25
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <__vector_6+0x14e>
 3c2:	65 c0       	rjmp	.+202    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 3c4:	ec e1       	ldi	r30, 0x1C	; 28
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	83 83       	std	Z+3, r24	; 0x03
 3ca:	83 81       	ldd	r24, Z+3	; 0x03
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <__vector_6+0x15c>
 3d0:	4f c0       	rjmp	.+158    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 3d2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <fan_speed>
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	09 f1       	breq	.+66     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3da:	28 f4       	brcc	.+10     	; 0x3e6 <__vector_6+0x170>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	41 f0       	breq	.+16     	; 0x3f0 <__vector_6+0x17a>
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	89 f0       	breq	.+34     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3e4:	3c c0       	rjmp	.+120    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 3e6:	84 30       	cpi	r24, 0x04	; 4
 3e8:	21 f1       	breq	.+72     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3ea:	85 30       	cpi	r24, 0x05	; 5
 3ec:	69 f1       	breq	.+90     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3ee:	37 c0       	rjmp	.+110    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 3f0:	0e 94 c9 00 	call	0x192	; 0x192 <fanSpeed1>
 3f4:	81 e4       	ldi	r24, 0x41	; 65
 3f6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 400:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 404:	3c c0       	rjmp	.+120    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 406:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fanSpeed2>
 40a:	83 e4       	ldi	r24, 0x43	; 67
 40c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 416:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 41a:	31 c0       	rjmp	.+98     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 41c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
 420:	84 e4       	ldi	r24, 0x44	; 68
 422:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 42c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 430:	26 c0       	rjmp	.+76     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 432:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <fanSpeed4>
 436:	85 e4       	ldi	r24, 0x45	; 69
 438:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 43c:	84 e0       	ldi	r24, 0x04	; 4
 43e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 442:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 446:	1b c0       	rjmp	.+54     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 448:	0e 94 fd 00 	call	0x1fa	; 0x1fa <fanSpeed5>
 44c:	86 e4       	ldi	r24, 0x46	; 70
 44e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 458:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 45c:	10 c0       	rjmp	.+32     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 45e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
 462:	84 e4       	ldi	r24, 0x44	; 68
 464:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 46e:	07 c0       	rjmp	.+14     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 470:	0e 94 bc 00 	call	0x178	; 0x178 <fanSpeed0>
 474:	82 e4       	ldi	r24, 0x42	; 66
 476:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <USART_Transmit>
 47a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <laststate+0x3>
 47e:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <laststate+0x3>
 482:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 486:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 48a:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__vector_20>:
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	4f 93       	push	r20
 4c4:	5f 93       	push	r21
 4c6:	6f 93       	push	r22
 4c8:	7f 93       	push	r23
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31
 4d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4da:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UARTdataProcess>
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <setup>:
 500:	8a b1       	in	r24, 0x0a	; 10
 502:	88 6f       	ori	r24, 0xF8	; 248
 504:	8a b9       	out	0x0a, r24	; 10
 506:	8d b1       	in	r24, 0x0d	; 13
 508:	8c 60       	ori	r24, 0x0C	; 12
 50a:	8d b9       	out	0x0d, r24	; 13
 50c:	87 b1       	in	r24, 0x07	; 7
 50e:	83 7c       	andi	r24, 0xC3	; 195
 510:	87 b9       	out	0x07, r24	; 7
 512:	88 b1       	in	r24, 0x08	; 8
 514:	8c 63       	ori	r24, 0x3C	; 60
 516:	88 b9       	out	0x08, r24	; 8
 518:	86 b1       	in	r24, 0x06	; 6
 51a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pin_state>
 51e:	08 95       	ret

00000520 <__vector_13>:
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	8f 93       	push	r24
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <timer_flag>
 532:	8f 91       	pop	r24
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <readLastStatesFromEEPROM>:
		}
	}
}

void readLastStatesFromEEPROM(void) {
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	28 97       	sbiw	r28, 0x08	; 8
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	f8 94       	cli
 552:	de bf       	out	0x3e, r29	; 62
 554:	0f be       	out	0x3f, r0	; 63
 556:	cd bf       	out	0x3d, r28	; 61
	uint16_t addresses[] = {light1_address, light2_address, light3_address, fan1_address};
 558:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 55c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 560:	9a 83       	std	Y+2, r25	; 0x02
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <light2_address>
 568:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <light2_address+0x1>
 56c:	9c 83       	std	Y+4, r25	; 0x04
 56e:	8b 83       	std	Y+3, r24	; 0x03
 570:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <light3_address>
 574:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <light3_address+0x1>
 578:	9e 83       	std	Y+6, r25	; 0x06
 57a:	8d 83       	std	Y+5, r24	; 0x05
 57c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 580:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 584:	98 87       	std	Y+8, r25	; 0x08
 586:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t *state_ptr = (uint8_t *)&laststate;
	for (uint8_t i = 0; i < sizeof(laststate); i++) {
 588:	10 e0       	ldi	r17, 0x00	; 0
 58a:	15 c0       	rjmp	.+42     	; 0x5b6 <readLastStatesFromEEPROM+0x78>
		state_ptr[i] = eeprom_read(addresses[i]);
 58c:	81 2f       	mov	r24, r17
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	9c 01       	movw	r18, r24
 592:	24 5e       	subi	r18, 0xE4	; 228
 594:	3e 4f       	sbci	r19, 0xFE	; 254
 596:	79 01       	movw	r14, r18
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	e1 e0       	ldi	r30, 0x01	; 1
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	ec 0f       	add	r30, r28
 5a2:	fd 1f       	adc	r31, r29
 5a4:	e8 0f       	add	r30, r24
 5a6:	f9 1f       	adc	r31, r25
 5a8:	80 81       	ld	r24, Z
 5aa:	91 81       	ldd	r25, Z+1	; 0x01
 5ac:	0e 94 9f 00 	call	0x13e	; 0x13e <eeprom_read>
 5b0:	f7 01       	movw	r30, r14
 5b2:	80 83       	st	Z, r24
}

void readLastStatesFromEEPROM(void) {
	uint16_t addresses[] = {light1_address, light2_address, light3_address, fan1_address};
	uint8_t *state_ptr = (uint8_t *)&laststate;
	for (uint8_t i = 0; i < sizeof(laststate); i++) {
 5b4:	1f 5f       	subi	r17, 0xFF	; 255
 5b6:	14 30       	cpi	r17, 0x04	; 4
 5b8:	48 f3       	brcs	.-46     	; 0x58c <readLastStatesFromEEPROM+0x4e>
		state_ptr[i] = eeprom_read(addresses[i]);
	}
}
 5ba:	28 96       	adiw	r28, 0x08	; 8
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	ff 90       	pop	r15
 5ce:	ef 90       	pop	r14
 5d0:	08 95       	ret

000005d2 <retain_Lights_State_From_EEPROM>:


void retain_Lights_State_From_EEPROM(void){
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
 5da:	2f 97       	sbiw	r28, 0x0f	; 15
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
	pin_map_t lightMapping[3][1] = {
 5e6:	89 e0       	ldi	r24, 0x09	; 9
 5e8:	e8 e0       	ldi	r30, 0x08	; 8
 5ea:	f1 e0       	ldi	r31, 0x01	; 1
 5ec:	de 01       	movw	r26, r28
 5ee:	11 96       	adiw	r26, 0x01	; 1
 5f0:	01 90       	ld	r0, Z+
 5f2:	0d 92       	st	X+, r0
 5f4:	8a 95       	dec	r24
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <retain_Lights_State_From_EEPROM+0x1e>
		{{&PORTD, PD3}},  // switch1state
		{{&PORTD, PD4}},  // switch2state
		{{&PORTD, PD5}},  // switch3state
	};

	volatile uint8_t *switchStates[3] = { &laststate.switch1Status, &laststate.switch2Status, &laststate.switch3status};
 5f8:	86 e0       	ldi	r24, 0x06	; 6
 5fa:	e1 e1       	ldi	r30, 0x11	; 17
 5fc:	f1 e0       	ldi	r31, 0x01	; 1
 5fe:	de 01       	movw	r26, r28
 600:	1a 96       	adiw	r26, 0x0a	; 10
 602:	01 90       	ld	r0, Z+
 604:	0d 92       	st	X+, r0
 606:	8a 95       	dec	r24
 608:	e1 f7       	brne	.-8      	; 0x602 <retain_Lights_State_From_EEPROM+0x30>

	for(uint8_t i = 0; i < 3; i++) {
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	27 c0       	rjmp	.+78     	; 0x65c <retain_Lights_State_From_EEPROM+0x8a>
		if(*switchStates[i]) {
 60e:	82 2f       	mov	r24, r18
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	fc 01       	movw	r30, r24
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	41 e0       	ldi	r20, 0x01	; 1
 61a:	50 e0       	ldi	r21, 0x00	; 0
 61c:	4c 0f       	add	r20, r28
 61e:	5d 1f       	adc	r21, r29
 620:	e4 0f       	add	r30, r20
 622:	f5 1f       	adc	r31, r21
 624:	01 84       	ldd	r0, Z+9	; 0x09
 626:	f2 85       	ldd	r31, Z+10	; 0x0a
 628:	e0 2d       	mov	r30, r0
 62a:	30 81       	ld	r19, Z
 62c:	33 23       	and	r19, r19
 62e:	a9 f0       	breq	.+42     	; 0x65a <retain_Lights_State_From_EEPROM+0x88>
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
 630:	fc 01       	movw	r30, r24
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	8e 0f       	add	r24, r30
 638:	9f 1f       	adc	r25, r31
 63a:	fa 01       	movw	r30, r20
 63c:	e8 0f       	add	r30, r24
 63e:	f9 1f       	adc	r31, r25
 640:	a0 81       	ld	r26, Z
 642:	b1 81       	ldd	r27, Z+1	; 0x01
 644:	3c 91       	ld	r19, X
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 80       	ldd	r0, Z+2	; 0x02
 64c:	02 c0       	rjmp	.+4      	; 0x652 <retain_Lights_State_From_EEPROM+0x80>
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	0a 94       	dec	r0
 654:	e2 f7       	brpl	.-8      	; 0x64e <retain_Lights_State_From_EEPROM+0x7c>
 656:	83 27       	eor	r24, r19
 658:	8c 93       	st	X, r24
		{{&PORTD, PD5}},  // switch3state
	};

	volatile uint8_t *switchStates[3] = { &laststate.switch1Status, &laststate.switch2Status, &laststate.switch3status};

	for(uint8_t i = 0; i < 3; i++) {
 65a:	2f 5f       	subi	r18, 0xFF	; 255
 65c:	23 30       	cpi	r18, 0x03	; 3
 65e:	b8 f2       	brcs	.-82     	; 0x60e <retain_Lights_State_From_EEPROM+0x3c>
		if(*switchStates[i]) {
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
		}
	}	
}
 660:	2f 96       	adiw	r28, 0x0f	; 15
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <retain_Fan_State_From_EEPROM>:

void retain_Fan_State_From_EEPROM(void){
	switch(laststate.fanSwitchStatus){
 672:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <laststate+0x3>
 676:	83 30       	cpi	r24, 0x03	; 3
 678:	b9 f0       	breq	.+46     	; 0x6a8 <retain_Fan_State_From_EEPROM+0x36>
 67a:	28 f4       	brcc	.+10     	; 0x686 <retain_Fan_State_From_EEPROM+0x14>
 67c:	81 30       	cpi	r24, 0x01	; 1
 67e:	41 f0       	breq	.+16     	; 0x690 <retain_Fan_State_From_EEPROM+0x1e>
 680:	82 30       	cpi	r24, 0x02	; 2
 682:	61 f0       	breq	.+24     	; 0x69c <retain_Fan_State_From_EEPROM+0x2a>
 684:	23 c0       	rjmp	.+70     	; 0x6cc <retain_Fan_State_From_EEPROM+0x5a>
 686:	84 30       	cpi	r24, 0x04	; 4
 688:	a9 f0       	breq	.+42     	; 0x6b4 <retain_Fan_State_From_EEPROM+0x42>
 68a:	85 30       	cpi	r24, 0x05	; 5
 68c:	c9 f0       	breq	.+50     	; 0x6c0 <retain_Fan_State_From_EEPROM+0x4e>
 68e:	1e c0       	rjmp	.+60     	; 0x6cc <retain_Fan_State_From_EEPROM+0x5a>
		case 1: fanSpeed1(); laststate.fanSwitchStatus = 1; break;
 690:	0e 94 c9 00 	call	0x192	; 0x192 <fanSpeed1>
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 69a:	1c c0       	rjmp	.+56     	; 0x6d4 <retain_Fan_State_From_EEPROM+0x62>
		case 2: fanSpeed2(); laststate.fanSwitchStatus = 2; break;
 69c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fanSpeed2>
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 6a6:	16 c0       	rjmp	.+44     	; 0x6d4 <retain_Fan_State_From_EEPROM+0x62>
		case 3: fanSpeed3(); laststate.fanSwitchStatus = 3; break;
 6a8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
 6ac:	83 e0       	ldi	r24, 0x03	; 3
 6ae:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 6b2:	10 c0       	rjmp	.+32     	; 0x6d4 <retain_Fan_State_From_EEPROM+0x62>
		case 4: fanSpeed4(); laststate.fanSwitchStatus = 4; break;
 6b4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <fanSpeed4>
 6b8:	84 e0       	ldi	r24, 0x04	; 4
 6ba:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 6be:	0a c0       	rjmp	.+20     	; 0x6d4 <retain_Fan_State_From_EEPROM+0x62>
		case 5: fanSpeed5(); laststate.fanSwitchStatus = 5; break;
 6c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <fanSpeed5>
 6c4:	85 e0       	ldi	r24, 0x05	; 5
 6c6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <retain_Fan_State_From_EEPROM+0x62>
		default:fanSpeed0(); laststate.fanSwitchStatus = 0; break; 
 6cc:	0e 94 bc 00 	call	0x178	; 0x178 <fanSpeed0>
 6d0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <laststate+0x3>
	}
	eeprom_write(fan1_address, laststate.fanSwitchStatus);
 6d4:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <laststate+0x3>
 6d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 6dc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 6e0:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 6e4:	08 95       	ret

000006e6 <main>:
uint16_t light2_address = 0x0001;
uint16_t light3_address = 0x0002;
uint16_t fan1_address   = 0x0003;

int main(void) {
	sei();  
 6e6:	78 94       	sei
	i2c_init();  
 6e8:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_init>
	readLastStatesFromEEPROM();  
 6ec:	0e 94 9f 02 	call	0x53e	; 0x53e <readLastStatesFromEEPROM>
	retain_Lights_State_From_EEPROM(); 
 6f0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <retain_Lights_State_From_EEPROM>
	retain_Fan_State_From_EEPROM();  
 6f4:	0e 94 39 03 	call	0x672	; 0x672 <retain_Fan_State_From_EEPROM>
	
	setup();  
 6f8:	0e 94 80 02 	call	0x500	; 0x500 <setup>
	EXTERNAL_IRQ_0_init(); 
 6fc:	0e 94 33 01 	call	0x266	; 0x266 <EXTERNAL_IRQ_0_init>
	USART_Init(MYUBRR);
 700:	83 e3       	ldi	r24, 0x33	; 51
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 e7 03 	call	0x7ce	; 0x7ce <USART_Init>
 708:	ff cf       	rjmp	.-2      	; 0x708 <main+0x22>

0000070a <turnAll_ON>:
	}
	eeprom_write(fan1_address, laststate.fanSwitchStatus);
}

void turnAll_ON(){
	PORTD |= (1 << PD5); laststate.switch1Status = 1;
 70a:	8b b1       	in	r24, 0x0b	; 11
 70c:	80 62       	ori	r24, 0x20	; 32
 70e:	8b b9       	out	0x0b, r24	; 11
 710:	ec e1       	ldi	r30, 0x1C	; 28
 712:	f1 e0       	ldi	r31, 0x01	; 1
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	80 83       	st	Z, r24
	PORTD |= (1 << PD4); laststate.switch2Status = 1;
 718:	9b b1       	in	r25, 0x0b	; 11
 71a:	90 61       	ori	r25, 0x10	; 16
 71c:	9b b9       	out	0x0b, r25	; 11
 71e:	81 83       	std	Z+1, r24	; 0x01
	PORTD |= (1 << PD3); laststate.switch3status = 1;
 720:	9b b1       	in	r25, 0x0b	; 11
 722:	98 60       	ori	r25, 0x08	; 8
 724:	9b b9       	out	0x0b, r25	; 11
 726:	82 83       	std	Z+2, r24	; 0x02
	switch (laststate.fanSwitchStatus){
 728:	83 81       	ldd	r24, Z+3	; 0x03
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	d9 f0       	breq	.+54     	; 0x764 <turnAll_ON+0x5a>
 72e:	28 f4       	brcc	.+10     	; 0x73a <turnAll_ON+0x30>
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	41 f0       	breq	.+16     	; 0x744 <turnAll_ON+0x3a>
 734:	82 30       	cpi	r24, 0x02	; 2
 736:	71 f0       	breq	.+28     	; 0x754 <turnAll_ON+0x4a>
 738:	08 95       	ret
 73a:	84 30       	cpi	r24, 0x04	; 4
 73c:	d9 f0       	breq	.+54     	; 0x774 <turnAll_ON+0x6a>
 73e:	85 30       	cpi	r24, 0x05	; 5
 740:	09 f1       	breq	.+66     	; 0x784 <turnAll_ON+0x7a>
 742:	08 95       	ret
		case 1: fanSpeed1(); laststate.fanSwitchStatus = 1; fan_speed = 1; break;
 744:	0e 94 c9 00 	call	0x192	; 0x192 <fanSpeed1>
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 74e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 752:	08 95       	ret
		case 2: fanSpeed2(); laststate.fanSwitchStatus = 2; fan_speed = 2; break;
 754:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fanSpeed2>
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 75e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 762:	08 95       	ret
		case 3: fanSpeed3(); laststate.fanSwitchStatus = 3; fan_speed = 3; break;
 764:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
 768:	83 e0       	ldi	r24, 0x03	; 3
 76a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 76e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 772:	08 95       	ret
		case 4: fanSpeed4(); laststate.fanSwitchStatus = 4; fan_speed = 4; break;
 774:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <fanSpeed4>
 778:	84 e0       	ldi	r24, 0x04	; 4
 77a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 77e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 782:	08 95       	ret
		case 5: fanSpeed5(); laststate.fanSwitchStatus = 5; fan_speed = 5; break;
 784:	0e 94 fd 00 	call	0x1fa	; 0x1fa <fanSpeed5>
 788:	85 e0       	ldi	r24, 0x05	; 5
 78a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 78e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
 792:	08 95       	ret

00000794 <turnAll_OFF>:
		default: break;
	}	
}

void turnAll_OFF(){
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
	PORTD &= ~(1 << PD5); laststate.switch1Status = 0;
 798:	8b b1       	in	r24, 0x0b	; 11
 79a:	8f 7d       	andi	r24, 0xDF	; 223
 79c:	8b b9       	out	0x0b, r24	; 11
 79e:	cc e1       	ldi	r28, 0x1C	; 28
 7a0:	d1 e0       	ldi	r29, 0x01	; 1
 7a2:	18 82       	st	Y, r1
	PORTD &= ~(1 << PD4); laststate.switch2Status = 0;
 7a4:	8b b1       	in	r24, 0x0b	; 11
 7a6:	8f 7e       	andi	r24, 0xEF	; 239
 7a8:	8b b9       	out	0x0b, r24	; 11
 7aa:	19 82       	std	Y+1, r1	; 0x01
	PORTD &= ~(1 << PD3); laststate.switch3status = 0;
 7ac:	8b b1       	in	r24, 0x0b	; 11
 7ae:	87 7f       	andi	r24, 0xF7	; 247
 7b0:	8b b9       	out	0x0b, r24	; 11
 7b2:	1a 82       	std	Y+2, r1	; 0x02
	fanSpeed0();  laststate.fanSwitchStatus = 0;
 7b4:	0e 94 bc 00 	call	0x178	; 0x178 <fanSpeed0>
 7b8:	1b 82       	std	Y+3, r1	; 0x03
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <USART_Transmit>:
#include "uart.h"
#include "main.h"

void USART_Transmit( unsigned char data )
{
	while ( !( UCSR0A & (1<<UDRE)) );
 7c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 7c4:	95 ff       	sbrs	r25, 5
 7c6:	fc cf       	rjmp	.-8      	; 0x7c0 <USART_Transmit>
	UDR0 = data;
 7c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 7cc:	08 95       	ret

000007ce <USART_Init>:
}

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 7ce:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 7d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);  // Enable receiver and transmitter
 7d6:	88 e9       	ldi	r24, 0x98	; 152
 7d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);               // 8-bit data, 1 stop bit
 7dc:	86 e0       	ldi	r24, 0x06	; 6
 7de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 7e2:	08 95       	ret

000007e4 <USART_Receive>:
}


unsigned char USART_Receive( void )
{
	while ( !(UCSR0A & (1<<RXC)) );
 7e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 7e8:	88 23       	and	r24, r24
 7ea:	e4 f7       	brge	.-8      	; 0x7e4 <USART_Receive>
	return UDR0;
 7ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 7f0:	08 95       	ret

000007f2 <UARTdataProcess>:
 *  Author: kjeyabalan
 */ 

#include "uartDataProcess.h"

void UARTdataProcess(unsigned char receivedData){
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	c8 2f       	mov	r28, r24
	if(receivedData == 'L'){
 7f8:	8c 34       	cpi	r24, 0x4C	; 76
 7fa:	e1 f4       	brne	.+56     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		receivedData = USART_Receive();
 7fc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <USART_Receive>
 800:	c8 2f       	mov	r28, r24
		if(receivedData == '1'){
 802:	81 33       	cpi	r24, 0x31	; 49
 804:	39 f4       	brne	.+14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
			PORTD |= (1 << PD3);
 806:	8b b1       	in	r24, 0x0b	; 11
 808:	88 60       	ori	r24, 0x08	; 8
 80a:	8b b9       	out	0x0b, r24	; 11
			laststate.switch1Status = 1;
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <laststate>
 812:	07 c0       	rjmp	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		}
		else if(receivedData == '0'){
 814:	80 33       	cpi	r24, 0x30	; 48
 816:	29 f4       	brne	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
			PORTD &= ~(1 << PD3);
 818:	8b b1       	in	r24, 0x0b	; 11
 81a:	87 7f       	andi	r24, 0xF7	; 247
 81c:	8b b9       	out	0x0b, r24	; 11
			laststate.switch1Status = 0;
 81e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <laststate>
		}
		eeprom_write(light1_address, laststate.switch1Status);
 822:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <laststate>
 826:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 82a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 82e:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 832:	3b c0       	rjmp	.+118    	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
	}
	else if(receivedData == 'M'){
 834:	8d 34       	cpi	r24, 0x4D	; 77
 836:	e1 f4       	brne	.+56     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
		receivedData = USART_Receive();
 838:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <USART_Receive>
 83c:	c8 2f       	mov	r28, r24
		if(receivedData == '1'){
 83e:	81 33       	cpi	r24, 0x31	; 49
 840:	39 f4       	brne	.+14     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			PORTD |= (1 << PD4);
 842:	8b b1       	in	r24, 0x0b	; 11
 844:	80 61       	ori	r24, 0x10	; 16
 846:	8b b9       	out	0x0b, r24	; 11
			laststate.switch2Status = 1;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <laststate+0x1>
 84e:	07 c0       	rjmp	.+14     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
		}
		else if(receivedData == '0'){
 850:	80 33       	cpi	r24, 0x30	; 48
 852:	29 f4       	brne	.+10     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			PORTD &= ~(1 << PD4);
 854:	8b b1       	in	r24, 0x0b	; 11
 856:	8f 7e       	andi	r24, 0xEF	; 239
 858:	8b b9       	out	0x0b, r24	; 11
			laststate.switch2Status = 0;
 85a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <laststate+0x1>
		}
		eeprom_write(light2_address, laststate.switch2Status);
 85e:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <laststate+0x1>
 862:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <light2_address>
 866:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <light2_address+0x1>
 86a:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 86e:	1d c0       	rjmp	.+58     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
	}
	else if(receivedData == 'N'){
 870:	8e 34       	cpi	r24, 0x4E	; 78
 872:	d9 f4       	brne	.+54     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
		receivedData = USART_Receive();
 874:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <USART_Receive>
 878:	c8 2f       	mov	r28, r24
		if(receivedData == '1'){
 87a:	81 33       	cpi	r24, 0x31	; 49
 87c:	39 f4       	brne	.+14     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
			PORTD |= (1 << PD5);
 87e:	8b b1       	in	r24, 0x0b	; 11
 880:	80 62       	ori	r24, 0x20	; 32
 882:	8b b9       	out	0x0b, r24	; 11
			laststate.switch3status = 1;
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <laststate+0x2>
 88a:	07 c0       	rjmp	.+14     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
		}
		else if(receivedData == '0'){
 88c:	80 33       	cpi	r24, 0x30	; 48
 88e:	29 f4       	brne	.+10     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
			PORTD &= ~(1 << PD5);
 890:	8b b1       	in	r24, 0x0b	; 11
 892:	8f 7d       	andi	r24, 0xDF	; 223
 894:	8b b9       	out	0x0b, r24	; 11
			laststate.switch3status = 0;
 896:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <laststate+0x2>
		}
		eeprom_write(light3_address, laststate.switch3status);
 89a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <laststate+0x2>
 89e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <light3_address>
 8a2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <light3_address+0x1>
 8a6:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
	}
	if(receivedData == 'F'){
 8aa:	c6 34       	cpi	r28, 0x46	; 70
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8ae:	53 c0       	rjmp	.+166    	; 0x956 <__stack+0x57>
		receivedData = USART_Receive();
 8b0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <USART_Receive>
 8b4:	c8 2f       	mov	r28, r24
		if(receivedData == '1'){
 8b6:	81 33       	cpi	r24, 0x31	; 49
 8b8:	09 f0       	breq	.+2      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8ba:	3f c0       	rjmp	.+126    	; 0x93a <__stack+0x3b>
			fanSpeed1();
 8bc:	0e 94 c9 00 	call	0x192	; 0x192 <fanSpeed1>
			fan_speed = 1;
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
			laststate.fanSwitchStatus = 1;
 8c6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
			receivedData = USART_Receive();
 8ca:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <USART_Receive>
 8ce:	c8 2f       	mov	r28, r24
			if(receivedData == 'U'){
 8d0:	85 35       	cpi	r24, 0x55	; 85
 8d2:	51 f5       	brne	.+84     	; 0x928 <__stack+0x29>
				receivedData = USART_Receive();
 8d4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <USART_Receive>
 8d8:	c8 2f       	mov	r28, r24
				if(receivedData == '2'){
 8da:	82 33       	cpi	r24, 0x32	; 50
 8dc:	41 f4       	brne	.+16     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
					fanSpeed2();
 8de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fanSpeed2>
					fan_speed = 2;
 8e2:	82 e0       	ldi	r24, 0x02	; 2
 8e4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
					laststate.fanSwitchStatus = 2;
 8e8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 8ec:	1d c0       	rjmp	.+58     	; 0x928 <__stack+0x29>
				}
				else if(receivedData == '3'){
 8ee:	83 33       	cpi	r24, 0x33	; 51
 8f0:	41 f4       	brne	.+16     	; 0x902 <__stack+0x3>
					fanSpeed3();
 8f2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <fanSpeed3>
					fan_speed = 3;
 8f6:	83 e0       	ldi	r24, 0x03	; 3
 8f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
					laststate.fanSwitchStatus = 3;
 8fc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 900:	13 c0       	rjmp	.+38     	; 0x928 <__stack+0x29>
				}
				else if(receivedData == '4'){
 902:	84 33       	cpi	r24, 0x34	; 52
 904:	41 f4       	brne	.+16     	; 0x916 <__stack+0x17>
					fanSpeed4();
 906:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <fanSpeed4>
					fan_speed = 4;
 90a:	84 e0       	ldi	r24, 0x04	; 4
 90c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
					laststate.fanSwitchStatus = 4;
 910:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
 914:	09 c0       	rjmp	.+18     	; 0x928 <__stack+0x29>
				}
				else if(receivedData == '5'){
 916:	85 33       	cpi	r24, 0x35	; 53
 918:	39 f4       	brne	.+14     	; 0x928 <__stack+0x29>
					fanSpeed5();
 91a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <fanSpeed5>
					fan_speed = 5;
 91e:	85 e0       	ldi	r24, 0x05	; 5
 920:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <fan_speed>
					laststate.fanSwitchStatus = 5;
 924:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <laststate+0x3>
				}
			}
			//laststate.fanSwitchStatus = 1;
			eeprom_write(fan1_address, laststate.fanSwitchStatus);
 928:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <laststate+0x3>
 92c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 930:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 934:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
 938:	0e c0       	rjmp	.+28     	; 0x956 <__stack+0x57>
		}
		else if(receivedData == '0'){
 93a:	80 33       	cpi	r24, 0x30	; 48
 93c:	61 f4       	brne	.+24     	; 0x956 <__stack+0x57>
			fanSpeed0();
 93e:	0e 94 bc 00 	call	0x178	; 0x178 <fanSpeed0>
			laststate.fanSwitchStatus = 0;
 942:	ec e1       	ldi	r30, 0x1C	; 28
 944:	f1 e0       	ldi	r31, 0x01	; 1
 946:	13 82       	std	Z+3, r1	; 0x03
			eeprom_write(fan1_address, laststate.fanSwitchStatus);
 948:	63 81       	ldd	r22, Z+3	; 0x03
 94a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 94e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 952:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
		}
	}
	if(receivedData == 'Z'){
 956:	ca 35       	cpi	r28, 0x5A	; 90
 958:	49 f5       	brne	.+82     	; 0x9ac <__stack+0xad>
		receivedData = USART_Receive();
 95a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <USART_Receive>
		if(receivedData == '1'){
 95e:	81 33       	cpi	r24, 0x31	; 49
 960:	19 f4       	brne	.+6      	; 0x968 <__stack+0x69>
			turnAll_ON();
 962:	0e 94 85 03 	call	0x70a	; 0x70a <turnAll_ON>
 966:	04 c0       	rjmp	.+8      	; 0x970 <__stack+0x71>
		}
		else if(receivedData == '0'){
 968:	80 33       	cpi	r24, 0x30	; 48
 96a:	11 f4       	brne	.+4      	; 0x970 <__stack+0x71>
			turnAll_OFF();
 96c:	0e 94 ca 03 	call	0x794	; 0x794 <turnAll_OFF>
		}
		eeprom_write(light1_address, laststate.switch1Status);
 970:	cc e1       	ldi	r28, 0x1C	; 28
 972:	d1 e0       	ldi	r29, 0x01	; 1
 974:	68 81       	ld	r22, Y
 976:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 97a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 97e:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
		eeprom_write(light2_address, laststate.switch2Status);
 982:	69 81       	ldd	r22, Y+1	; 0x01
 984:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <light2_address>
 988:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <light2_address+0x1>
 98c:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
		eeprom_write(light3_address, laststate.switch3status);
 990:	6a 81       	ldd	r22, Y+2	; 0x02
 992:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <light3_address>
 996:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <light3_address+0x1>
 99a:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
		eeprom_write(fan1_address, laststate.fanSwitchStatus);
 99e:	6b 81       	ldd	r22, Y+3	; 0x03
 9a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <fan1_address>
 9a4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <fan1_address+0x1>
 9a8:	0e 94 85 00 	call	0x10a	; 0x10a <eeprom_write>
	}
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	08 95       	ret

000009b2 <_exit>:
 9b2:	f8 94       	cli

000009b4 <__stop_program>:
 9b4:	ff cf       	rjmp	.-2      	; 0x9b4 <__stop_program>
