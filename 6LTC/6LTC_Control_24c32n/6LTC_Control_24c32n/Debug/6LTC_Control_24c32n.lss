
6LTC_Control_24c32n.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000095c  000009f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800150  00800150  00000a40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aff  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d61  00000000  00000000  0000278f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000100b  00000000  00000000  000034f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  000044fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fa  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008bb  00000000  00000000  00005122  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000059dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c1       	rjmp	.+648    	; 0x2ba <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	53 c1       	rjmp	.+678    	; 0x2ec <__vector_17>
  46:	00 00       	nop
  48:	90 c1       	rjmp	.+800    	; 0x36a <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e5       	ldi	r26, 0x50	; 80
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 35       	cpi	r26, 0x5D	; 93
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	58 d2       	rcall	.+1200   	; 0x574 <main>
  c4:	49 c4       	rjmp	.+2194   	; 0x958 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <eeprom_write>:
 *  Author: kjeya
 */ 

#include "eeprom.h"

void eeprom_write(uint16_t address, uint8_t data) {
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	d8 2f       	mov	r29, r24
  d0:	19 2f       	mov	r17, r25
  d2:	c6 2f       	mov	r28, r22
	i2c_start();
  d4:	28 d0       	rcall	.+80     	; 0x126 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
  d6:	80 ea       	ldi	r24, 0xA0	; 160
  d8:	36 d0       	rcall	.+108    	; 0x146 <i2c_write>
	i2c_write((address >> 8) & 0xFF);
  da:	81 2f       	mov	r24, r17
  dc:	34 d0       	rcall	.+104    	; 0x146 <i2c_write>
	i2c_write(address & 0xFF);
  de:	8d 2f       	mov	r24, r29
	i2c_write(data);
  e0:	32 d0       	rcall	.+100    	; 0x146 <i2c_write>
  e2:	8c 2f       	mov	r24, r28
  e4:	30 d0       	rcall	.+96     	; 0x146 <i2c_write>
	i2c_stop();
  e6:	27 d0       	rcall	.+78     	; 0x136 <i2c_stop>
  e8:	df 91       	pop	r29
}
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	08 95       	ret

000000f0 <eeprom_read>:
  f0:	cf 93       	push	r28

uint8_t eeprom_read(uint16_t address) {
  f2:	df 93       	push	r29
  f4:	c8 2f       	mov	r28, r24
  f6:	d9 2f       	mov	r29, r25
	uint8_t data;
	i2c_start();
  f8:	16 d0       	rcall	.+44     	; 0x126 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	24 d0       	rcall	.+72     	; 0x146 <i2c_write>
	i2c_write((address >> 8) & 0xFF);
  fe:	8d 2f       	mov	r24, r29
 100:	22 d0       	rcall	.+68     	; 0x146 <i2c_write>
	i2c_write(address & 0xFF);
 102:	8c 2f       	mov	r24, r28
 104:	20 d0       	rcall	.+64     	; 0x146 <i2c_write>
	i2c_start();
 106:	0f d0       	rcall	.+30     	; 0x126 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 1);
 108:	81 ea       	ldi	r24, 0xA1	; 161
 10a:	1d d0       	rcall	.+58     	; 0x146 <i2c_write>
 10c:	26 d0       	rcall	.+76     	; 0x15a <i2c_read_nack>
	data = i2c_read_nack();
 10e:	c8 2f       	mov	r28, r24
 110:	12 d0       	rcall	.+36     	; 0x136 <i2c_stop>
 112:	8c 2f       	mov	r24, r28
	i2c_stop();
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
	return data;
}
 118:	08 95       	ret

0000011a <i2c_init>:
 11a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 11e:	88 e4       	ldi	r24, 0x48	; 72

uint8_t i2c_read_ack(void) {
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
	while (!(TWCR & (1<<TWINT)));
	return TWDR;
}
 120:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 124:	08 95       	ret

00000126 <i2c_start>:
 126:	84 ea       	ldi	r24, 0xA4	; 164
 128:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 12c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 130:	88 23       	and	r24, r24
 132:	e4 f7       	brge	.-8      	; 0x12c <i2c_start+0x6>
 134:	08 95       	ret

00000136 <i2c_stop>:
 136:	84 e9       	ldi	r24, 0x94	; 148
 138:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 13c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 140:	84 fd       	sbrc	r24, 4
 142:	fc cf       	rjmp	.-8      	; 0x13c <i2c_stop+0x6>
 144:	08 95       	ret

00000146 <i2c_write>:
 146:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 150:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 154:	88 23       	and	r24, r24
 156:	e4 f7       	brge	.-8      	; 0x150 <i2c_write+0xa>
 158:	08 95       	ret

0000015a <i2c_read_nack>:

uint8_t i2c_read_nack(void) {
	TWCR = (1<<TWEN) | (1<<TWINT);
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
 160:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 164:	88 23       	and	r24, r24
 166:	e4 f7       	brge	.-8      	; 0x160 <i2c_read_nack+0x6>
	return TWDR;
 168:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 16c:	08 95       	ret

0000016e <light1_ON>:
 */ 

#include "light.h"

void light1_ON(){
	PORTD |= (1 << PD6);
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	80 64       	ori	r24, 0x40	; 64
 172:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF1);
 174:	e2 e6       	ldi	r30, 0x62	; 98
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	80 83       	st	Z, r24
	lastState.lightState_1 = 1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <lastState>
 184:	08 95       	ret

00000186 <light1_OFF>:
}

void light1_OFF(){
	PORTD &= ~(1 << PD6);
 186:	82 b3       	in	r24, 0x12	; 18
 188:	8f 7b       	andi	r24, 0xBF	; 191
 18a:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF1);
 18c:	e2 e6       	ldi	r30, 0x62	; 98
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	80 83       	st	Z, r24
	lastState.lightState_1 = 0;
 196:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <lastState>
 19a:	08 95       	ret

0000019c <light2_ON>:
}

void light2_ON(){
	PORTD |= (1 << PD5);
 19c:	82 b3       	in	r24, 0x12	; 18
 19e:	80 62       	ori	r24, 0x20	; 32
 1a0:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF2);
 1a2:	e2 e6       	ldi	r30, 0x62	; 98
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	80 83       	st	Z, r24
	lastState.lightState_2 = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <lastState+0x1>
 1b2:	08 95       	ret

000001b4 <light2_OFF>:
}

void light2_OFF(){
	PORTD &= ~(1 << PD5);
 1b4:	82 b3       	in	r24, 0x12	; 18
 1b6:	8f 7d       	andi	r24, 0xDF	; 223
 1b8:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF2);
 1ba:	e2 e6       	ldi	r30, 0x62	; 98
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	80 83       	st	Z, r24
	lastState.lightState_2 = 0;
 1c4:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <lastState+0x1>
 1c8:	08 95       	ret

000001ca <light3_ON>:
}

void light3_ON(){
	PORTD |= (1 << PD7);
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF3);
 1d0:	e2 e6       	ldi	r30, 0x62	; 98
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	80 83       	st	Z, r24
	lastState.lightState_3 = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <lastState+0x2>
 1e0:	08 95       	ret

000001e2 <light3_OFF>:
}

void light3_OFF(){
	PORTD &= ~(1 << PD7);
 1e2:	82 b3       	in	r24, 0x12	; 18
 1e4:	8f 77       	andi	r24, 0x7F	; 127
 1e6:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF3);
 1e8:	e2 e6       	ldi	r30, 0x62	; 98
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	87 7f       	andi	r24, 0xF7	; 247
 1f0:	80 83       	st	Z, r24
	lastState.lightState_3 = 0;
 1f2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <lastState+0x2>
 1f6:	08 95       	ret

000001f8 <light4_ON>:
}

void light4_ON(){
	PORTD |= (1 << PD4);
 1f8:	82 b3       	in	r24, 0x12	; 18
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF4);
 1fe:	e2 e6       	ldi	r30, 0x62	; 98
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 61       	ori	r24, 0x10	; 16
 206:	80 83       	st	Z, r24
	lastState.lightState_4 = 1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <lastState+0x3>
 20e:	08 95       	ret

00000210 <light4_OFF>:
}

void light4_OFF(){
	PORTD &= ~(1 << PD4);
 210:	82 b3       	in	r24, 0x12	; 18
 212:	8f 7e       	andi	r24, 0xEF	; 239
 214:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF4);
 216:	e2 e6       	ldi	r30, 0x62	; 98
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8f 7e       	andi	r24, 0xEF	; 239
 21e:	80 83       	st	Z, r24
	lastState.lightState_4 = 0;
 220:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <lastState+0x3>
 224:	08 95       	ret

00000226 <light5_ON>:
}

void light5_ON(){
	PORTD |= (1 << PD3);
 226:	82 b3       	in	r24, 0x12	; 18
 228:	88 60       	ori	r24, 0x08	; 8
 22a:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF5);
 22c:	e2 e6       	ldi	r30, 0x62	; 98
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 62       	ori	r24, 0x20	; 32
 234:	80 83       	st	Z, r24
	lastState.lightState_5 = 1;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <lastState+0x4>
 23c:	08 95       	ret

0000023e <light5_OFF>:
}

void light5_OFF(){
	PORTD &= ~(1 << PD3);
 23e:	82 b3       	in	r24, 0x12	; 18
 240:	87 7f       	andi	r24, 0xF7	; 247
 242:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF5);
 244:	e2 e6       	ldi	r30, 0x62	; 98
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	8f 7d       	andi	r24, 0xDF	; 223
 24c:	80 83       	st	Z, r24
	lastState.lightState_5 = 0;
 24e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <lastState+0x4>
 252:	08 95       	ret

00000254 <light6_ON>:
}

void light6_ON(){
	PORTD |= (1 << PD2);
 254:	82 b3       	in	r24, 0x12	; 18
 256:	84 60       	ori	r24, 0x04	; 4
 258:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF6);
 25a:	e2 e6       	ldi	r30, 0x62	; 98
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 64       	ori	r24, 0x40	; 64
 262:	80 83       	st	Z, r24
	lastState.lightState_6 = 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <lastState+0x5>
 26a:	08 95       	ret

0000026c <light6_OFF>:
}

void light6_OFF(){
	PORTD &= ~(1 << PD2);
 26c:	82 b3       	in	r24, 0x12	; 18
 26e:	8b 7f       	andi	r24, 0xFB	; 251
 270:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF6);
 272:	e2 e6       	ldi	r30, 0x62	; 98
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	8f 7b       	andi	r24, 0xBF	; 191
 27a:	80 83       	st	Z, r24
	lastState.lightState_6 = 0;
 27c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <lastState+0x5>
 280:	08 95       	ret

00000282 <Total_ON>:
}

void Total_ON(){
	light1_ON();
 282:	75 df       	rcall	.-278    	; 0x16e <light1_ON>
	light2_ON();
 284:	8b df       	rcall	.-234    	; 0x19c <light2_ON>
	light3_ON();
 286:	a1 df       	rcall	.-190    	; 0x1ca <light3_ON>
	light4_ON();
 288:	b7 df       	rcall	.-146    	; 0x1f8 <light4_ON>
 28a:	cd df       	rcall	.-102    	; 0x226 <light5_ON>
	light5_ON();
 28c:	e3 cf       	rjmp	.-58     	; 0x254 <light6_ON>
 28e:	08 95       	ret

00000290 <Total_OFF>:
	light6_ON();
 290:	7a df       	rcall	.-268    	; 0x186 <light1_OFF>
 292:	90 df       	rcall	.-224    	; 0x1b4 <light2_OFF>
 294:	a6 df       	rcall	.-180    	; 0x1e2 <light3_OFF>

void Total_OFF(){
	light1_OFF();
	light2_OFF();
	light3_OFF();
	light4_OFF();
 296:	bc df       	rcall	.-136    	; 0x210 <light4_OFF>
 298:	d2 df       	rcall	.-92     	; 0x23e <light5_OFF>
	light5_OFF();
 29a:	e8 cf       	rjmp	.-48     	; 0x26c <light6_OFF>
 29c:	08 95       	ret

0000029e <timer1_init>:
	light6_OFF();
 29e:	8e b5       	in	r24, 0x2e	; 46
 2a0:	88 60       	ori	r24, 0x08	; 8
 2a2:	8e bd       	out	0x2e, r24	; 46
	uint16_t addresses[] = {light1_address, light2_address, light3_address,light4_address, light5_address, light6_address};
	uint8_t *state_ptr = (uint8_t*)&lastState;
	for(uint8_t i = 0; i < 6; i++){
		eeprom_write(addresses[i], state_ptr[i]);
	}
}
 2a4:	88 e2       	ldi	r24, 0x28	; 40
 2a6:	9e e0       	ldi	r25, 0x0E	; 14
 2a8:	9b bd       	out	0x2b, r25	; 43
 2aa:	8a bd       	out	0x2a, r24	; 42
 2ac:	87 b7       	in	r24, 0x37	; 55
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	87 bf       	out	0x37, r24	; 55
 2b2:	8e b5       	in	r24, 0x2e	; 46
 2b4:	85 60       	ori	r24, 0x05	; 5
 2b6:	8e bd       	out	0x2e, r24	; 46
 2b8:	08 95       	ret

000002ba <__vector_12>:
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	8f 93       	push	r24
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timer_flag>
 2cc:	8f 91       	pop	r24
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <SPI_init_slave>:
 2d8:	87 b3       	in	r24, 0x17	; 23
 2da:	80 61       	ori	r24, 0x10	; 16
 2dc:	87 bb       	out	0x17, r24	; 23
 2de:	8d b1       	in	r24, 0x0d	; 13
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	8d b9       	out	0x0d, r24	; 13
 2e4:	8d b1       	in	r24, 0x0d	; 13
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	8d b9       	out	0x0d, r24	; 13
 2ea:	08 95       	ret

000002ec <__vector_17>:
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	0b b6       	in	r0, 0x3b	; 59
 2f8:	0f 92       	push	r0
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
 312:	9f b1       	in	r25, 0x0f	; 15
 314:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <byteIndex.1986>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	88 f4       	brcc	.+34     	; 0x33e <__vector_17+0x52>
 31c:	e8 2f       	mov	r30, r24
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	e0 5b       	subi	r30, 0xB0	; 176
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	90 83       	st	Z, r25
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <byteIndex.1986>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	39 f4       	brne	.+14     	; 0x33e <__vector_17+0x52>
 330:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end+0x2>
 334:	80 e5       	ldi	r24, 0x50	; 80
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	21 d1       	rcall	.+578    	; 0x57c <SPIprocessCommand>
 33a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <byteIndex.1986>
 33e:	8e b1       	in	r24, 0x0e	; 14
 340:	80 68       	ori	r24, 0x80	; 128
 342:	8e b9       	out	0x0e, r24	; 14
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0b be       	out	0x3b, r0	; 59
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_18>:
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	0b b6       	in	r0, 0x3b	; 59
 376:	0f 92       	push	r0
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
 390:	8c b1       	in	r24, 0x0c	; 12
 392:	11 d2       	rcall	.+1058   	; 0x7b6 <uartProcessCommand>
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0b be       	out	0x3b, r0	; 59
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <setup>:
 3ba:	78 94       	sei
 3bc:	ae de       	rcall	.-676    	; 0x11a <i2c_init>
 3be:	8c df       	rcall	.-232    	; 0x2d8 <SPI_init_slave>
 3c0:	6e df       	rcall	.-292    	; 0x29e <timer1_init>
 3c2:	87 e6       	ldi	r24, 0x67	; 103
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	e6 d1       	rcall	.+972    	; 0x794 <USART_Init>
 3c8:	81 b3       	in	r24, 0x11	; 17
 3ca:	8c 6f       	ori	r24, 0xFC	; 252
 3cc:	81 bb       	out	0x11, r24	; 17
 3ce:	e1 e6       	ldi	r30, 0x61	; 97
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	8f 67       	ori	r24, 0x7F	; 127
 3d6:	80 83       	st	Z, r24
 3d8:	08 95       	ret

000003da <readStatesFromEEPROM>:

void readStatesFromEEPROM(void){
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	2c 97       	sbiw	r28, 0x0c	; 12
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
	uint16_t addresses[] = {light1_address, light2_address, light3_address, light4_address, light5_address, light6_address};
 3f4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <light1_address>
 3f8:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <light1_address+0x1>
 3fc:	9a 83       	std	Y+2, r25	; 0x02
 3fe:	89 83       	std	Y+1, r24	; 0x01
 400:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
 404:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
 408:	9c 83       	std	Y+4, r25	; 0x04
 40a:	8b 83       	std	Y+3, r24	; 0x03
 40c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
 410:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
 414:	9e 83       	std	Y+6, r25	; 0x06
 416:	8d 83       	std	Y+5, r24	; 0x05
 418:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
 41c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
 420:	98 87       	std	Y+8, r25	; 0x08
 422:	8f 83       	std	Y+7, r24	; 0x07
 424:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light5_address>
 428:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light5_address+0x1>
 42c:	9a 87       	std	Y+10, r25	; 0x0a
 42e:	89 87       	std	Y+9, r24	; 0x09
 430:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 434:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 438:	9c 87       	std	Y+12, r25	; 0x0c
 43a:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t *state_ptr = (uint8_t *)&lastState;
	for(uint8_t i = 0; i < sizeof(lastState); i++){
 43c:	10 e0       	ldi	r17, 0x00	; 0
 43e:	14 c0       	rjmp	.+40     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		state_ptr[i] = eeprom_read(addresses[i]);
 440:	81 2f       	mov	r24, r17
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	9c 01       	movw	r18, r24
 446:	29 5a       	subi	r18, 0xA9	; 169
 448:	3e 4f       	sbci	r19, 0xFE	; 254
 44a:	79 01       	movw	r14, r18
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	e1 e0       	ldi	r30, 0x01	; 1
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	ec 0f       	add	r30, r28
 456:	fd 1f       	adc	r31, r29
 458:	e8 0f       	add	r30, r24
 45a:	f9 1f       	adc	r31, r25
 45c:	80 81       	ld	r24, Z
 45e:	91 81       	ldd	r25, Z+1	; 0x01
 460:	47 de       	rcall	.-882    	; 0xf0 <eeprom_read>
 462:	f7 01       	movw	r30, r14
 464:	80 83       	st	Z, r24
}

void readStatesFromEEPROM(void){
	uint16_t addresses[] = {light1_address, light2_address, light3_address, light4_address, light5_address, light6_address};
	uint8_t *state_ptr = (uint8_t *)&lastState;
	for(uint8_t i = 0; i < sizeof(lastState); i++){
 466:	1f 5f       	subi	r17, 0xFF	; 255
 468:	16 30       	cpi	r17, 0x06	; 6
 46a:	50 f3       	brcs	.-44     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		state_ptr[i] = eeprom_read(addresses[i]);
	}
}
 46c:	2c 96       	adiw	r28, 0x0c	; 12
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	08 95       	ret

00000484 <retainLightStates>:

void retainLightStates(void){
 484:	ef 92       	push	r14
 486:	ff 92       	push	r15
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	e0 97       	sbiw	r28, 0x30	; 48
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	f8 94       	cli
 49a:	de bf       	out	0x3e, r29	; 62
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	cd bf       	out	0x3d, r28	; 61
	pin_map_t lightMapping[6][2] = {
 4a0:	84 e2       	ldi	r24, 0x24	; 36
 4a2:	ea e0       	ldi	r30, 0x0A	; 10
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	de 01       	movw	r26, r28
 4a8:	11 96       	adiw	r26, 0x01	; 1
 4aa:	01 90       	ld	r0, Z+
 4ac:	0d 92       	st	X+, r0
 4ae:	8a 95       	dec	r24
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <retainLightStates+0x26>
		{{&PORTD, PD4}, {&PORTF, PF4}},   // light4state
		{{&PORTD, PD3}, {&PORTF, PF5}},   // light5state
		{{&PORTD, PD2}, {&PORTF, PF6}}    // light6state
		};

	volatile uint8_t *lightStates[6] = {&lastState.lightState_1, &lastState.lightState_2, &lastState.lightState_3, &lastState.lightState_4, &lastState.lightState_5, &lastState.lightState_6};
 4b2:	8c e0       	ldi	r24, 0x0C	; 12
 4b4:	ee e2       	ldi	r30, 0x2E	; 46
 4b6:	f1 e0       	ldi	r31, 0x01	; 1
 4b8:	de 01       	movw	r26, r28
 4ba:	95 96       	adiw	r26, 0x25	; 37
 4bc:	01 90       	ld	r0, Z+
 4be:	0d 92       	st	X+, r0
 4c0:	8a 95       	dec	r24
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <retainLightStates+0x38>

	for(uint8_t i = 0; i < 6; i++) {
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	46 c0       	rjmp	.+140    	; 0x554 <retainLightStates+0xd0>
		if(*lightStates[i]) {
 4c8:	82 2f       	mov	r24, r18
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	fc 01       	movw	r30, r24
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	4c 0f       	add	r20, r28
 4d8:	5d 1f       	adc	r21, r29
 4da:	e4 0f       	add	r30, r20
 4dc:	f5 1f       	adc	r31, r21
 4de:	04 a0       	ldd	r0, Z+36	; 0x24
 4e0:	f5 a1       	ldd	r31, Z+37	; 0x25
 4e2:	e0 2d       	mov	r30, r0
 4e4:	30 81       	ld	r19, Z
 4e6:	33 23       	and	r19, r19
 4e8:	a1 f1       	breq	.+104    	; 0x552 <retainLightStates+0xce>
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
 4ea:	7c 01       	movw	r14, r24
 4ec:	ee 0c       	add	r14, r14
 4ee:	ff 1c       	adc	r15, r15
 4f0:	d7 01       	movw	r26, r14
 4f2:	a8 0f       	add	r26, r24
 4f4:	b9 1f       	adc	r27, r25
 4f6:	aa 0f       	add	r26, r26
 4f8:	bb 1f       	adc	r27, r27
 4fa:	a4 0f       	add	r26, r20
 4fc:	b5 1f       	adc	r27, r21
 4fe:	0d 91       	ld	r16, X+
 500:	1c 91       	ld	r17, X
 502:	11 97       	sbiw	r26, 0x01	; 1
 504:	f8 01       	movw	r30, r16
 506:	30 81       	ld	r19, Z
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	ba 01       	movw	r22, r20
 50e:	12 96       	adiw	r26, 0x02	; 2
 510:	0c 90       	ld	r0, X
 512:	12 97       	sbiw	r26, 0x02	; 2
 514:	02 c0       	rjmp	.+4      	; 0x51a <retainLightStates+0x96>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <retainLightStates+0x92>
 51e:	63 27       	eor	r22, r19
 520:	60 83       	st	Z, r22
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
 522:	13 96       	adiw	r26, 0x03	; 3
 524:	0d 90       	ld	r0, X+
 526:	bc 91       	ld	r27, X
 528:	a0 2d       	mov	r26, r0
 52a:	3c 91       	ld	r19, X
 52c:	f7 01       	movw	r30, r14
 52e:	e8 0f       	add	r30, r24
 530:	f9 1f       	adc	r31, r25
 532:	ee 0f       	add	r30, r30
 534:	ff 1f       	adc	r31, r31
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	8c 0f       	add	r24, r28
 53c:	9d 1f       	adc	r25, r29
 53e:	e8 0f       	add	r30, r24
 540:	f9 1f       	adc	r31, r25
 542:	05 80       	ldd	r0, Z+5	; 0x05
 544:	02 c0       	rjmp	.+4      	; 0x54a <retainLightStates+0xc6>
 546:	44 0f       	add	r20, r20
 548:	55 1f       	adc	r21, r21
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <retainLightStates+0xc2>
 54e:	43 27       	eor	r20, r19
 550:	4c 93       	st	X, r20
		{{&PORTD, PD2}, {&PORTF, PF6}}    // light6state
		};

	volatile uint8_t *lightStates[6] = {&lastState.lightState_1, &lastState.lightState_2, &lastState.lightState_3, &lastState.lightState_4, &lastState.lightState_5, &lastState.lightState_6};

	for(uint8_t i = 0; i < 6; i++) {
 552:	2f 5f       	subi	r18, 0xFF	; 255
 554:	26 30       	cpi	r18, 0x06	; 6
 556:	08 f4       	brcc	.+2      	; 0x55a <retainLightStates+0xd6>
 558:	b7 cf       	rjmp	.-146    	; 0x4c8 <retainLightStates+0x44>
		if(*lightStates[i]) {
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
		}
	}
}
 55a:	e0 96       	adiw	r28, 0x30	; 48
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	08 95       	ret

00000574 <main>:
uint16_t light5_address = 0x0004;
uint16_t light6_address = 0x0005;


int main(void) {
	setup();
 574:	22 df       	rcall	.-444    	; 0x3ba <setup>
	readStatesFromEEPROM();
 576:	31 df       	rcall	.-414    	; 0x3da <readStatesFromEEPROM>
	retainLightStates();
 578:	85 df       	rcall	.-246    	; 0x484 <retainLightStates>
 57a:	ff cf       	rjmp	.-2      	; 0x57a <main+0x6>

0000057c <SPIprocessCommand>:
 57c:	cf 93       	push	r28

#include "SPIdataProcess.h"

const char* command ;

void SPIprocessCommand(const char* command) {                          
 57e:	df 93       	push	r29
 580:	ec 01       	movw	r28, r24
	if (strcmp(command, "H1") == 0) {                                             //Network hard reset
 582:	6a e3       	ldi	r22, 0x3A	; 58
 584:	71 e0       	ldi	r23, 0x01	; 1
 586:	df d1       	rcall	.+958    	; 0x946 <strcmp>
 588:	89 2b       	or	r24, r25
 58a:	19 f4       	brne	.+6      	; 0x592 <SPIprocessCommand+0x16>
		USART_Transmit('R');
 58c:	82 e5       	ldi	r24, 0x52	; 82
 58e:	0b d1       	rcall	.+534    	; 0x7a6 <USART_Transmit>
 590:	fe c0       	rjmp	.+508    	; 0x78e <SPIprocessCommand+0x212>
	
	/*else if(strcmp(command, "R1") == 0){                                          // ESP restart
		USART_Transmit('x');
	}*/
	
	else if (strcmp(command, "L1") == 0) {
 592:	6d e3       	ldi	r22, 0x3D	; 61
 594:	71 e0       	ldi	r23, 0x01	; 1
 596:	ce 01       	movw	r24, r28
 598:	d6 d1       	rcall	.+940    	; 0x946 <strcmp>
 59a:	89 2b       	or	r24, r25
 59c:	29 f5       	brne	.+74     	; 0x5e8 <SPIprocessCommand+0x6c>
		PORTD ^= (1 << PD6);
 59e:	92 b3       	in	r25, 0x12	; 18
 5a0:	80 e4       	ldi	r24, 0x40	; 64
 5a2:	89 27       	eor	r24, r25
 5a4:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF1);
 5a6:	e2 e6       	ldi	r30, 0x62	; 98
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	90 81       	ld	r25, Z
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	89 27       	eor	r24, r25
 5b0:	80 83       	st	Z, r24
		uint8_t newLightState_1 = (lastState.lightState_1 == 0) ? 1 : 0;
 5b2:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <lastState>
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	91 11       	cpse	r25, r1
 5ba:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_1 != lastState.lightState_1) {
 5bc:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <lastState>
 5c0:	89 17       	cp	r24, r25
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <SPIprocessCommand+0x4a>
 5c4:	e4 c0       	rjmp	.+456    	; 0x78e <SPIprocessCommand+0x212>
			lastState.lightState_1 = newLightState_1;
 5c6:	c7 e5       	ldi	r28, 0x57	; 87
 5c8:	d1 e0       	ldi	r29, 0x01	; 1
 5ca:	88 83       	st	Y, r24
			eeprom_write(light1_address, lastState.lightState_1);                 // Store the Light state 1 in EEPROM
 5cc:	68 81       	ld	r22, Y
 5ce:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <light1_address>
 5d2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <light1_address+0x1>
 5d6:	78 dd       	rcall	.-1296   	; 0xc8 <eeprom_write>
			USART_Transmit(lastState.lightState_1 == 1 ? 'A' : 'B');
 5d8:	88 81       	ld	r24, Y
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <SPIprocessCommand+0x66>
 5de:	81 e4       	ldi	r24, 0x41	; 65
 5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <SPIprocessCommand+0x68>
 5e2:	82 e4       	ldi	r24, 0x42	; 66
 5e4:	e0 d0       	rcall	.+448    	; 0x7a6 <USART_Transmit>
		}
	}
	else if (strcmp(command, "L2") == 0) {
 5e6:	d3 c0       	rjmp	.+422    	; 0x78e <SPIprocessCommand+0x212>
 5e8:	60 e4       	ldi	r22, 0x40	; 64
 5ea:	71 e0       	ldi	r23, 0x01	; 1
 5ec:	ce 01       	movw	r24, r28
 5ee:	ab d1       	rcall	.+854    	; 0x946 <strcmp>
 5f0:	89 2b       	or	r24, r25
 5f2:	29 f5       	brne	.+74     	; 0x63e <SPIprocessCommand+0xc2>
		PORTD ^= (1 << PD5);
 5f4:	92 b3       	in	r25, 0x12	; 18
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	89 27       	eor	r24, r25
 5fa:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF2);
 5fc:	e2 e6       	ldi	r30, 0x62	; 98
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	90 81       	ld	r25, Z
 602:	84 e0       	ldi	r24, 0x04	; 4
 604:	89 27       	eor	r24, r25
 606:	80 83       	st	Z, r24
		uint8_t newLightState_2 = (lastState.lightState_2 == 0) ? 1 : 0;
 608:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <lastState+0x1>
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	91 11       	cpse	r25, r1
 610:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_2 != lastState.lightState_2){
 612:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <lastState+0x1>
 616:	89 17       	cp	r24, r25
 618:	09 f4       	brne	.+2      	; 0x61c <SPIprocessCommand+0xa0>
 61a:	b9 c0       	rjmp	.+370    	; 0x78e <SPIprocessCommand+0x212>
			lastState.lightState_2 = newLightState_2;
 61c:	c7 e5       	ldi	r28, 0x57	; 87
 61e:	d1 e0       	ldi	r29, 0x01	; 1
			eeprom_write(light2_address, lastState.lightState_2);                 // Store the Light state 2 in EEPROM
 620:	89 83       	std	Y+1, r24	; 0x01
 622:	69 81       	ldd	r22, Y+1	; 0x01
 624:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
 628:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
			USART_Transmit(lastState.lightState_2 == 1 ? 'C' : 'D');
 62c:	4d dd       	rcall	.-1382   	; 0xc8 <eeprom_write>
 62e:	89 81       	ldd	r24, Y+1	; 0x01
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	11 f4       	brne	.+4      	; 0x638 <SPIprocessCommand+0xbc>
 634:	83 e4       	ldi	r24, 0x43	; 67
 636:	01 c0       	rjmp	.+2      	; 0x63a <SPIprocessCommand+0xbe>
 638:	84 e4       	ldi	r24, 0x44	; 68
 63a:	b5 d0       	rcall	.+362    	; 0x7a6 <USART_Transmit>
		}
	}
	else if (strcmp(command, "L3") == 0) {
 63c:	a8 c0       	rjmp	.+336    	; 0x78e <SPIprocessCommand+0x212>
 63e:	63 e4       	ldi	r22, 0x43	; 67
 640:	71 e0       	ldi	r23, 0x01	; 1
 642:	ce 01       	movw	r24, r28
 644:	80 d1       	rcall	.+768    	; 0x946 <strcmp>
 646:	89 2b       	or	r24, r25
 648:	21 f5       	brne	.+72     	; 0x692 <SPIprocessCommand+0x116>
		PORTD ^= (1 << PD7);
 64a:	82 b3       	in	r24, 0x12	; 18
 64c:	80 58       	subi	r24, 0x80	; 128
 64e:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF3);
 650:	e2 e6       	ldi	r30, 0x62	; 98
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	90 81       	ld	r25, Z
 656:	88 e0       	ldi	r24, 0x08	; 8
 658:	89 27       	eor	r24, r25
 65a:	80 83       	st	Z, r24
		uint8_t newLightState_3 = (lastState.lightState_3 == 0) ? 1 : 0;
 65c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <lastState+0x2>
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	91 11       	cpse	r25, r1
 664:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_3 != lastState.lightState_3){
 666:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <lastState+0x2>
 66a:	89 17       	cp	r24, r25
 66c:	09 f4       	brne	.+2      	; 0x670 <SPIprocessCommand+0xf4>
			lastState.lightState_3 = newLightState_3;
 66e:	8f c0       	rjmp	.+286    	; 0x78e <SPIprocessCommand+0x212>
 670:	c7 e5       	ldi	r28, 0x57	; 87
 672:	d1 e0       	ldi	r29, 0x01	; 1
			eeprom_write(light3_address, lastState.lightState_3);                  //Store the Light state 3 in EEPROM
 674:	8a 83       	std	Y+2, r24	; 0x02
 676:	6a 81       	ldd	r22, Y+2	; 0x02
 678:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
 67c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
			USART_Transmit(lastState.lightState_3 == 1 ? 'E' : 'F');
 680:	23 dd       	rcall	.-1466   	; 0xc8 <eeprom_write>
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	11 f4       	brne	.+4      	; 0x68c <SPIprocessCommand+0x110>
 688:	85 e4       	ldi	r24, 0x45	; 69
 68a:	01 c0       	rjmp	.+2      	; 0x68e <SPIprocessCommand+0x112>
 68c:	86 e4       	ldi	r24, 0x46	; 70
 68e:	8b d0       	rcall	.+278    	; 0x7a6 <USART_Transmit>
		}
	}
	else if (strcmp(command, "L4") == 0) {
 690:	7e c0       	rjmp	.+252    	; 0x78e <SPIprocessCommand+0x212>
 692:	66 e4       	ldi	r22, 0x46	; 70
 694:	71 e0       	ldi	r23, 0x01	; 1
 696:	ce 01       	movw	r24, r28
 698:	56 d1       	rcall	.+684    	; 0x946 <strcmp>
 69a:	89 2b       	or	r24, r25
 69c:	21 f5       	brne	.+72     	; 0x6e6 <SPIprocessCommand+0x16a>
		PORTD ^= (1 << PD4);
 69e:	92 b3       	in	r25, 0x12	; 18
 6a0:	80 e1       	ldi	r24, 0x10	; 16
 6a2:	98 27       	eor	r25, r24
 6a4:	92 bb       	out	0x12, r25	; 18
		PORTF ^= (1 << PF4);
 6a6:	e2 e6       	ldi	r30, 0x62	; 98
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	90 81       	ld	r25, Z
 6ac:	89 27       	eor	r24, r25
 6ae:	80 83       	st	Z, r24
		uint8_t newLightState_4 = (lastState.lightState_4 == 0) ? 1 : 0;
 6b0:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <lastState+0x3>
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	91 11       	cpse	r25, r1
 6b8:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_4 != lastState.lightState_4){
 6ba:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <lastState+0x3>
 6be:	89 17       	cp	r24, r25
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <SPIprocessCommand+0x148>
			lastState.lightState_4 = newLightState_4;
 6c2:	65 c0       	rjmp	.+202    	; 0x78e <SPIprocessCommand+0x212>
 6c4:	c7 e5       	ldi	r28, 0x57	; 87
 6c6:	d1 e0       	ldi	r29, 0x01	; 1
			eeprom_write(light4_address, lastState.lightState_4);                  // Store the Light state 4 in EEPROM
 6c8:	8b 83       	std	Y+3, r24	; 0x03
 6ca:	6b 81       	ldd	r22, Y+3	; 0x03
 6cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
 6d0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
			USART_Transmit(lastState.lightState_4 == 1 ? 'G' : 'H');
 6d4:	f9 dc       	rcall	.-1550   	; 0xc8 <eeprom_write>
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	11 f4       	brne	.+4      	; 0x6e0 <SPIprocessCommand+0x164>
 6dc:	87 e4       	ldi	r24, 0x47	; 71
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <SPIprocessCommand+0x166>
 6e0:	88 e4       	ldi	r24, 0x48	; 72
 6e2:	61 d0       	rcall	.+194    	; 0x7a6 <USART_Transmit>
		}
	}
	else if(strcmp(command, "L5") == 0){
 6e4:	54 c0       	rjmp	.+168    	; 0x78e <SPIprocessCommand+0x212>
 6e6:	69 e4       	ldi	r22, 0x49	; 73
 6e8:	71 e0       	ldi	r23, 0x01	; 1
 6ea:	ce 01       	movw	r24, r28
 6ec:	2c d1       	rcall	.+600    	; 0x946 <strcmp>
 6ee:	89 2b       	or	r24, r25
 6f0:	29 f5       	brne	.+74     	; 0x73c <SPIprocessCommand+0x1c0>
		PORTD ^= (1 << PD3);
 6f2:	92 b3       	in	r25, 0x12	; 18
 6f4:	88 e0       	ldi	r24, 0x08	; 8
 6f6:	89 27       	eor	r24, r25
 6f8:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF5);
 6fa:	e2 e6       	ldi	r30, 0x62	; 98
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	90 81       	ld	r25, Z
 700:	80 e2       	ldi	r24, 0x20	; 32
 702:	89 27       	eor	r24, r25
 704:	80 83       	st	Z, r24
		uint8_t newLightState_5 = (lastState.lightState_5 == 0) ? 1 : 0;
 706:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <lastState+0x4>
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	91 11       	cpse	r25, r1
		if(newLightState_5 != lastState.lightState_5){
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <lastState+0x4>
 714:	89 17       	cp	r24, r25
 716:	09 f4       	brne	.+2      	; 0x71a <SPIprocessCommand+0x19e>
			lastState.lightState_5 = newLightState_5;
 718:	3a c0       	rjmp	.+116    	; 0x78e <SPIprocessCommand+0x212>
 71a:	c7 e5       	ldi	r28, 0x57	; 87
			eeprom_write(light5_address, lastState.lightState_5);                  // Store the Light state 5 in EEPROM
 71c:	d1 e0       	ldi	r29, 0x01	; 1
 71e:	8c 83       	std	Y+4, r24	; 0x04
 720:	6c 81       	ldd	r22, Y+4	; 0x04
 722:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light5_address>
 726:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light5_address+0x1>
			USART_Transmit(lastState.lightState_5 == 1 ? 'I' : 'J');
 72a:	ce dc       	rcall	.-1636   	; 0xc8 <eeprom_write>
 72c:	8c 81       	ldd	r24, Y+4	; 0x04
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	11 f4       	brne	.+4      	; 0x736 <SPIprocessCommand+0x1ba>
 732:	89 e4       	ldi	r24, 0x49	; 73
 734:	01 c0       	rjmp	.+2      	; 0x738 <SPIprocessCommand+0x1bc>
 736:	8a e4       	ldi	r24, 0x4A	; 74
 738:	36 d0       	rcall	.+108    	; 0x7a6 <USART_Transmit>
		}
	}
	else if(strcmp(command, "L6") == 0){
 73a:	29 c0       	rjmp	.+82     	; 0x78e <SPIprocessCommand+0x212>
 73c:	6c e4       	ldi	r22, 0x4C	; 76
 73e:	71 e0       	ldi	r23, 0x01	; 1
 740:	ce 01       	movw	r24, r28
 742:	01 d1       	rcall	.+514    	; 0x946 <strcmp>
 744:	89 2b       	or	r24, r25
 746:	19 f5       	brne	.+70     	; 0x78e <SPIprocessCommand+0x212>
		PORTD ^= (1 << PD2);
 748:	92 b3       	in	r25, 0x12	; 18
 74a:	84 e0       	ldi	r24, 0x04	; 4
 74c:	89 27       	eor	r24, r25
 74e:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF6);
 750:	e2 e6       	ldi	r30, 0x62	; 98
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	90 81       	ld	r25, Z
 756:	80 e4       	ldi	r24, 0x40	; 64
 758:	89 27       	eor	r24, r25
		uint8_t newLightState_6 = (lastState.lightState_6 == 0) ? 1 : 0;
 75a:	80 83       	st	Z, r24
 75c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <lastState+0x5>
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	91 11       	cpse	r25, r1
		if(newLightState_6 != lastState.lightState_6){
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <lastState+0x5>
			lastState.lightState_6 = newLightState_6;
 76a:	89 17       	cp	r24, r25
 76c:	81 f0       	breq	.+32     	; 0x78e <SPIprocessCommand+0x212>
 76e:	c7 e5       	ldi	r28, 0x57	; 87
			eeprom_write(light6_address, lastState.lightState_6);                  // Store the Light state 6 in EEPROM
 770:	d1 e0       	ldi	r29, 0x01	; 1
 772:	8d 83       	std	Y+5, r24	; 0x05
 774:	6d 81       	ldd	r22, Y+5	; 0x05
 776:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 77a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			USART_Transmit(lastState.lightState_6 == 1 ? 'K' : 'L');
 77e:	a4 dc       	rcall	.-1720   	; 0xc8 <eeprom_write>
 780:	8d 81       	ldd	r24, Y+5	; 0x05
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	11 f4       	brne	.+4      	; 0x78a <SPIprocessCommand+0x20e>
 786:	8b e4       	ldi	r24, 0x4B	; 75
 788:	01 c0       	rjmp	.+2      	; 0x78c <SPIprocessCommand+0x210>
 78a:	8c e4       	ldi	r24, 0x4C	; 76
 78c:	0c d0       	rcall	.+24     	; 0x7a6 <USART_Transmit>
		}
	}
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <USART_Init>:

#include "uart.h"

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 794:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 798:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 79a:	88 e9       	ldi	r24, 0x98	; 152
 79c:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 79e:	8e e0       	ldi	r24, 0x0E	; 14
 7a0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 7a4:	08 95       	ret

000007a6 <USART_Transmit>:
}

void USART_Transmit(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
 7a6:	5d 9b       	sbis	0x0b, 5	; 11
 7a8:	fe cf       	rjmp	.-4      	; 0x7a6 <USART_Transmit>
	UDR0 = data;
 7aa:	8c b9       	out	0x0c, r24	; 12
 7ac:	08 95       	ret

000007ae <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
 7ae:	5f 9b       	sbis	0x0b, 7	; 11
 7b0:	fe cf       	rjmp	.-4      	; 0x7ae <USART_Receive>
	return UDR0;
 7b2:	8c b1       	in	r24, 0x0c	; 12
 7b4:	08 95       	ret

000007b6 <uartProcessCommand>:
 *  Author: kjeya
 */ 

#include "UARTdataProcess.h"

void uartProcessCommand(unsigned char receivedData){
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
	if (receivedData == 'L') {
 7ba:	8c 34       	cpi	r24, 0x4C	; 76
 7bc:	81 f4       	brne	.+32     	; 0x7de <uartProcessCommand+0x28>
		receivedData = USART_Receive();
 7be:	f7 df       	rcall	.-18     	; 0x7ae <USART_Receive>
		if (receivedData == '1') {
 7c0:	81 33       	cpi	r24, 0x31	; 49
			light1_ON();
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <uartProcessCommand+0x12>
 7c4:	d4 dc       	rcall	.-1624   	; 0x16e <light1_ON>
 7c6:	03 c0       	rjmp	.+6      	; 0x7ce <uartProcessCommand+0x18>
		} else if (receivedData == '0') {
 7c8:	80 33       	cpi	r24, 0x30	; 48
			light1_OFF();
 7ca:	09 f4       	brne	.+2      	; 0x7ce <uartProcessCommand+0x18>
 7cc:	dc dc       	rcall	.-1608   	; 0x186 <light1_OFF>
		}
		eeprom_write(light1_address, lastState.lightState_1);
 7ce:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <lastState>
 7d2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <light1_address>
 7d6:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <light1_address+0x1>
 7da:	76 dc       	rcall	.-1812   	; 0xc8 <eeprom_write>
	}
	else if (receivedData == 'M') {
 7dc:	b1 c0       	rjmp	.+354    	; 0x940 <uartProcessCommand+0x18a>
		receivedData = USART_Receive();
 7de:	8d 34       	cpi	r24, 0x4D	; 77
 7e0:	81 f4       	brne	.+32     	; 0x802 <uartProcessCommand+0x4c>
		if (receivedData == '1') {
 7e2:	e5 df       	rcall	.-54     	; 0x7ae <USART_Receive>
			light2_ON();
 7e4:	81 33       	cpi	r24, 0x31	; 49
 7e6:	11 f4       	brne	.+4      	; 0x7ec <uartProcessCommand+0x36>
 7e8:	d9 dc       	rcall	.-1614   	; 0x19c <light2_ON>
		} else if (receivedData == '0') {
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <uartProcessCommand+0x3c>
 7ec:	80 33       	cpi	r24, 0x30	; 48
			light2_OFF();
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <uartProcessCommand+0x3c>
		}
		eeprom_write(light2_address, lastState.lightState_2);
 7f0:	e1 dc       	rcall	.-1598   	; 0x1b4 <light2_OFF>
 7f2:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <lastState+0x1>
 7f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
 7fa:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
	}
	else if (receivedData == 'N') {
 7fe:	64 dc       	rcall	.-1848   	; 0xc8 <eeprom_write>
		receivedData = USART_Receive();
 800:	9f c0       	rjmp	.+318    	; 0x940 <uartProcessCommand+0x18a>
 802:	8e 34       	cpi	r24, 0x4E	; 78
		if (receivedData == '1') {
 804:	81 f4       	brne	.+32     	; 0x826 <uartProcessCommand+0x70>
 806:	d3 df       	rcall	.-90     	; 0x7ae <USART_Receive>
			light3_ON();
 808:	81 33       	cpi	r24, 0x31	; 49
 80a:	11 f4       	brne	.+4      	; 0x810 <uartProcessCommand+0x5a>
		} else if (receivedData == '0') {
 80c:	de dc       	rcall	.-1604   	; 0x1ca <light3_ON>
 80e:	03 c0       	rjmp	.+6      	; 0x816 <uartProcessCommand+0x60>
			light3_OFF();
 810:	80 33       	cpi	r24, 0x30	; 48
		}
		eeprom_write(light3_address, lastState.lightState_3);
 812:	09 f4       	brne	.+2      	; 0x816 <uartProcessCommand+0x60>
 814:	e6 dc       	rcall	.-1588   	; 0x1e2 <light3_OFF>
 816:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <lastState+0x2>
 81a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
 81e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
	}
	else if (receivedData == 'O') {
 822:	52 dc       	rcall	.-1884   	; 0xc8 <eeprom_write>
		receivedData = USART_Receive();
 824:	8d c0       	rjmp	.+282    	; 0x940 <uartProcessCommand+0x18a>
 826:	8f 34       	cpi	r24, 0x4F	; 79
		if (receivedData == '1') {
 828:	81 f4       	brne	.+32     	; 0x84a <uartProcessCommand+0x94>
			light4_ON();
 82a:	c1 df       	rcall	.-126    	; 0x7ae <USART_Receive>
 82c:	81 33       	cpi	r24, 0x31	; 49
		} else if (receivedData == '0') {
 82e:	11 f4       	brne	.+4      	; 0x834 <uartProcessCommand+0x7e>
 830:	e3 dc       	rcall	.-1594   	; 0x1f8 <light4_ON>
			light4_OFF();
 832:	03 c0       	rjmp	.+6      	; 0x83a <uartProcessCommand+0x84>
		}
		eeprom_write(light4_address, lastState.lightState_4);
 834:	80 33       	cpi	r24, 0x30	; 48
 836:	09 f4       	brne	.+2      	; 0x83a <uartProcessCommand+0x84>
 838:	eb dc       	rcall	.-1578   	; 0x210 <light4_OFF>
 83a:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <lastState+0x3>
 83e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
 842:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
	}
	else if (receivedData == 'P') {
		receivedData = USART_Receive();
 846:	40 dc       	rcall	.-1920   	; 0xc8 <eeprom_write>
 848:	7b c0       	rjmp	.+246    	; 0x940 <uartProcessCommand+0x18a>
		if (receivedData == '1') {
 84a:	80 35       	cpi	r24, 0x50	; 80
			light5_ON();
 84c:	81 f4       	brne	.+32     	; 0x86e <uartProcessCommand+0xb8>
 84e:	af df       	rcall	.-162    	; 0x7ae <USART_Receive>
		} else if (receivedData == '0') {
 850:	81 33       	cpi	r24, 0x31	; 49
 852:	11 f4       	brne	.+4      	; 0x858 <uartProcessCommand+0xa2>
			light5_OFF();
 854:	e8 dc       	rcall	.-1584   	; 0x226 <light5_ON>
		}
		eeprom_write(light5_address, lastState.lightState_5);
 856:	03 c0       	rjmp	.+6      	; 0x85e <uartProcessCommand+0xa8>
 858:	80 33       	cpi	r24, 0x30	; 48
 85a:	09 f4       	brne	.+2      	; 0x85e <uartProcessCommand+0xa8>
 85c:	f0 dc       	rcall	.-1568   	; 0x23e <light5_OFF>
 85e:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <lastState+0x4>
 862:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light5_address>
	}
	else if (receivedData == 'Q') {
 866:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light5_address+0x1>
		receivedData = USART_Receive();
 86a:	2e dc       	rcall	.-1956   	; 0xc8 <eeprom_write>
		if (receivedData == '1') {
 86c:	69 c0       	rjmp	.+210    	; 0x940 <uartProcessCommand+0x18a>
			light6_ON();
 86e:	81 35       	cpi	r24, 0x51	; 81
 870:	81 f4       	brne	.+32     	; 0x892 <uartProcessCommand+0xdc>
 872:	9d df       	rcall	.-198    	; 0x7ae <USART_Receive>
		} else if (receivedData == '0') {
 874:	81 33       	cpi	r24, 0x31	; 49
 876:	11 f4       	brne	.+4      	; 0x87c <uartProcessCommand+0xc6>
			light6_OFF();
 878:	ed dc       	rcall	.-1574   	; 0x254 <light6_ON>
		}
		eeprom_write(light6_address, lastState.lightState_6);
 87a:	03 c0       	rjmp	.+6      	; 0x882 <uartProcessCommand+0xcc>
 87c:	80 33       	cpi	r24, 0x30	; 48
 87e:	09 f4       	brne	.+2      	; 0x882 <uartProcessCommand+0xcc>
 880:	f5 dc       	rcall	.-1558   	; 0x26c <light6_OFF>
 882:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <lastState+0x5>
 886:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	else if(receivedData == 'Z'){
 88a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		receivedData = USART_Receive();
 88e:	1c dc       	rcall	.-1992   	; 0xc8 <eeprom_write>
 890:	57 c0       	rjmp	.+174    	; 0x940 <uartProcessCommand+0x18a>
		if(receivedData == '1'){
 892:	8a 35       	cpi	r24, 0x5A	; 90
 894:	09 f0       	breq	.+2      	; 0x898 <uartProcessCommand+0xe2>
			Total_ON();
 896:	54 c0       	rjmp	.+168    	; 0x940 <uartProcessCommand+0x18a>
			eeprom_write(light1_address, lastState.lightState_1);
 898:	8a df       	rcall	.-236    	; 0x7ae <USART_Receive>
 89a:	81 33       	cpi	r24, 0x31	; 49
 89c:	41 f5       	brne	.+80     	; 0x8ee <uartProcessCommand+0x138>
 89e:	f1 dc       	rcall	.-1566   	; 0x282 <Total_ON>
 8a0:	c7 e5       	ldi	r28, 0x57	; 87
 8a2:	d1 e0       	ldi	r29, 0x01	; 1
 8a4:	68 81       	ld	r22, Y
 8a6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <light1_address>
			eeprom_write(light2_address, lastState.lightState_2);
 8aa:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <light1_address+0x1>
 8ae:	0c dc       	rcall	.-2024   	; 0xc8 <eeprom_write>
 8b0:	69 81       	ldd	r22, Y+1	; 0x01
 8b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
			eeprom_write(light3_address, lastState.lightState_3);
 8b6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
 8ba:	06 dc       	rcall	.-2036   	; 0xc8 <eeprom_write>
 8bc:	6a 81       	ldd	r22, Y+2	; 0x02
 8be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
			eeprom_write(light4_address, lastState.lightState_4);
 8c2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
 8c6:	00 dc       	rcall	.-2048   	; 0xc8 <eeprom_write>
 8c8:	6b 81       	ldd	r22, Y+3	; 0x03
 8ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
			eeprom_write(light5_address, lastState.lightState_5);
 8ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
 8d2:	fa db       	rcall	.-2060   	; 0xc8 <eeprom_write>
 8d4:	6c 81       	ldd	r22, Y+4	; 0x04
 8d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light5_address>
			eeprom_write(light6_address, lastState.lightState_6);
 8da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light5_address+0x1>
 8de:	f4 db       	rcall	.-2072   	; 0xc8 <eeprom_write>
 8e0:	6d 81       	ldd	r22, Y+5	; 0x05
 8e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 8e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		}
		else if(receivedData == '0'){
 8ea:	ee db       	rcall	.-2084   	; 0xc8 <eeprom_write>
			Total_OFF();
 8ec:	29 c0       	rjmp	.+82     	; 0x940 <uartProcessCommand+0x18a>
			eeprom_write(light1_address, lastState.lightState_1);
 8ee:	80 33       	cpi	r24, 0x30	; 48
 8f0:	39 f5       	brne	.+78     	; 0x940 <uartProcessCommand+0x18a>
 8f2:	ce dc       	rcall	.-1636   	; 0x290 <Total_OFF>
 8f4:	c7 e5       	ldi	r28, 0x57	; 87
 8f6:	d1 e0       	ldi	r29, 0x01	; 1
 8f8:	68 81       	ld	r22, Y
 8fa:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <light1_address>
			eeprom_write(light2_address, lastState.lightState_2);
 8fe:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <light1_address+0x1>
 902:	e2 db       	rcall	.-2108   	; 0xc8 <eeprom_write>
 904:	69 81       	ldd	r22, Y+1	; 0x01
 906:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <light2_address>
 90a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <light2_address+0x1>
			eeprom_write(light3_address, lastState.lightState_3);
 90e:	dc db       	rcall	.-2120   	; 0xc8 <eeprom_write>
 910:	6a 81       	ldd	r22, Y+2	; 0x02
 912:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <light3_address>
 916:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <light3_address+0x1>
			eeprom_write(light4_address, lastState.lightState_4);
 91a:	d6 db       	rcall	.-2132   	; 0xc8 <eeprom_write>
 91c:	6b 81       	ldd	r22, Y+3	; 0x03
 91e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light4_address>
 922:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light4_address+0x1>
 926:	d0 db       	rcall	.-2144   	; 0xc8 <eeprom_write>
			eeprom_write(light5_address, lastState.lightState_5);
 928:	6c 81       	ldd	r22, Y+4	; 0x04
 92a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light5_address>
 92e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light5_address+0x1>
 932:	ca db       	rcall	.-2156   	; 0xc8 <eeprom_write>
 934:	6d 81       	ldd	r22, Y+5	; 0x05
			eeprom_write(light6_address, lastState.lightState_6);
 936:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 93a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 93e:	c4 db       	rcall	.-2168   	; 0xc8 <eeprom_write>
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
	}
	/*else if (receivedData == 'x'){
		wdt_enable(WDTO_15MS);
		while(1);
	}*/
}
 944:	08 95       	ret

00000946 <strcmp>:
 946:	fb 01       	movw	r30, r22
 948:	dc 01       	movw	r26, r24
 94a:	8d 91       	ld	r24, X+
 94c:	01 90       	ld	r0, Z+
 94e:	80 19       	sub	r24, r0
 950:	01 10       	cpse	r0, r1
 952:	d9 f3       	breq	.-10     	; 0x94a <strcmp+0x4>
 954:	99 0b       	sbc	r25, r25
 956:	08 95       	ret

00000958 <_exit>:
 958:	f8 94       	cli

0000095a <__stop_program>:
 95a:	ff cf       	rjmp	.-2      	; 0x95a <__stop_program>
