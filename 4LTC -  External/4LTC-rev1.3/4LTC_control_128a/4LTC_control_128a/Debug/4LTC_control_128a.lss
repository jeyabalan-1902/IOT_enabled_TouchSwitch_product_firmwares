
4LTC_control_128a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000008e8  0000097c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800136  00800136  000009b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a1c  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000daf  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f4e  00000000  00000000  000033c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00004318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088b  00000000  00000000  00004724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c0  00000000  00000000  00004faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000576f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	28 c1       	rjmp	.+592    	; 0x296 <__vector_17>
  46:	00 00       	nop
  48:	4e c1       	rjmp	.+668    	; 0x2e6 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ee       	ldi	r30, 0xE8	; 232
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 33       	cpi	r26, 0x36	; 54
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e3       	ldi	r26, 0x36	; 54
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 34       	cpi	r26, 0x4C	; 76
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8a d2       	rcall	.+1300   	; 0x5d8 <main>
  c4:	0f c4       	rjmp	.+2078   	; 0x8e4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <eeprom_write>:


#include "eeprom.h"
#include "main.h"

void eeprom_write(uint16_t address, uint8_t data) {
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	d8 2f       	mov	r29, r24
  d0:	19 2f       	mov	r17, r25
  d2:	c6 2f       	mov	r28, r22
	i2c_start();
  d4:	28 d0       	rcall	.+80     	; 0x126 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
  d6:	80 ea       	ldi	r24, 0xA0	; 160
  d8:	36 d0       	rcall	.+108    	; 0x146 <i2c_write>
	i2c_write((address >> 8) & 0xFF);
  da:	81 2f       	mov	r24, r17
  dc:	34 d0       	rcall	.+104    	; 0x146 <i2c_write>
	i2c_write(address & 0xFF);
  de:	8d 2f       	mov	r24, r29
	i2c_write(data);
  e0:	32 d0       	rcall	.+100    	; 0x146 <i2c_write>
  e2:	8c 2f       	mov	r24, r28
  e4:	30 d0       	rcall	.+96     	; 0x146 <i2c_write>
	i2c_stop();
  e6:	27 d0       	rcall	.+78     	; 0x136 <i2c_stop>
  e8:	df 91       	pop	r29
}
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	08 95       	ret

000000f0 <eeprom_read>:
  f0:	cf 93       	push	r28

uint8_t eeprom_read(uint16_t address) {
  f2:	df 93       	push	r29
  f4:	c8 2f       	mov	r28, r24
  f6:	d9 2f       	mov	r29, r25
	uint8_t data;
	i2c_start();
  f8:	16 d0       	rcall	.+44     	; 0x126 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	24 d0       	rcall	.+72     	; 0x146 <i2c_write>
	i2c_write((address >> 8) & 0xFF);
  fe:	8d 2f       	mov	r24, r29
 100:	22 d0       	rcall	.+68     	; 0x146 <i2c_write>
	i2c_write(address & 0xFF);
 102:	8c 2f       	mov	r24, r28
 104:	20 d0       	rcall	.+64     	; 0x146 <i2c_write>
	i2c_start();
 106:	0f d0       	rcall	.+30     	; 0x126 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 1);
 108:	81 ea       	ldi	r24, 0xA1	; 161
 10a:	1d d0       	rcall	.+58     	; 0x146 <i2c_write>
 10c:	26 d0       	rcall	.+76     	; 0x15a <i2c_read_nack>
	data = i2c_read_nack();
 10e:	c8 2f       	mov	r28, r24
 110:	12 d0       	rcall	.+36     	; 0x136 <i2c_stop>
 112:	8c 2f       	mov	r24, r28
	i2c_stop();
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
	return data;
 118:	08 95       	ret

0000011a <i2c_init>:
 11a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 11e:	88 e4       	ldi	r24, 0x48	; 72

uint8_t i2c_read_ack(void) {
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
	while (!(TWCR & (1<<TWINT)));
	return TWDR;
}
 120:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 124:	08 95       	ret

00000126 <i2c_start>:
 126:	84 ea       	ldi	r24, 0xA4	; 164
 128:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 12c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 130:	88 23       	and	r24, r24
 132:	e4 f7       	brge	.-8      	; 0x12c <i2c_start+0x6>
 134:	08 95       	ret

00000136 <i2c_stop>:
 136:	84 e9       	ldi	r24, 0x94	; 148
 138:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 13c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 140:	84 fd       	sbrc	r24, 4
 142:	fc cf       	rjmp	.-8      	; 0x13c <i2c_stop+0x6>
 144:	08 95       	ret

00000146 <i2c_write>:
 146:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 150:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 154:	88 23       	and	r24, r24
 156:	e4 f7       	brge	.-8      	; 0x150 <i2c_write+0xa>
 158:	08 95       	ret

0000015a <i2c_read_nack>:

uint8_t i2c_read_nack(void) {
	TWCR = (1<<TWEN) | (1<<TWINT);
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
 160:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 164:	88 23       	and	r24, r24
 166:	e4 f7       	brge	.-8      	; 0x160 <i2c_read_nack+0x6>
	return TWDR;
 168:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
 16c:	08 95       	ret

0000016e <light1_ON>:


#include "light.h"

void light1_ON(){
	PORTD |= (1 << PD6);
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	80 64       	ori	r24, 0x40	; 64
 172:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF3);
 174:	e2 e6       	ldi	r30, 0x62	; 98
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	80 83       	st	Z, r24
	lastState.lightState_1 = 1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <lastState>
 184:	08 95       	ret

00000186 <light1_OFF>:
}

void light1_OFF(){
	PORTD &= ~(1 << PD6);
 186:	82 b3       	in	r24, 0x12	; 18
 188:	8f 7b       	andi	r24, 0xBF	; 191
 18a:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF3);
 18c:	e2 e6       	ldi	r30, 0x62	; 98
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	87 7f       	andi	r24, 0xF7	; 247
 194:	80 83       	st	Z, r24
	lastState.lightState_1 = 0;
 196:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <lastState>
 19a:	08 95       	ret

0000019c <light2_ON>:
}

void light2_ON(){
	PORTD |= (1 << PD5);
 19c:	82 b3       	in	r24, 0x12	; 18
 19e:	80 62       	ori	r24, 0x20	; 32
 1a0:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF4);
 1a2:	e2 e6       	ldi	r30, 0x62	; 98
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	80 83       	st	Z, r24
	lastState.lightState_2 = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <lastState+0x1>
 1b2:	08 95       	ret

000001b4 <light2_OFF>:
}

void light2_OFF(){
	PORTD &= ~(1 << PD5);
 1b4:	82 b3       	in	r24, 0x12	; 18
 1b6:	8f 7d       	andi	r24, 0xDF	; 223
 1b8:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF4);
 1ba:	e2 e6       	ldi	r30, 0x62	; 98
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8f 7e       	andi	r24, 0xEF	; 239
 1c2:	80 83       	st	Z, r24
	lastState.lightState_2 = 0;
 1c4:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <lastState+0x1>
 1c8:	08 95       	ret

000001ca <light3_ON>:
}

void light3_ON(){
	PORTD |= (1 << PD7);
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF5);
 1d0:	e2 e6       	ldi	r30, 0x62	; 98
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	80 83       	st	Z, r24
	lastState.lightState_3 = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <lastState+0x2>
 1e0:	08 95       	ret

000001e2 <light3_OFF>:
}

void light3_OFF(){
	PORTD &= ~(1 << PD7);
 1e2:	82 b3       	in	r24, 0x12	; 18
 1e4:	8f 77       	andi	r24, 0x7F	; 127
 1e6:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF5);
 1e8:	e2 e6       	ldi	r30, 0x62	; 98
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 7d       	andi	r24, 0xDF	; 223
 1f0:	80 83       	st	Z, r24
	lastState.lightState_3 = 0;
 1f2:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <lastState+0x2>
 1f6:	08 95       	ret

000001f8 <light4_ON>:
}

void light4_ON(){
	PORTD |= (1 << PD4);
 1f8:	82 b3       	in	r24, 0x12	; 18
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF6);
 1fe:	e2 e6       	ldi	r30, 0x62	; 98
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 64       	ori	r24, 0x40	; 64
 206:	80 83       	st	Z, r24
	lastState.lightState_4 = 1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <lastState+0x3>
 20e:	08 95       	ret

00000210 <light4_OFF>:
}

void light4_OFF(){
	PORTD &= ~(1 << PD4);
 210:	82 b3       	in	r24, 0x12	; 18
 212:	8f 7e       	andi	r24, 0xEF	; 239
 214:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF6);
 216:	e2 e6       	ldi	r30, 0x62	; 98
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8f 7b       	andi	r24, 0xBF	; 191
 21e:	80 83       	st	Z, r24
	lastState.lightState_4 = 0;
 220:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <lastState+0x3>
 224:	08 95       	ret

00000226 <Total_ON>:
}

void Total_ON(){
	light1_ON();
 226:	a3 df       	rcall	.-186    	; 0x16e <light1_ON>
	light2_ON();
 228:	b9 df       	rcall	.-142    	; 0x19c <light2_ON>
	light3_ON();
 22a:	cf df       	rcall	.-98     	; 0x1ca <light3_ON>
 22c:	e5 cf       	rjmp	.-54     	; 0x1f8 <light4_ON>
	light4_ON();
 22e:	08 95       	ret

00000230 <Total_OFF>:
 230:	aa df       	rcall	.-172    	; 0x186 <light1_OFF>
 232:	c0 df       	rcall	.-128    	; 0x1b4 <light2_OFF>
}

void Total_OFF(){
	light1_OFF();
	light2_OFF();
	light3_OFF();
 234:	d6 df       	rcall	.-84     	; 0x1e2 <light3_OFF>
 236:	ec cf       	rjmp	.-40     	; 0x210 <light4_OFF>
	light4_OFF();
 238:	08 95       	ret

0000023a <add_event_to_process>:
 23a:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <event_process_head>
ISR(USART0_RX_vect){
	 add_event_to_process(EVENT_UART);
}

void trigger_anomaly_event() {
	add_event_to_process(EVENT_ANOMALY);
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ee 5b       	subi	r30, 0xBE	; 190
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	80 83       	st	Z, r24
 246:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <event_process_head>
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	6a e0       	ldi	r22, 0x0A	; 10
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	18 d3       	rcall	.+1584   	; 0x884 <__divmodhi4>
 254:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <event_process_head>
 258:	08 95       	ret

0000025a <calculateCRC>:
 25a:	dc 01       	movw	r26, r24
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	15 c0       	rjmp	.+42     	; 0x28e <calculateCRC+0x34>
 264:	fd 01       	movw	r30, r26
 266:	e4 0f       	add	r30, r20
 268:	f5 1f       	adc	r31, r21
 26a:	90 81       	ld	r25, Z
 26c:	89 27       	eor	r24, r25
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	0a c0       	rjmp	.+20     	; 0x286 <calculateCRC+0x2c>
 272:	88 23       	and	r24, r24
 274:	34 f4       	brge	.+12     	; 0x282 <calculateCRC+0x28>
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	97 e0       	ldi	r25, 0x07	; 7
 27e:	89 27       	eor	r24, r25
 280:	01 c0       	rjmp	.+2      	; 0x284 <calculateCRC+0x2a>
 282:	88 0f       	add	r24, r24
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	28 30       	cpi	r18, 0x08	; 8
 288:	a0 f3       	brcs	.-24     	; 0x272 <calculateCRC+0x18>
 28a:	4f 5f       	subi	r20, 0xFF	; 255
 28c:	5f 4f       	sbci	r21, 0xFF	; 255
 28e:	46 17       	cp	r20, r22
 290:	57 07       	cpc	r21, r23
 292:	40 f3       	brcs	.-48     	; 0x264 <calculateCRC+0xa>
 294:	08 95       	ret

00000296 <__vector_17>:
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	0b b6       	in	r0, 0x3b	; 59
 2a2:	0f 92       	push	r0
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	bd df       	rcall	.-134    	; 0x23a <add_event_to_process>
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0b be       	out	0x3b, r0	; 59
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_18>:
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	0b b6       	in	r0, 0x3b	; 59
 2f2:	0f 92       	push	r0
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	6f 93       	push	r22
 2fe:	7f 93       	push	r23
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
 304:	af 93       	push	r26
 306:	bf 93       	push	r27
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	95 df       	rcall	.-214    	; 0x23a <add_event_to_process>
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0b be       	out	0x3b, r0	; 59
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <handle_SPI_interrupt>:
}

void handle_SPI_interrupt(void){
	uint8_t receivedSPIData = SPDR;
 336:	9f b1       	in	r25, 0x0f	; 15
	static char receivedBytes[2];
	static uint8_t receivedCRC = 0;
	static uint8_t byteIndex = 0;

	if (byteIndex < 2) {
 338:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <byteIndex.2009>
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	48 f4       	brcc	.+18     	; 0x352 <handle_SPI_interrupt+0x1c>
		receivedBytes[byteIndex] = receivedSPIData;
 340:	e8 2f       	mov	r30, r24
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	e9 5c       	subi	r30, 0xC9	; 201
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	90 83       	st	Z, r25
		byteIndex++;
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <byteIndex.2009>
 350:	07 c0       	rjmp	.+14     	; 0x360 <handle_SPI_interrupt+0x2a>
		} else if (byteIndex == 2) {
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	29 f4       	brne	.+10     	; 0x360 <handle_SPI_interrupt+0x2a>
		receivedCRC = receivedSPIData;
 356:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <__data_end>
		byteIndex++;
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <byteIndex.2009>
	}

	if (byteIndex == 3) {
 360:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <byteIndex.2009>
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	81 f4       	brne	.+32     	; 0x388 <handle_SPI_interrupt+0x52>
		uint8_t calculatedCRC = calculateCRC((uint8_t *)receivedBytes, 2);
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	87 e3       	ldi	r24, 0x37	; 55
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	74 df       	rcall	.-280    	; 0x25a <calculateCRC>
		if (calculatedCRC == receivedCRC) {
 372:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <__data_end>
 376:	89 13       	cpse	r24, r25
 378:	05 c0       	rjmp	.+10     	; 0x384 <handle_SPI_interrupt+0x4e>
			receivedBytes[2] = '\0';
 37a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <byteIndex.2009>
			SPIprocessCommand(receivedBytes);
 37e:	87 e3       	ldi	r24, 0x37	; 55
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	59 d1       	rcall	.+690    	; 0x636 <SPIprocessCommand>
		}
		byteIndex = 0;
 384:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <byteIndex.2009>
	}
	SPSR |= (1 << SPIF);
 388:	8e b1       	in	r24, 0x0e	; 14
 38a:	80 68       	ori	r24, 0x80	; 128
 38c:	8e b9       	out	0x0e, r24	; 14
 38e:	08 95       	ret

00000390 <handle_UART_interrupt>:
}

void handle_UART_interrupt(void){
	unsigned char receivedData = UDR0;
 390:	8c b1       	in	r24, 0x0c	; 12
	UARTprocessCommand(receivedData);
 392:	20 c2       	rjmp	.+1088   	; 0x7d4 <UARTprocessCommand>
 394:	08 95       	ret

00000396 <handle_watchdog_event>:
}

void handle_watchdog_event() {
 396:	ff cf       	rjmp	.-2      	; 0x396 <handle_watchdog_event>

00000398 <setup>:
	while(1);  
}

void setup(void){
	i2c_init();
 398:	c0 de       	rcall	.-640    	; 0x11a <i2c_init>
	SPI_init_slave();
 39a:	43 d1       	rcall	.+646    	; 0x622 <SPI_init_slave>
 39c:	87 e6       	ldi	r24, 0x67	; 103
	USART_Init(MYUBRR);
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	05 d2       	rcall	.+1034   	; 0x7ac <USART_Init>
 3a2:	78 94       	sei
    sei();
 3a4:	81 b3       	in	r24, 0x11	; 17
	DDRD|=(1<<7)|(1<<5)|(1<<6)|(1<<4);
 3a6:	80 6f       	ori	r24, 0xF0	; 240
 3a8:	81 bb       	out	0x11, r24	; 17
 3aa:	e1 e6       	ldi	r30, 0x61	; 97
	DDRF|=(1<<4)|(1<<5)|(1<<6)|(1<<3)|(1<<2)|(1<<1)|(1<<0);
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	8f 67       	ori	r24, 0x7F	; 127
 3b2:	80 83       	st	Z, r24
 3b4:	08 95       	ret

000003b6 <writeStatesToEEPROM>:
 3b6:	0f 93       	push	r16
}

void writeStatesToEEPROM(void){
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	28 97       	sbiw	r28, 0x08	; 8
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
	uint16_t eeprom_addresses[] = {light1_address, light2_address, light3_address, light4_address};
 3ce:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <light1_address>
 3d2:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <light1_address+0x1>
 3d6:	9a 83       	std	Y+2, r25	; 0x02
 3d8:	89 83       	std	Y+1, r24	; 0x01
 3da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light2_address>
 3de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light2_address+0x1>
 3e2:	9c 83       	std	Y+4, r25	; 0x04
 3e4:	8b 83       	std	Y+3, r24	; 0x03
 3e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light3_address>
 3ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light3_address+0x1>
 3ee:	9e 83       	std	Y+6, r25	; 0x06
 3f0:	8d 83       	std	Y+5, r24	; 0x05
 3f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3fa:	98 87       	std	Y+8, r25	; 0x08
 3fc:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t *last_lights_state = (uint8_t*)&lastState;
	for (int i = 0; i < 4; i++) {
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	10 e0       	ldi	r17, 0x00	; 0
 402:	12 c0       	rjmp	.+36     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		eeprom_write(eeprom_addresses[i], last_lights_state[i]);
 404:	d8 01       	movw	r26, r16
 406:	a6 5c       	subi	r26, 0xC6	; 198
 408:	be 4f       	sbci	r27, 0xFE	; 254
 40a:	f8 01       	movw	r30, r16
 40c:	ee 0f       	add	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	8c 0f       	add	r24, r28
 416:	9d 1f       	adc	r25, r29
 418:	e8 0f       	add	r30, r24
 41a:	f9 1f       	adc	r31, r25
 41c:	6c 91       	ld	r22, X
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	52 de       	rcall	.-860    	; 0xc8 <eeprom_write>
}

void writeStatesToEEPROM(void){
	uint16_t eeprom_addresses[] = {light1_address, light2_address, light3_address, light4_address};
	uint8_t *last_lights_state = (uint8_t*)&lastState;
	for (int i = 0; i < 4; i++) {
 424:	0f 5f       	subi	r16, 0xFF	; 255
 426:	1f 4f       	sbci	r17, 0xFF	; 255
 428:	04 30       	cpi	r16, 0x04	; 4
 42a:	11 05       	cpc	r17, r1
 42c:	5c f3       	brlt	.-42     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		eeprom_write(eeprom_addresses[i], last_lights_state[i]);
	}
}
 42e:	28 96       	adiw	r28, 0x08	; 8
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	08 95       	ret

00000444 <readStatesFromEEPROM>:

void readStatesFromEEPROM(void){
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	28 97       	sbiw	r28, 0x08	; 8
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
	uint16_t addresses[] = {light1_address, light2_address, light3_address, light4_address};
 45e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <light1_address>
 462:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <light1_address+0x1>
 466:	9a 83       	std	Y+2, r25	; 0x02
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light2_address>
 46e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light2_address+0x1>
 472:	9c 83       	std	Y+4, r25	; 0x04
 474:	8b 83       	std	Y+3, r24	; 0x03
 476:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light3_address>
 47a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light3_address+0x1>
 47e:	9e 83       	std	Y+6, r25	; 0x06
 480:	8d 83       	std	Y+5, r24	; 0x05
 482:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 486:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 48a:	98 87       	std	Y+8, r25	; 0x08
 48c:	8f 83       	std	Y+7, r24	; 0x07
	volatile uint8_t *state_ptr = (uint8_t *)&lastState;
	for (uint8_t i = 0; i < sizeof(lastState); i++) {
 48e:	10 e0       	ldi	r17, 0x00	; 0
 490:	14 c0       	rjmp	.+40     	; 0x4ba <readStatesFromEEPROM+0x76>
		state_ptr[i] = eeprom_read(addresses[i]);
 492:	81 2f       	mov	r24, r17
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	9c 01       	movw	r18, r24
 498:	26 5c       	subi	r18, 0xC6	; 198
 49a:	3e 4f       	sbci	r19, 0xFE	; 254
 49c:	79 01       	movw	r14, r18
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	e1 e0       	ldi	r30, 0x01	; 1
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	ec 0f       	add	r30, r28
 4a8:	fd 1f       	adc	r31, r29
 4aa:	e8 0f       	add	r30, r24
 4ac:	f9 1f       	adc	r31, r25
 4ae:	80 81       	ld	r24, Z
 4b0:	91 81       	ldd	r25, Z+1	; 0x01
 4b2:	1e de       	rcall	.-964    	; 0xf0 <eeprom_read>
 4b4:	f7 01       	movw	r30, r14
 4b6:	80 83       	st	Z, r24
}

void readStatesFromEEPROM(void){
	uint16_t addresses[] = {light1_address, light2_address, light3_address, light4_address};
	volatile uint8_t *state_ptr = (uint8_t *)&lastState;
	for (uint8_t i = 0; i < sizeof(lastState); i++) {
 4b8:	1f 5f       	subi	r17, 0xFF	; 255
 4ba:	14 30       	cpi	r17, 0x04	; 4
 4bc:	50 f3       	brcs	.-44     	; 0x492 <readStatesFromEEPROM+0x4e>
		state_ptr[i] = eeprom_read(addresses[i]);
	}
}
 4be:	28 96       	adiw	r28, 0x08	; 8
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	08 95       	ret

000004d6 <retainLightStates>:

void retainLightStates(void){
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	a0 97       	sbiw	r28, 0x20	; 32
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
	pin_map_t lightMapping[4][2] = {
 4f2:	88 e1       	ldi	r24, 0x18	; 24
 4f4:	e6 e0       	ldi	r30, 0x06	; 6
 4f6:	f1 e0       	ldi	r31, 0x01	; 1
 4f8:	de 01       	movw	r26, r28
 4fa:	11 96       	adiw	r26, 0x01	; 1
 4fc:	01 90       	ld	r0, Z+
 4fe:	0d 92       	st	X+, r0
 500:	8a 95       	dec	r24
 502:	e1 f7       	brne	.-8      	; 0x4fc <retainLightStates+0x26>
		{{&PORTD, PD5}, {&PORTF, PF4}},  // light2state
		{{&PORTD, PD7}, {&PORTF, PF5}},  // light3state
		{{&PORTD, PD4}, {&PORTF, PF6}}   // light4state
	};

	volatile uint8_t *lightStates[4] = {&lastState.lightState_1, &lastState.lightState_2, &lastState.lightState_3, &lastState.lightState_4};
 504:	88 e0       	ldi	r24, 0x08	; 8
 506:	ee e1       	ldi	r30, 0x1E	; 30
 508:	f1 e0       	ldi	r31, 0x01	; 1
 50a:	de 01       	movw	r26, r28
 50c:	59 96       	adiw	r26, 0x19	; 25
 50e:	01 90       	ld	r0, Z+
 510:	0d 92       	st	X+, r0
 512:	8a 95       	dec	r24
 514:	e1 f7       	brne	.-8      	; 0x50e <retainLightStates+0x38>

	for(uint8_t i = 0; i < 4; i++) {
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	46 c0       	rjmp	.+140    	; 0x5a6 <retainLightStates+0xd0>
		if(*lightStates[i]) {
 51a:	82 2f       	mov	r24, r18
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	fc 01       	movw	r30, r24
 520:	ee 0f       	add	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	4c 0f       	add	r20, r28
 52a:	5d 1f       	adc	r21, r29
 52c:	e4 0f       	add	r30, r20
 52e:	f5 1f       	adc	r31, r21
 530:	00 8c       	ldd	r0, Z+24	; 0x18
 532:	f1 8d       	ldd	r31, Z+25	; 0x19
 534:	e0 2d       	mov	r30, r0
 536:	30 81       	ld	r19, Z
 538:	33 23       	and	r19, r19
 53a:	a1 f1       	breq	.+104    	; 0x5a4 <retainLightStates+0xce>
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
 53c:	7c 01       	movw	r14, r24
 53e:	ee 0c       	add	r14, r14
 540:	ff 1c       	adc	r15, r15
 542:	d7 01       	movw	r26, r14
 544:	a8 0f       	add	r26, r24
 546:	b9 1f       	adc	r27, r25
 548:	aa 0f       	add	r26, r26
 54a:	bb 1f       	adc	r27, r27
 54c:	a4 0f       	add	r26, r20
 54e:	b5 1f       	adc	r27, r21
 550:	0d 91       	ld	r16, X+
 552:	1c 91       	ld	r17, X
 554:	11 97       	sbiw	r26, 0x01	; 1
 556:	f8 01       	movw	r30, r16
 558:	30 81       	ld	r19, Z
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	50 e0       	ldi	r21, 0x00	; 0
 55e:	ba 01       	movw	r22, r20
 560:	12 96       	adiw	r26, 0x02	; 2
 562:	0c 90       	ld	r0, X
 564:	12 97       	sbiw	r26, 0x02	; 2
 566:	02 c0       	rjmp	.+4      	; 0x56c <retainLightStates+0x96>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	0a 94       	dec	r0
 56e:	e2 f7       	brpl	.-8      	; 0x568 <retainLightStates+0x92>
 570:	63 27       	eor	r22, r19
 572:	60 83       	st	Z, r22
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
 574:	13 96       	adiw	r26, 0x03	; 3
 576:	0d 90       	ld	r0, X+
 578:	bc 91       	ld	r27, X
 57a:	a0 2d       	mov	r26, r0
 57c:	3c 91       	ld	r19, X
 57e:	f7 01       	movw	r30, r14
 580:	e8 0f       	add	r30, r24
 582:	f9 1f       	adc	r31, r25
 584:	ee 0f       	add	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	8c 0f       	add	r24, r28
 58e:	9d 1f       	adc	r25, r29
 590:	e8 0f       	add	r30, r24
 592:	f9 1f       	adc	r31, r25
 594:	05 80       	ldd	r0, Z+5	; 0x05
 596:	02 c0       	rjmp	.+4      	; 0x59c <retainLightStates+0xc6>
 598:	44 0f       	add	r20, r20
 59a:	55 1f       	adc	r21, r21
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <retainLightStates+0xc2>
 5a0:	43 27       	eor	r20, r19
 5a2:	4c 93       	st	X, r20
		{{&PORTD, PD4}, {&PORTF, PF6}}   // light4state
	};

	volatile uint8_t *lightStates[4] = {&lastState.lightState_1, &lastState.lightState_2, &lastState.lightState_3, &lastState.lightState_4};

	for(uint8_t i = 0; i < 4; i++) {
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	24 30       	cpi	r18, 0x04	; 4
 5a8:	08 f4       	brcc	.+2      	; 0x5ac <retainLightStates+0xd6>
 5aa:	b7 cf       	rjmp	.-146    	; 0x51a <retainLightStates+0x44>
		if(*lightStates[i]) {
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
		}
	}
}
 5ac:	a0 96       	adiw	r28, 0x20	; 32
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	f8 94       	cli
 5b2:	de bf       	out	0x3e, r29	; 62
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	cd bf       	out	0x3d, r28	; 61
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	ff 90       	pop	r15
 5c2:	ef 90       	pop	r14
 5c4:	08 95       	ret

000005c6 <init_watchdog_timer>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 5c6:	9f e0       	ldi	r25, 0x0F	; 15
 5c8:	88 e1       	ldi	r24, 0x18	; 24
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	a8 95       	wdr
 5d0:	81 bd       	out	0x21, r24	; 33
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	91 bd       	out	0x21, r25	; 33
 5d6:	08 95       	ret

000005d8 <main>:
volatile states lastState = {0};
	
void add_event_to_process(event_t event);

int main(void) {
	setup();
 5d8:	df de       	rcall	.-578    	; 0x398 <setup>
	readStatesFromEEPROM();
 5da:	34 df       	rcall	.-408    	; 0x444 <readStatesFromEEPROM>
	retainLightStates();
 5dc:	7c df       	rcall	.-264    	; 0x4d6 <retainLightStates>
 5de:	f3 df       	rcall	.-26     	; 0x5c6 <init_watchdog_timer>
	init_watchdog_timer();
 5e0:	a8 95       	wdr
 5e2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <event_process_head>
	while (1) {
		wdt_reset();
		
		if (event_process_head != event_process_tail) {
 5e6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <event_process_tail>
 5ea:	98 17       	cp	r25, r24
 5ec:	c9 f3       	breq	.-14     	; 0x5e0 <main+0x8>
 5ee:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <event_process_tail>
			event_t current_event = event_process[event_process_tail].event;
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	ee 5b       	subi	r30, 0xBE	; 190
 5f6:	fe 4f       	sbci	r31, 0xFE	; 254
 5f8:	20 81       	ld	r18, Z
 5fa:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <event_process_tail>
			event_process_tail = (event_process_tail + 1) % MAX_EVENT_PROCESS_SIZE;
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	6a e0       	ldi	r22, 0x0A	; 10
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	3e d1       	rcall	.+636    	; 0x884 <__divmodhi4>
 608:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <event_process_tail>
 60c:	22 30       	cpi	r18, 0x02	; 2
 60e:	31 f0       	breq	.+12     	; 0x61c <main+0x44>

			switch (current_event) {
 610:	23 30       	cpi	r18, 0x03	; 3
 612:	31 f0       	breq	.+12     	; 0x620 <main+0x48>
 614:	21 30       	cpi	r18, 0x01	; 1
 616:	21 f7       	brne	.-56     	; 0x5e0 <main+0x8>
				case EVENT_SPI:
				handle_SPI_interrupt();
 618:	8e de       	rcall	.-740    	; 0x336 <handle_SPI_interrupt>
 61a:	e2 cf       	rjmp	.-60     	; 0x5e0 <main+0x8>
				break;
 61c:	b9 de       	rcall	.-654    	; 0x390 <handle_UART_interrupt>
				case EVENT_UART:
				handle_UART_interrupt();
 61e:	e0 cf       	rjmp	.-64     	; 0x5e0 <main+0x8>
 620:	ba de       	rcall	.-652    	; 0x396 <handle_watchdog_event>

00000622 <SPI_init_slave>:
 */ 

#include "spiDataProcess.h"

void SPI_init_slave() {
	DDRB |= (1 << DDB4);
 622:	87 b3       	in	r24, 0x17	; 23
 624:	80 61       	ori	r24, 0x10	; 16
 626:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1 << SPE);
 628:	8d b1       	in	r24, 0x0d	; 13
 62a:	80 64       	ori	r24, 0x40	; 64
 62c:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1 << SPIE);                       // Enable SPI interrupt
 62e:	8d b1       	in	r24, 0x0d	; 13
 630:	80 68       	ori	r24, 0x80	; 128
 632:	8d b9       	out	0x0d, r24	; 13
 634:	08 95       	ret

00000636 <SPIprocessCommand>:
}

void SPIprocessCommand(const char* command) {                                         //SPI Received Data
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	ec 01       	movw	r28, r24
	if (strcmp(command, "L1") == 0) {
 63c:	66 e2       	ldi	r22, 0x26	; 38
 63e:	71 e0       	ldi	r23, 0x01	; 1
 640:	48 d1       	rcall	.+656    	; 0x8d2 <strcmp>
 642:	89 2b       	or	r24, r25
 644:	31 f5       	brne	.+76     	; 0x692 <SPIprocessCommand+0x5c>
		PORTD ^= (1 << PD6);
 646:	92 b3       	in	r25, 0x12	; 18
 648:	80 e4       	ldi	r24, 0x40	; 64
 64a:	89 27       	eor	r24, r25
 64c:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF3);
 64e:	e2 e6       	ldi	r30, 0x62	; 98
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	90 81       	ld	r25, Z
 654:	88 e0       	ldi	r24, 0x08	; 8
 656:	89 27       	eor	r24, r25
 658:	80 83       	st	Z, r24
		uint8_t newLightState_1 = (lastState.lightState_1 == 0) ? 1 : 0;
 65a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <lastState>
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	91 11       	cpse	r25, r1
 662:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_1 != lastState.lightState_1) {
 664:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <lastState>
 668:	89 17       	cp	r24, r25
 66a:	09 f4       	brne	.+2      	; 0x66e <SPIprocessCommand+0x38>
 66c:	9c c0       	rjmp	.+312    	; 0x7a6 <SPIprocessCommand+0x170>
			lastState.lightState_1 = newLightState_1;
 66e:	ea e3       	ldi	r30, 0x3A	; 58
 670:	f1 e0       	ldi	r31, 0x01	; 1
 672:	80 83       	st	Z, r24
			USART_Transmit(lastState.lightState_1 == 1 ? 'A' : 'B');
 674:	80 81       	ld	r24, Z
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	11 f4       	brne	.+4      	; 0x67e <SPIprocessCommand+0x48>
 67a:	81 e4       	ldi	r24, 0x41	; 65
 67c:	01 c0       	rjmp	.+2      	; 0x680 <SPIprocessCommand+0x4a>
 67e:	82 e4       	ldi	r24, 0x42	; 66
 680:	a1 d0       	rcall	.+322    	; 0x7c4 <USART_Transmit>
			eeprom_write(light1_address, lastState.lightState_1);
 682:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <lastState>
 686:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <light1_address>
 68a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <light1_address+0x1>
 68e:	1c dd       	rcall	.-1480   	; 0xc8 <eeprom_write>
 690:	8a c0       	rjmp	.+276    	; 0x7a6 <SPIprocessCommand+0x170>
		}
	}
	else if (strcmp(command, "H1") == 0) {                                            //hard reset
 692:	69 e2       	ldi	r22, 0x29	; 41
 694:	71 e0       	ldi	r23, 0x01	; 1
 696:	ce 01       	movw	r24, r28
 698:	1c d1       	rcall	.+568    	; 0x8d2 <strcmp>
 69a:	89 2b       	or	r24, r25
		USART_Transmit('R');
 69c:	19 f4       	brne	.+6      	; 0x6a4 <SPIprocessCommand+0x6e>
 69e:	82 e5       	ldi	r24, 0x52	; 82
 6a0:	91 d0       	rcall	.+290    	; 0x7c4 <USART_Transmit>
	}
	else if (strcmp(command, "L2") == 0) {
 6a2:	81 c0       	rjmp	.+258    	; 0x7a6 <SPIprocessCommand+0x170>
 6a4:	6c e2       	ldi	r22, 0x2C	; 44
 6a6:	71 e0       	ldi	r23, 0x01	; 1
 6a8:	ce 01       	movw	r24, r28
 6aa:	13 d1       	rcall	.+550    	; 0x8d2 <strcmp>
 6ac:	89 2b       	or	r24, r25
 6ae:	31 f5       	brne	.+76     	; 0x6fc <SPIprocessCommand+0xc6>
		PORTD ^= (1 << PD5);
 6b0:	92 b3       	in	r25, 0x12	; 18
 6b2:	80 e2       	ldi	r24, 0x20	; 32
 6b4:	89 27       	eor	r24, r25
 6b6:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF4);
 6b8:	e2 e6       	ldi	r30, 0x62	; 98
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	90 81       	ld	r25, Z
 6be:	80 e1       	ldi	r24, 0x10	; 16
 6c0:	89 27       	eor	r24, r25
 6c2:	80 83       	st	Z, r24
		uint8_t newLightState_2 = (lastState.lightState_2 == 0) ? 1 : 0;
 6c4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <lastState+0x1>
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	91 11       	cpse	r25, r1
 6cc:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_2 != lastState.lightState_2){
 6ce:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <lastState+0x1>
 6d2:	89 17       	cp	r24, r25
 6d4:	09 f4       	brne	.+2      	; 0x6d8 <SPIprocessCommand+0xa2>
 6d6:	67 c0       	rjmp	.+206    	; 0x7a6 <SPIprocessCommand+0x170>
			lastState.lightState_2 = newLightState_2;
 6d8:	ea e3       	ldi	r30, 0x3A	; 58
 6da:	f1 e0       	ldi	r31, 0x01	; 1
 6dc:	81 83       	std	Z+1, r24	; 0x01
			USART_Transmit(lastState.lightState_2 == 1 ? 'C' : 'D');
 6de:	81 81       	ldd	r24, Z+1	; 0x01
 6e0:	81 30       	cpi	r24, 0x01	; 1
 6e2:	11 f4       	brne	.+4      	; 0x6e8 <SPIprocessCommand+0xb2>
 6e4:	83 e4       	ldi	r24, 0x43	; 67
 6e6:	01 c0       	rjmp	.+2      	; 0x6ea <SPIprocessCommand+0xb4>
 6e8:	84 e4       	ldi	r24, 0x44	; 68
			eeprom_write(light2_address, lastState.lightState_2);
 6ea:	6c d0       	rcall	.+216    	; 0x7c4 <USART_Transmit>
 6ec:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <lastState+0x1>
 6f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light2_address>
 6f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light2_address+0x1>
 6f8:	e7 dc       	rcall	.-1586   	; 0xc8 <eeprom_write>
		}
	}
	else if (strcmp(command, "L3") == 0) {
 6fa:	55 c0       	rjmp	.+170    	; 0x7a6 <SPIprocessCommand+0x170>
 6fc:	6f e2       	ldi	r22, 0x2F	; 47
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	ce 01       	movw	r24, r28
 702:	e7 d0       	rcall	.+462    	; 0x8d2 <strcmp>
 704:	89 2b       	or	r24, r25
 706:	29 f5       	brne	.+74     	; 0x752 <SPIprocessCommand+0x11c>
		PORTD ^= (1 << PD7);
 708:	82 b3       	in	r24, 0x12	; 18
 70a:	80 58       	subi	r24, 0x80	; 128
 70c:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF5);
 70e:	e2 e6       	ldi	r30, 0x62	; 98
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	90 81       	ld	r25, Z
 714:	80 e2       	ldi	r24, 0x20	; 32
 716:	89 27       	eor	r24, r25
 718:	80 83       	st	Z, r24
		uint8_t newLightState_3 = (lastState.lightState_3 == 0) ? 1 : 0;
 71a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <lastState+0x2>
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	91 11       	cpse	r25, r1
 722:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_3 != lastState.lightState_3){
 724:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <lastState+0x2>
 728:	89 17       	cp	r24, r25
 72a:	09 f4       	brne	.+2      	; 0x72e <SPIprocessCommand+0xf8>
 72c:	3c c0       	rjmp	.+120    	; 0x7a6 <SPIprocessCommand+0x170>
			lastState.lightState_3 = newLightState_3;
 72e:	ea e3       	ldi	r30, 0x3A	; 58
 730:	f1 e0       	ldi	r31, 0x01	; 1
			USART_Transmit(lastState.lightState_3 == 1 ? 'E' : 'F');
 732:	82 83       	std	Z+2, r24	; 0x02
 734:	82 81       	ldd	r24, Z+2	; 0x02
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	11 f4       	brne	.+4      	; 0x73e <SPIprocessCommand+0x108>
 73a:	85 e4       	ldi	r24, 0x45	; 69
 73c:	01 c0       	rjmp	.+2      	; 0x740 <SPIprocessCommand+0x10a>
 73e:	86 e4       	ldi	r24, 0x46	; 70
			eeprom_write(light3_address, lastState.lightState_3);
 740:	41 d0       	rcall	.+130    	; 0x7c4 <USART_Transmit>
 742:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <lastState+0x2>
 746:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light3_address>
 74a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light3_address+0x1>
 74e:	bc dc       	rcall	.-1672   	; 0xc8 <eeprom_write>
		}
	}
	else if (strcmp(command, "L4") == 0) {
 750:	2a c0       	rjmp	.+84     	; 0x7a6 <SPIprocessCommand+0x170>
 752:	62 e3       	ldi	r22, 0x32	; 50
 754:	71 e0       	ldi	r23, 0x01	; 1
 756:	ce 01       	movw	r24, r28
 758:	bc d0       	rcall	.+376    	; 0x8d2 <strcmp>
 75a:	89 2b       	or	r24, r25
 75c:	21 f5       	brne	.+72     	; 0x7a6 <SPIprocessCommand+0x170>
		PORTD ^= (1 << PD4);
 75e:	92 b3       	in	r25, 0x12	; 18
 760:	80 e1       	ldi	r24, 0x10	; 16
 762:	89 27       	eor	r24, r25
 764:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF6);
 766:	e2 e6       	ldi	r30, 0x62	; 98
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	90 81       	ld	r25, Z
 76c:	80 e4       	ldi	r24, 0x40	; 64
 76e:	89 27       	eor	r24, r25
 770:	80 83       	st	Z, r24
		uint8_t newLightState_4 = (lastState.lightState_4 == 0) ? 1 : 0;
 772:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <lastState+0x3>
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	91 11       	cpse	r25, r1
 77a:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_4 != lastState.lightState_4){
 77c:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <lastState+0x3>
 780:	89 17       	cp	r24, r25
			lastState.lightState_4 = newLightState_4;
 782:	89 f0       	breq	.+34     	; 0x7a6 <SPIprocessCommand+0x170>
 784:	ea e3       	ldi	r30, 0x3A	; 58
 786:	f1 e0       	ldi	r31, 0x01	; 1
			USART_Transmit(lastState.lightState_4 == 1 ? 'G' : 'H');
 788:	83 83       	std	Z+3, r24	; 0x03
 78a:	83 81       	ldd	r24, Z+3	; 0x03
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	11 f4       	brne	.+4      	; 0x794 <SPIprocessCommand+0x15e>
 790:	87 e4       	ldi	r24, 0x47	; 71
 792:	01 c0       	rjmp	.+2      	; 0x796 <SPIprocessCommand+0x160>
 794:	88 e4       	ldi	r24, 0x48	; 72
			eeprom_write(light4_address, lastState.lightState_4);
 796:	16 d0       	rcall	.+44     	; 0x7c4 <USART_Transmit>
 798:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <lastState+0x3>
 79c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7a4:	91 dc       	rcall	.-1758   	; 0xc8 <eeprom_write>
		}
	}
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	08 95       	ret

000007ac <USART_Init>:

#include "uart.h"

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 7ac:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 7b0:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 7b2:	88 e1       	ldi	r24, 0x18	; 24
 7b4:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1 << RXCIE0);
 7b6:	8a b1       	in	r24, 0x0a	; 10
 7b8:	80 68       	ori	r24, 0x80	; 128
 7ba:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 7bc:	8e e0       	ldi	r24, 0x0E	; 14
 7be:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 7c2:	08 95       	ret

000007c4 <USART_Transmit>:
}

void USART_Transmit(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
 7c4:	5d 9b       	sbis	0x0b, 5	; 11
 7c6:	fe cf       	rjmp	.-4      	; 0x7c4 <USART_Transmit>
	UDR0 = data;
 7c8:	8c b9       	out	0x0c, r24	; 12
 7ca:	08 95       	ret

000007cc <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
 7cc:	5f 9b       	sbis	0x0b, 7	; 11
 7ce:	fe cf       	rjmp	.-4      	; 0x7cc <USART_Receive>
	return UDR0;
 7d0:	8c b1       	in	r24, 0x0c	; 12
}
 7d2:	08 95       	ret

000007d4 <UARTprocessCommand>:
 *  Author: kjeya
 */ 

#include "uartDataProcess.h"

void UARTprocessCommand(unsigned char receivedData){
 7d4:	cf 93       	push	r28
 7d6:	c8 2f       	mov	r28, r24
	if (receivedData == 'L') {
 7d8:	8c 34       	cpi	r24, 0x4C	; 76
 7da:	81 f4       	brne	.+32     	; 0x7fc <UARTprocessCommand+0x28>
		receivedData = USART_Receive();
 7dc:	f7 df       	rcall	.-18     	; 0x7cc <USART_Receive>
 7de:	c8 2f       	mov	r28, r24
		if (receivedData == '1') {
 7e0:	81 33       	cpi	r24, 0x31	; 49
			light1_ON();
 7e2:	11 f4       	brne	.+4      	; 0x7e8 <UARTprocessCommand+0x14>
 7e4:	c4 dc       	rcall	.-1656   	; 0x16e <light1_ON>
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <UARTprocessCommand+0x1a>
			}else if (receivedData == '0') {
 7e8:	80 33       	cpi	r24, 0x30	; 48
			light1_OFF();
 7ea:	09 f4       	brne	.+2      	; 0x7ee <UARTprocessCommand+0x1a>
 7ec:	cc dc       	rcall	.-1640   	; 0x186 <light1_OFF>
		}
		eeprom_write(light1_address, lastState.lightState_1);
 7ee:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <lastState>
 7f2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <light1_address>
 7f6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <light1_address+0x1>
	}

	if (receivedData == 'M') {
 7fa:	66 dc       	rcall	.-1844   	; 0xc8 <eeprom_write>
 7fc:	cd 34       	cpi	r28, 0x4D	; 77
		receivedData = USART_Receive();
 7fe:	81 f4       	brne	.+32     	; 0x820 <UARTprocessCommand+0x4c>
 800:	e5 df       	rcall	.-54     	; 0x7cc <USART_Receive>
		if (receivedData == '1') {
 802:	c8 2f       	mov	r28, r24
			light2_ON();
 804:	81 33       	cpi	r24, 0x31	; 49
 806:	11 f4       	brne	.+4      	; 0x80c <UARTprocessCommand+0x38>
 808:	c9 dc       	rcall	.-1646   	; 0x19c <light2_ON>
			}else if (receivedData == '0') {
 80a:	03 c0       	rjmp	.+6      	; 0x812 <UARTprocessCommand+0x3e>
 80c:	80 33       	cpi	r24, 0x30	; 48
			light2_OFF();
 80e:	09 f4       	brne	.+2      	; 0x812 <UARTprocessCommand+0x3e>
		}
		eeprom_write(light2_address, lastState.lightState_2);
 810:	d1 dc       	rcall	.-1630   	; 0x1b4 <light2_OFF>
 812:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <lastState+0x1>
 816:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light2_address>
 81a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light2_address+0x1>
	}
	if (receivedData == 'N') {
 81e:	54 dc       	rcall	.-1880   	; 0xc8 <eeprom_write>
		receivedData = USART_Receive();
 820:	ce 34       	cpi	r28, 0x4E	; 78
 822:	81 f4       	brne	.+32     	; 0x844 <UARTprocessCommand+0x70>
		if (receivedData == '1') {
 824:	d3 df       	rcall	.-90     	; 0x7cc <USART_Receive>
 826:	c8 2f       	mov	r28, r24
			light3_ON();
 828:	81 33       	cpi	r24, 0x31	; 49
 82a:	11 f4       	brne	.+4      	; 0x830 <UARTprocessCommand+0x5c>
			}else if (receivedData == '0') {
 82c:	ce dc       	rcall	.-1636   	; 0x1ca <light3_ON>
 82e:	03 c0       	rjmp	.+6      	; 0x836 <UARTprocessCommand+0x62>
			light3_OFF();
 830:	80 33       	cpi	r24, 0x30	; 48
		}
		eeprom_write(light3_address, lastState.lightState_3);
 832:	09 f4       	brne	.+2      	; 0x836 <UARTprocessCommand+0x62>
 834:	d6 dc       	rcall	.-1620   	; 0x1e2 <light3_OFF>
 836:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <lastState+0x2>
 83a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light3_address>
	}

	if (receivedData == 'O') {
 83e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light3_address+0x1>
		receivedData = USART_Receive();
 842:	42 dc       	rcall	.-1916   	; 0xc8 <eeprom_write>
 844:	cf 34       	cpi	r28, 0x4F	; 79
 846:	81 f4       	brne	.+32     	; 0x868 <UARTprocessCommand+0x94>
		if (receivedData == '1') {
 848:	c1 df       	rcall	.-126    	; 0x7cc <USART_Receive>
			light4_ON();
 84a:	c8 2f       	mov	r28, r24
 84c:	81 33       	cpi	r24, 0x31	; 49
		}
		else if (receivedData == '0') {
 84e:	11 f4       	brne	.+4      	; 0x854 <UARTprocessCommand+0x80>
			light4_OFF();
 850:	d3 dc       	rcall	.-1626   	; 0x1f8 <light4_ON>
		}
		eeprom_write(light4_address, lastState.lightState_4);
 852:	03 c0       	rjmp	.+6      	; 0x85a <UARTprocessCommand+0x86>
 854:	80 33       	cpi	r24, 0x30	; 48
 856:	09 f4       	brne	.+2      	; 0x85a <UARTprocessCommand+0x86>
 858:	db dc       	rcall	.-1610   	; 0x210 <light4_OFF>
 85a:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <lastState+0x3>
	}
	
	if(receivedData == 'Z'){
 85e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		receivedData = USART_Receive();
 862:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		if(receivedData == '1'){
 866:	30 dc       	rcall	.-1952   	; 0xc8 <eeprom_write>
 868:	ca 35       	cpi	r28, 0x5A	; 90
			Total_ON();
 86a:	51 f4       	brne	.+20     	; 0x880 <UARTprocessCommand+0xac>
 86c:	af df       	rcall	.-162    	; 0x7cc <USART_Receive>
			writeStatesToEEPROM();
 86e:	81 33       	cpi	r24, 0x31	; 49
 870:	19 f4       	brne	.+6      	; 0x878 <UARTprocessCommand+0xa4>
 872:	d9 dc       	rcall	.-1614   	; 0x226 <Total_ON>
		}
		else if(receivedData == '0'){
 874:	a0 dd       	rcall	.-1216   	; 0x3b6 <writeStatesToEEPROM>
 876:	04 c0       	rjmp	.+8      	; 0x880 <UARTprocessCommand+0xac>
			Total_OFF();
 878:	80 33       	cpi	r24, 0x30	; 48
 87a:	11 f4       	brne	.+4      	; 0x880 <UARTprocessCommand+0xac>
			writeStatesToEEPROM();
 87c:	d9 dc       	rcall	.-1614   	; 0x230 <Total_OFF>
 87e:	9b dd       	rcall	.-1226   	; 0x3b6 <writeStatesToEEPROM>
		}
	}
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <__divmodhi4>:
 884:	97 fb       	bst	r25, 7
 886:	07 2e       	mov	r0, r23
 888:	16 f4       	brtc	.+4      	; 0x88e <__divmodhi4+0xa>
 88a:	00 94       	com	r0
 88c:	06 d0       	rcall	.+12     	; 0x89a <__divmodhi4_neg1>
 88e:	77 fd       	sbrc	r23, 7
 890:	08 d0       	rcall	.+16     	; 0x8a2 <__divmodhi4_neg2>
 892:	0b d0       	rcall	.+22     	; 0x8aa <__udivmodhi4>
 894:	07 fc       	sbrc	r0, 7
 896:	05 d0       	rcall	.+10     	; 0x8a2 <__divmodhi4_neg2>
 898:	3e f4       	brtc	.+14     	; 0x8a8 <__divmodhi4_exit>

0000089a <__divmodhi4_neg1>:
 89a:	90 95       	com	r25
 89c:	81 95       	neg	r24
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__divmodhi4_neg2>:
 8a2:	70 95       	com	r23
 8a4:	61 95       	neg	r22
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255

000008a8 <__divmodhi4_exit>:
 8a8:	08 95       	ret

000008aa <__udivmodhi4>:
 8aa:	aa 1b       	sub	r26, r26
 8ac:	bb 1b       	sub	r27, r27
 8ae:	51 e1       	ldi	r21, 0x11	; 17
 8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <__udivmodhi4_ep>

000008b2 <__udivmodhi4_loop>:
 8b2:	aa 1f       	adc	r26, r26
 8b4:	bb 1f       	adc	r27, r27
 8b6:	a6 17       	cp	r26, r22
 8b8:	b7 07       	cpc	r27, r23
 8ba:	10 f0       	brcs	.+4      	; 0x8c0 <__udivmodhi4_ep>
 8bc:	a6 1b       	sub	r26, r22
 8be:	b7 0b       	sbc	r27, r23

000008c0 <__udivmodhi4_ep>:
 8c0:	88 1f       	adc	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	5a 95       	dec	r21
 8c6:	a9 f7       	brne	.-22     	; 0x8b2 <__udivmodhi4_loop>
 8c8:	80 95       	com	r24
 8ca:	90 95       	com	r25
 8cc:	bc 01       	movw	r22, r24
 8ce:	cd 01       	movw	r24, r26
 8d0:	08 95       	ret

000008d2 <strcmp>:
 8d2:	fb 01       	movw	r30, r22
 8d4:	dc 01       	movw	r26, r24
 8d6:	8d 91       	ld	r24, X+
 8d8:	01 90       	ld	r0, Z+
 8da:	80 19       	sub	r24, r0
 8dc:	01 10       	cpse	r0, r1
 8de:	d9 f3       	breq	.-10     	; 0x8d6 <strcmp+0x4>
 8e0:	99 0b       	sbc	r25, r25
 8e2:	08 95       	ret

000008e4 <_exit>:
 8e4:	f8 94       	cli

000008e6 <__stop_program>:
 8e6:	ff cf       	rjmp	.-2      	; 0x8e6 <__stop_program>
