
4LT_Touch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00001cfe  00001d92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  0080016a  0080016a  00001dfc  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00001ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033cc  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000142b  00000000  00000000  0000558c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000182a  00000000  00000000  000069b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  000081e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001985  00000000  00000000  0000887c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dfa  00000000  00000000  0000a201  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000affb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_16>
      44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      4c:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_19>
      50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      9c:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__vector_39>
      a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d8 e0       	ldi	r29, 0x08	; 8
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	11 e0       	ldi	r17, 0x01	; 1
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	ee ef       	ldi	r30, 0xFE	; 254
      e0:	fc e1       	ldi	r31, 0x1C	; 28
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	aa 36       	cpi	r26, 0x6A	; 106
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
      ee:	21 e0       	ldi	r18, 0x01	; 1
      f0:	aa e6       	ldi	r26, 0x6A	; 106
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	a6 3d       	cpi	r26, 0xD6	; 214
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	0e 94 e5 02 	call	0x5ca	; 0x5ca <main>
     102:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <_exit>

00000106 <__bad_interrupt>:
     106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     10a:	0e 94 bf 04 	call	0x97e	; 0x97e <system_init>

	touch_init();
     10e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <touch_init>
     112:	08 95       	ret

00000114 <__vector_16>:

#include <driver_init.h>
#include <compiler.h>

ISR(TIMER0_COMPA_vect)
{
     114:	1f 92       	push	r1
     116:	0f 92       	push	r0
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	0f 92       	push	r0
     11c:	11 24       	eor	r1, r1
     11e:	2f 93       	push	r18
     120:	3f 93       	push	r19
     122:	4f 93       	push	r20
     124:	5f 93       	push	r21
     126:	6f 93       	push	r22
     128:	7f 93       	push	r23
     12a:	8f 93       	push	r24
     12c:	9f 93       	push	r25
     12e:	af 93       	push	r26
     130:	bf 93       	push	r27
     132:	ef 93       	push	r30
     134:	ff 93       	push	r31

	mega_touch_timer();
     136:	0e 94 25 04 	call	0x84a	; 0x84a <mega_touch_timer>

	/* Clear the timer flag */
	TIFR0 |= OCF0A;
     13a:	85 b3       	in	r24, 0x15	; 21
     13c:	81 60       	ori	r24, 0x01	; 1
     13e:	85 bb       	out	0x15, r24	; 21
}
     140:	ff 91       	pop	r31
     142:	ef 91       	pop	r30
     144:	bf 91       	pop	r27
     146:	af 91       	pop	r26
     148:	9f 91       	pop	r25
     14a:	8f 91       	pop	r24
     14c:	7f 91       	pop	r23
     14e:	6f 91       	pop	r22
     150:	5f 91       	pop	r21
     152:	4f 91       	pop	r20
     154:	3f 91       	pop	r19
     156:	2f 91       	pop	r18
     158:	0f 90       	pop	r0
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	0f 90       	pop	r0
     15e:	1f 90       	pop	r1
     160:	18 95       	reti

00000162 <calculateCRC>:

void timer1_init() {
	TCCR1B |= (1 << WGM12);
	OCR1A = 65535; 
	TIMSK1 |= (1 << OCIE1A);
	TCCR1B |= (1 << CS12) | (1 << CS10);
     162:	dc 01       	movw	r26, r24
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	15 c0       	rjmp	.+42     	; 0x196 <calculateCRC+0x34>
     16c:	fd 01       	movw	r30, r26
     16e:	e4 0f       	add	r30, r20
     170:	f5 1f       	adc	r31, r21
     172:	90 81       	ld	r25, Z
     174:	89 27       	eor	r24, r25
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	0a c0       	rjmp	.+20     	; 0x18e <calculateCRC+0x2c>
     17a:	88 23       	and	r24, r24
     17c:	34 f4       	brge	.+12     	; 0x18a <calculateCRC+0x28>
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	97 e0       	ldi	r25, 0x07	; 7
     186:	89 27       	eor	r24, r25
     188:	01 c0       	rjmp	.+2      	; 0x18c <calculateCRC+0x2a>
     18a:	88 0f       	add	r24, r24
     18c:	2f 5f       	subi	r18, 0xFF	; 255
     18e:	28 30       	cpi	r18, 0x08	; 8
     190:	a0 f3       	brcs	.-24     	; 0x17a <calculateCRC+0x18>
     192:	4f 5f       	subi	r20, 0xFF	; 255
     194:	5f 4f       	sbci	r21, 0xFF	; 255
     196:	46 17       	cp	r20, r22
     198:	57 07       	cpc	r21, r23
     19a:	40 f3       	brcs	.-48     	; 0x16c <calculateCRC+0xa>
     19c:	08 95       	ret

0000019e <SPI_MasterInit>:
}

void SPI_MasterInit() {
	DDRB |= (1 << SPI_SS_PIN) | (1 << SPI_MOSI_PIN) | (1 << SPI_SCK_PIN);
     19e:	84 b1       	in	r24, 0x04	; 4
     1a0:	80 6b       	ori	r24, 0xB0	; 176
     1a2:	84 b9       	out	0x04, r24	; 4
	SPCR0 = (1 << SPE) | (1 << MSTR) | (1 << SPR0); 
     1a4:	81 e5       	ldi	r24, 0x51	; 81
     1a6:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1 << SPI_SS_PIN);
     1a8:	85 b1       	in	r24, 0x05	; 5
     1aa:	80 61       	ori	r24, 0x10	; 16
     1ac:	85 b9       	out	0x05, r24	; 5
     1ae:	08 95       	ret

000001b0 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t data) {
	PORTB &= ~(1 << SPI_SS_PIN);
     1b0:	95 b1       	in	r25, 0x05	; 5
     1b2:	9f 7e       	andi	r25, 0xEF	; 239
     1b4:	95 b9       	out	0x05, r25	; 5
	SPDR0 = data;
     1b6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR0 & (1 << SPIF))) {
     1b8:	0d b4       	in	r0, 0x2d	; 45
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <SPI_MasterTransmit+0x8>
	}
	PORTB |= (1 << SPI_SS_PIN);
     1be:	85 b1       	in	r24, 0x05	; 5
     1c0:	80 61       	ori	r24, 0x10	; 16
     1c2:	85 b9       	out	0x05, r24	; 5
     1c4:	08 95       	ret

000001c6 <SPI_MasterTransmitString>:
		    touch_counter_4 = 0;
	    }
    }
}

void SPI_MasterTransmitString(const char* str) {
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	8c 01       	movw	r16, r24
	for (int i = 0; str[i] != '\0'; i++) {
     1d0:	c0 e0       	ldi	r28, 0x00	; 0
     1d2:	d0 e0       	ldi	r29, 0x00	; 0
     1d4:	0c c0       	rjmp	.+24     	; 0x1ee <SPI_MasterTransmitString+0x28>
		SPI_MasterTransmit(str[i]);
     1d6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1da:	2f ef       	ldi	r18, 0xFF	; 255
     1dc:	80 e7       	ldi	r24, 0x70	; 112
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	21 50       	subi	r18, 0x01	; 1
     1e2:	80 40       	sbci	r24, 0x00	; 0
     1e4:	90 40       	sbci	r25, 0x00	; 0
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <SPI_MasterTransmitString+0x1a>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <SPI_MasterTransmitString+0x24>
     1ea:	00 00       	nop
	    }
    }
}

void SPI_MasterTransmitString(const char* str) {
	for (int i = 0; str[i] != '\0'; i++) {
     1ec:	21 96       	adiw	r28, 0x01	; 1
     1ee:	f8 01       	movw	r30, r16
     1f0:	ec 0f       	add	r30, r28
     1f2:	fd 1f       	adc	r31, r29
     1f4:	80 81       	ld	r24, Z
     1f6:	81 11       	cpse	r24, r1
     1f8:	ee cf       	rjmp	.-36     	; 0x1d6 <SPI_MasterTransmitString+0x10>
		SPI_MasterTransmit(str[i]);
		_delay_ms(100);
	}
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	08 95       	ret

00000204 <touchpin1>:
			touch_counter_1 = 0;
		}
	}
}

void touchpin1() {
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <touchpin1+0x8>
     20c:	1f 92       	push	r1
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	previous_key_status_1 = key_status_1;
     212:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <key_status_1>
     216:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <previous_key_status_1>
	key_status_1 = get_sensor_state(0) & 0x80;
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <get_sensor_state>
     222:	80 78       	andi	r24, 0x80	; 128
     224:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <key_status_1>
	if (key_status_1 && !previous_key_status_1) {
     228:	88 23       	and	r24, r24
     22a:	59 f0       	breq	.+22     	; 0x242 <touchpin1+0x3e>
     22c:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <previous_key_status_1>
     230:	91 11       	cpse	r25, r1
     232:	07 c0       	rjmp	.+14     	; 0x242 <touchpin1+0x3e>
		second_counter = 0;
     234:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <second_counter+0x1>
     238:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <second_counter>
		touch_counter_1 = 1;  
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <touch_counter_1>
	}
	if (key_status_1) {
     242:	88 23       	and	r24, r24
     244:	51 f0       	breq	.+20     	; 0x25a <touchpin1+0x56>
		second_counter++;
     246:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <second_counter>
     24a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <second_counter+0x1>
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <second_counter+0x1>
     254:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <second_counter>
     258:	32 c0       	rjmp	.+100    	; 0x2be <touchpin1+0xba>
	}
	else if (!key_status_1 && previous_key_status_1) {
     25a:	81 11       	cpse	r24, r1
     25c:	30 c0       	rjmp	.+96     	; 0x2be <touchpin1+0xba>
     25e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <previous_key_status_1>
     262:	88 23       	and	r24, r24
     264:	61 f1       	breq	.+88     	; 0x2be <touchpin1+0xba>
		if (second_counter > 0 && second_counter < 200 && touch_counter_1 == 1) {
     266:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <second_counter>
     26a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <second_counter+0x1>
     26e:	89 2b       	or	r24, r25
     270:	01 f1       	breq	.+64     	; 0x2b2 <touchpin1+0xae>
     272:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <second_counter>
     276:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <second_counter+0x1>
     27a:	88 3c       	cpi	r24, 0xC8	; 200
     27c:	91 05       	cpc	r25, r1
     27e:	c8 f4       	brcc	.+50     	; 0x2b2 <touchpin1+0xae>
     280:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <touch_counter_1>
     284:	81 30       	cpi	r24, 0x01	; 1
     286:	a9 f4       	brne	.+42     	; 0x2b2 <touchpin1+0xae>
			uint8_t dataToSend[3] = {'L', '1'};
     288:	19 82       	std	Y+1, r1	; 0x01
     28a:	1a 82       	std	Y+2, r1	; 0x02
     28c:	1b 82       	std	Y+3, r1	; 0x03
     28e:	8c e4       	ldi	r24, 0x4C	; 76
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	81 e3       	ldi	r24, 0x31	; 49
     294:	8a 83       	std	Y+2, r24	; 0x02
			uint8_t crc = calculateCRC(dataToSend, 2);
     296:	62 e0       	ldi	r22, 0x02	; 2
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	ce 01       	movw	r24, r28
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	0e 94 b1 00 	call	0x162	; 0x162 <calculateCRC>
     2a2:	18 2f       	mov	r17, r24
			SPI_MasterTransmitString((const char*)dataToSend);                     // Transmits "L1"
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_MasterTransmitString>
			SPI_MasterTransmit(crc);
     2ac:	81 2f       	mov	r24, r17
     2ae:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_MasterTransmit>
		}
		second_counter = 0; 
     2b2:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <second_counter+0x1>
     2b6:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <second_counter>
		touch_counter_1 = 0; 
     2ba:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <touch_counter_1>
	}
}
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	08 95       	ret

000002cc <touchpin2>:

void touchpin2() {
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <touchpin2+0x8>
     2d4:	1f 92       	push	r1
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
	previous_key_status_2 = key_status_2;
     2da:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <key_status_2>
     2de:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <previous_key_status_2>
	key_status_2 = get_sensor_state(1) & 0x80;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <get_sensor_state>
     2ea:	80 78       	andi	r24, 0x80	; 128
     2ec:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <key_status_2>
	if (key_status_2&& !previous_key_status_2) {
     2f0:	88 23       	and	r24, r24
     2f2:	59 f0       	breq	.+22     	; 0x30a <touchpin2+0x3e>
     2f4:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <previous_key_status_2>
     2f8:	91 11       	cpse	r25, r1
     2fa:	07 c0       	rjmp	.+14     	; 0x30a <touchpin2+0x3e>
		second_counter_2 = 0;
     2fc:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <__data_end+0x1>
     300:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__data_end>
		touch_counter_2 = 1;
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <touch_counter_2>
	}
	if (key_status_2) {
     30a:	88 23       	and	r24, r24
     30c:	51 f0       	breq	.+20     	; 0x322 <touchpin2+0x56>
		second_counter_2++;
     30e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
     312:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     31c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
     320:	32 c0       	rjmp	.+100    	; 0x386 <touchpin2+0xba>
	}
	else if (!key_status_2 && previous_key_status_2) {
     322:	81 11       	cpse	r24, r1
     324:	30 c0       	rjmp	.+96     	; 0x386 <touchpin2+0xba>
     326:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <previous_key_status_2>
     32a:	88 23       	and	r24, r24
     32c:	61 f1       	breq	.+88     	; 0x386 <touchpin2+0xba>
		if (second_counter_2 > 0 && second_counter_2 < 200 && touch_counter_2 == 1) {
     32e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
     332:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
     336:	89 2b       	or	r24, r25
     338:	01 f1       	breq	.+64     	; 0x37a <touchpin2+0xae>
     33a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
     33e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
     342:	88 3c       	cpi	r24, 0xC8	; 200
     344:	91 05       	cpc	r25, r1
     346:	c8 f4       	brcc	.+50     	; 0x37a <touchpin2+0xae>
     348:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <touch_counter_2>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	a9 f4       	brne	.+42     	; 0x37a <touchpin2+0xae>
			uint8_t dataToSend[3] = {'L', '2'};
     350:	19 82       	std	Y+1, r1	; 0x01
     352:	1a 82       	std	Y+2, r1	; 0x02
     354:	1b 82       	std	Y+3, r1	; 0x03
     356:	8c e4       	ldi	r24, 0x4C	; 76
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	82 e3       	ldi	r24, 0x32	; 50
     35c:	8a 83       	std	Y+2, r24	; 0x02
			uint8_t crc = calculateCRC(dataToSend, 2);
     35e:	62 e0       	ldi	r22, 0x02	; 2
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	ce 01       	movw	r24, r28
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	0e 94 b1 00 	call	0x162	; 0x162 <calculateCRC>
     36a:	18 2f       	mov	r17, r24
			SPI_MasterTransmitString((const char*)dataToSend);                     // Transmits "L2"
     36c:	ce 01       	movw	r24, r28
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_MasterTransmitString>
			SPI_MasterTransmit(crc);
     374:	81 2f       	mov	r24, r17
     376:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_MasterTransmit>
		}
		second_counter_2 = 0;
     37a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <__data_end+0x1>
     37e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__data_end>
		touch_counter_2 = 0;
     382:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <touch_counter_2>
	}
}
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	08 95       	ret

00000394 <touchpin3>:

void touchpin3() {
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	00 d0       	rcall	.+0      	; 0x39c <touchpin3+0x8>
     39c:	1f 92       	push	r1
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
		previous_key_status_3 = key_status_3;
     3a2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <key_status_3>
     3a6:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <previous_key_status_3>
		key_status_3= get_sensor_state(2) & 0x80;
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 62 04 	call	0x8c4	; 0x8c4 <get_sensor_state>
     3b2:	80 78       	andi	r24, 0x80	; 128
     3b4:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <key_status_3>
		if (key_status_3 && !previous_key_status_3) {
     3b8:	88 23       	and	r24, r24
     3ba:	d1 f1       	breq	.+116    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     3bc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <previous_key_status_3>
     3c0:	81 11       	cpse	r24, r1
     3c2:	36 c0       	rjmp	.+108    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			touch_counter_3++;
     3c4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <touch_counter_3>
     3c8:	8f 5f       	subi	r24, 0xFF	; 255
     3ca:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <touch_counter_3>
			if (touch_counter_3 == 1) {
     3ce:	81 30       	cpi	r24, 0x01	; 1
     3d0:	b1 f4       	brne	.+44     	; 0x3fe <touchpin3+0x6a>
				uint8_t dataToSend[3] = {'L', '3'};
     3d2:	19 82       	std	Y+1, r1	; 0x01
     3d4:	1a 82       	std	Y+2, r1	; 0x02
     3d6:	1b 82       	std	Y+3, r1	; 0x03
     3d8:	8c e4       	ldi	r24, 0x4C	; 76
     3da:	89 83       	std	Y+1, r24	; 0x01
     3dc:	83 e3       	ldi	r24, 0x33	; 51
     3de:	8a 83       	std	Y+2, r24	; 0x02
				uint8_t crc = calculateCRC(dataToSend, 2);
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	0e 94 b1 00 	call	0x162	; 0x162 <calculateCRC>
     3ec:	18 2f       	mov	r17, r24
				SPI_MasterTransmitString((const char*)dataToSend);                     // Transmits "L3"
     3ee:	ce 01       	movw	r24, r28
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_MasterTransmitString>
				SPI_MasterTransmit(crc);
     3f6:	81 2f       	mov	r24, r17
     3f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_MasterTransmit>
     3fc:	19 c0       	rjmp	.+50     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			}
			else if (touch_counter_3 == 2) {
     3fe:	82 30       	cpi	r24, 0x02	; 2
     400:	b9 f4       	brne	.+46     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
				uint8_t dataToSend[3] = {'L', '3'};
     402:	19 82       	std	Y+1, r1	; 0x01
     404:	1a 82       	std	Y+2, r1	; 0x02
     406:	1b 82       	std	Y+3, r1	; 0x03
     408:	8c e4       	ldi	r24, 0x4C	; 76
     40a:	89 83       	std	Y+1, r24	; 0x01
     40c:	83 e3       	ldi	r24, 0x33	; 51
     40e:	8a 83       	std	Y+2, r24	; 0x02
				uint8_t crc = calculateCRC(dataToSend, 2);
     410:	62 e0       	ldi	r22, 0x02	; 2
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	ce 01       	movw	r24, r28
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	0e 94 b1 00 	call	0x162	; 0x162 <calculateCRC>
     41c:	18 2f       	mov	r17, r24
				SPI_MasterTransmitString((const char*)dataToSend);                     // Transmits "L3"
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_MasterTransmitString>
				SPI_MasterTransmit(crc);
     426:	81 2f       	mov	r24, r17
     428:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_MasterTransmit>
				touch_counter_3 = 0;
     42c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <touch_counter_3>
			}
        }
}
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	08 95       	ret

0000043e <touchpin4>:

void touchpin4() {
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	00 d0       	rcall	.+0      	; 0x446 <touchpin4+0x8>
     446:	1f 92       	push	r1
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
	previous_key_status_4 = key_status_4;
     44c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <key_status_4>
     450:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <previous_key_status_4>
	key_status_4 = get_sensor_state(3) & 0x80;
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 62 04 	call	0x8c4	; 0x8c4 <get_sensor_state>
     45c:	80 78       	andi	r24, 0x80	; 128
     45e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <key_status_4>
    if (key_status_4 && !previous_key_status_4) {
     462:	88 23       	and	r24, r24
     464:	d1 f1       	breq	.+116    	; 0x4da <touchpin4+0x9c>
     466:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <previous_key_status_4>
     46a:	81 11       	cpse	r24, r1
     46c:	36 c0       	rjmp	.+108    	; 0x4da <touchpin4+0x9c>
	    touch_counter_4++;
     46e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <touch_counter_4>
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <touch_counter_4>
	    if (touch_counter_4 == 1) {
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	b1 f4       	brne	.+44     	; 0x4a8 <touchpin4+0x6a>
		    uint8_t dataToSend[3] = {'L', '4'};
     47c:	19 82       	std	Y+1, r1	; 0x01
     47e:	1a 82       	std	Y+2, r1	; 0x02
     480:	1b 82       	std	Y+3, r1	; 0x03
     482:	8c e4       	ldi	r24, 0x4C	; 76
     484:	89 83       	std	Y+1, r24	; 0x01
     486:	84 e3       	ldi	r24, 0x34	; 52
     488:	8a 83       	std	Y+2, r24	; 0x02
		    uint8_t crc = calculateCRC(dataToSend, 2);
     48a:	62 e0       	ldi	r22, 0x02	; 2
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	ce 01       	movw	r24, r28
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	0e 94 b1 00 	call	0x162	; 0x162 <calculateCRC>
     496:	18 2f       	mov	r17, r24
		    SPI_MasterTransmitString((const char*)dataToSend);                     // Transmits "L4"
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_MasterTransmitString>
		    SPI_MasterTransmit(crc);
     4a0:	81 2f       	mov	r24, r17
     4a2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_MasterTransmit>
     4a6:	19 c0       	rjmp	.+50     	; 0x4da <touchpin4+0x9c>
	    }
	    else if (touch_counter_4 == 2) {
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	b9 f4       	brne	.+46     	; 0x4da <touchpin4+0x9c>
		    uint8_t dataToSend[3] = {'L', '4'};
     4ac:	19 82       	std	Y+1, r1	; 0x01
     4ae:	1a 82       	std	Y+2, r1	; 0x02
     4b0:	1b 82       	std	Y+3, r1	; 0x03
     4b2:	8c e4       	ldi	r24, 0x4C	; 76
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	84 e3       	ldi	r24, 0x34	; 52
     4b8:	8a 83       	std	Y+2, r24	; 0x02
		    uint8_t crc = calculateCRC(dataToSend, 2);
     4ba:	62 e0       	ldi	r22, 0x02	; 2
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	ce 01       	movw	r24, r28
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	0e 94 b1 00 	call	0x162	; 0x162 <calculateCRC>
     4c6:	18 2f       	mov	r17, r24
		    SPI_MasterTransmitString((const char*)dataToSend);                     // Transmits "L4"
     4c8:	ce 01       	movw	r24, r28
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_MasterTransmitString>
		    SPI_MasterTransmit(crc);
     4d0:	81 2f       	mov	r24, r17
     4d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_MasterTransmit>
		    touch_counter_4 = 0;
     4d6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <touch_counter_4>
	    }
    }
}
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	08 95       	ret

000004e8 <loop>:
	PORTB |= (1 << SPI_SS_PIN);
}



void loop() {
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <loop+0x8>
     4f0:	1f 92       	push	r1
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	touch_process();
     4f6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <touch_process>
	if (measurement_done_touch == 1) {
     4fa:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <measurement_done_touch>
     4fe:	81 30       	cpi	r24, 0x01	; 1
     500:	09 f0       	breq	.+2      	; 0x504 <loop+0x1c>
     502:	5c c0       	rjmp	.+184    	; 0x5bc <loop+0xd4>
		measurement_done_touch = 0;
     504:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <measurement_done_touch>
		touchpin1();
     508:	0e 94 02 01 	call	0x204	; 0x204 <touchpin1>
		touchpin2();
     50c:	0e 94 66 01 	call	0x2cc	; 0x2cc <touchpin2>
		touchpin3();
     510:	0e 94 ca 01 	call	0x394	; 0x394 <touchpin3>
		touchpin4();
     514:	0e 94 1f 02 	call	0x43e	; 0x43e <touchpin4>

		// Check if both touchpin1 (second_counter) and touchpin3 (second_counter_2) have been pressed for 10 seconds
		if (second_counter >= 200 && second_counter_2 >= 200) {
     518:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <second_counter>
     51c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <second_counter+0x1>
     520:	88 3c       	cpi	r24, 0xC8	; 200
     522:	91 05       	cpc	r25, r1
     524:	48 f1       	brcs	.+82     	; 0x578 <loop+0x90>
     526:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
     52a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
     52e:	88 3c       	cpi	r24, 0xC8	; 200
     530:	91 05       	cpc	r25, r1
     532:	10 f1       	brcs	.+68     	; 0x578 <loop+0x90>
			uint8_t dataToSend[3] = {'H', '1'};
     534:	19 82       	std	Y+1, r1	; 0x01
     536:	1a 82       	std	Y+2, r1	; 0x02
     538:	1b 82       	std	Y+3, r1	; 0x03
     53a:	88 e4       	ldi	r24, 0x48	; 72
     53c:	89 83       	std	Y+1, r24	; 0x01
     53e:	81 e3       	ldi	r24, 0x31	; 49
     540:	8a 83       	std	Y+2, r24	; 0x02
			uint8_t crc = calculateCRC(dataToSend, 2);
     542:	62 e0       	ldi	r22, 0x02	; 2
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	0e 94 b1 00 	call	0x162	; 0x162 <calculateCRC>
     54e:	18 2f       	mov	r17, r24
			SPI_MasterTransmitString((const char*)dataToSend);                     // Transmits "H1"
     550:	ce 01       	movw	r24, r28
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_MasterTransmitString>
			SPI_MasterTransmit(crc);
     558:	81 2f       	mov	r24, r17
     55a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_MasterTransmit>
			second_counter = 0;
     55e:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <second_counter+0x1>
     562:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <second_counter>
			second_counter_2 = 0;
     566:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <__data_end+0x1>
     56a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__data_end>
			touch_counter_1 = 0;
     56e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <touch_counter_1>
			touch_counter_2 = 0;
     572:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <touch_counter_2>
		touchpin2();
		touchpin3();
		touchpin4();

		// Check if both touchpin1 (second_counter) and touchpin3 (second_counter_2) have been pressed for 10 seconds
		if (second_counter >= 200 && second_counter_2 >= 200) {
     576:	22 c0       	rjmp	.+68     	; 0x5bc <loop+0xd4>
			second_counter = 0;
			second_counter_2 = 0;
			touch_counter_1 = 0;
			touch_counter_2 = 0;
		}
		else if(second_counter >= 200){
     578:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <second_counter>
     57c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <second_counter+0x1>
     580:	88 3c       	cpi	r24, 0xC8	; 200
     582:	91 05       	cpc	r25, r1
     584:	d8 f0       	brcs	.+54     	; 0x5bc <loop+0xd4>
			uint8_t dataToSend[3] = {'R', '1'};
     586:	19 82       	std	Y+1, r1	; 0x01
     588:	1a 82       	std	Y+2, r1	; 0x02
     58a:	1b 82       	std	Y+3, r1	; 0x03
     58c:	82 e5       	ldi	r24, 0x52	; 82
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	81 e3       	ldi	r24, 0x31	; 49
     592:	8a 83       	std	Y+2, r24	; 0x02
			uint8_t crc = calculateCRC(dataToSend, 2);
     594:	62 e0       	ldi	r22, 0x02	; 2
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	ce 01       	movw	r24, r28
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	0e 94 b1 00 	call	0x162	; 0x162 <calculateCRC>
     5a0:	18 2f       	mov	r17, r24
			SPI_MasterTransmitString((const char*)dataToSend);                     // Transmits "R1"
     5a2:	ce 01       	movw	r24, r28
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <SPI_MasterTransmitString>
			SPI_MasterTransmit(crc);
     5aa:	81 2f       	mov	r24, r17
     5ac:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_MasterTransmit>
			second_counter = 0;
     5b0:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <second_counter+0x1>
     5b4:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <second_counter>
			touch_counter_1 = 0;
     5b8:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <touch_counter_1>
		}
	}
}
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	08 95       	ret

000005ca <main>:
volatile uint16_t second_counter = 0;
volatile uint16_t second_counter_2 = 0;

int main(void)
{
	atmel_start_init();
     5ca:	0e 94 85 00 	call	0x10a	; 0x10a <atmel_start_init>
	cpu_irq_enable();
     5ce:	78 94       	sei
	SPI_MasterInit();
     5d0:	0e 94 cf 00 	call	0x19e	; 0x19e <SPI_MasterInit>
	sei();
     5d4:	78 94       	sei
	while (1)
	{
		loop();
     5d6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <loop>
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <main+0xc>

000005dc <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
     5dc:	08 95       	ret

000005de <datastreamer_transmit>:
Input  : Byte to be transmitted
Output : none
Notes  :
============================================================================*/
void datastreamer_transmit(uint8_t data_byte)
{
     5de:	cf 93       	push	r28
     5e0:	c8 2f       	mov	r28, r24
	while (!USART_is_tx_ready())
     5e2:	0e 94 77 05 	call	0xaee	; 0xaee <USART_is_tx_ready>
     5e6:	88 23       	and	r24, r24
     5e8:	e1 f3       	breq	.-8      	; 0x5e2 <datastreamer_transmit+0x4>
		;

	USART_write(data_byte);
     5ea:	8c 2f       	mov	r24, r28
     5ec:	0e 94 87 05 	call	0xb0e	; 0xb0e <USART_write>

	while (USART_is_tx_busy())
     5f0:	0e 94 7d 05 	call	0xafa	; 0xafa <USART_is_tx_busy>
     5f4:	81 11       	cpse	r24, r1
     5f6:	fc cf       	rjmp	.-8      	; 0x5f0 <datastreamer_transmit+0x12>
		;
}
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <datastreamer_output>:
Output : none
Notes  : The data visualizer scripts that are generated in the project should be
         set on the data visualizer software.
============================================================================*/
void datastreamer_output(void)
{
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <datastreamer_output+0xa>
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
	static uint8_t    sequence = 0u;
	uint16_t          u16temp_output;
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
     60a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sequence.2486>
     60e:	8f 70       	andi	r24, 0x0F	; 15
	if (send_header == 0) {
     610:	51 f0       	breq	.+20     	; 0x626 <datastreamer_output+0x2a>
     612:	0e c0       	rjmp	.+28     	; 0x630 <datastreamer_output+0x34>
		for (i = 0; i < sizeof(data); i++) {
			datastreamer_transmit(data[i]);
     614:	f8 01       	movw	r30, r16
     616:	e0 50       	subi	r30, 0x00	; 0
     618:	ff 4f       	sbci	r31, 0xFF	; 255
     61a:	80 81       	ld	r24, Z
     61c:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
     620:	0f 5f       	subi	r16, 0xFF	; 255
     622:	1f 4f       	sbci	r17, 0xFF	; 255
     624:	02 c0       	rjmp	.+4      	; 0x62a <datastreamer_output+0x2e>
     626:	00 e0       	ldi	r16, 0x00	; 0
     628:	10 e0       	ldi	r17, 0x00	; 0
     62a:	03 31       	cpi	r16, 0x13	; 19
     62c:	11 05       	cpc	r17, r1
     62e:	90 f3       	brcs	.-28     	; 0x614 <datastreamer_output+0x18>
			datastreamer_transmit(data[i]);
		}
	}

	// Start token
	datastreamer_transmit(0x55);
     630:	85 e5       	ldi	r24, 0x55	; 85
     632:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>

	// Frame Start
	datastreamer_transmit(sequence);
     636:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sequence.2486>
     63a:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     63e:	1a 82       	std	Y+2, r1	; 0x02
     640:	19 82       	std	Y+1, r1	; 0x01
     642:	4e c0       	rjmp	.+156    	; 0x6e0 <datastreamer_output+0xe4>

		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	0e 94 3c 04 	call	0x878	; 0x878 <get_sensor_node_signal>
     64c:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     64e:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     652:	81 2f       	mov	r24, r17
     654:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	0e 94 49 04 	call	0x892	; 0x892 <get_sensor_node_reference>
     660:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     662:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     666:	81 2f       	mov	r24, r17
     668:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	0e 94 3c 04 	call	0x878	; 0x878 <get_sensor_node_signal>
     674:	8c 01       	movw	r16, r24
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	0e 94 49 04 	call	0x892	; 0x892 <get_sensor_node_reference>
     67e:	08 1b       	sub	r16, r24
     680:	19 0b       	sbc	r17, r25
		u16temp_output = (uint16_t)(temp_int_calc);
		datastreamer_transmit((uint8_t)u16temp_output);
     682:	80 2f       	mov	r24, r16
     684:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     688:	81 2f       	mov	r24, r17
     68a:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	0e 94 55 04 	call	0x8aa	; 0x8aa <get_sensor_cc_val>
     696:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     698:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     69c:	81 2f       	mov	r24, r17
     69e:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>

		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <get_sensor_state>
		if (0u != (u8temp_output & 0x80)) {
     6aa:	88 23       	and	r24, r24
     6ac:	24 f4       	brge	.+8      	; 0x6b6 <datastreamer_output+0xba>
			datastreamer_transmit(0x01);
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <datastreamer_output+0xc0>
		} else {
			datastreamer_transmit(0x00);
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
		}

		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	fc 01       	movw	r30, r24
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	8e 0f       	add	r24, r30
     6c8:	9f 1f       	adc	r25, r31
     6ca:	fc 01       	movw	r30, r24
     6cc:	e5 5e       	subi	r30, 0xE5	; 229
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	80 81       	ld	r24, Z
     6d2:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
	// Start token
	datastreamer_transmit(0x55);

	// Frame Start
	datastreamer_transmit(sequence);
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	9a 83       	std	Y+2, r25	; 0x02
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	9a 81       	ldd	r25, Y+2	; 0x02
     6e4:	04 97       	sbiw	r24, 0x04	; 4
     6e6:	08 f4       	brcc	.+2      	; 0x6ea <datastreamer_output+0xee>
     6e8:	ad cf       	rjmp	.-166    	; 0x644 <datastreamer_output+0x48>
		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
	}

	/* Other Debug Parameters */
	datastreamer_transmit(module_error_code);
     6ea:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <module_error_code>
     6ee:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>

	/* Frame End */
	datastreamer_transmit(sequence++);
     6f2:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sequence.2486>
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	98 0f       	add	r25, r24
     6fa:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <sequence.2486>
     6fe:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>

	/* End token */
	datastreamer_transmit(~0x55);
     702:	8a ea       	ldi	r24, 0xAA	; 170
     704:	0e 94 ef 02 	call	0x5de	; 0x5de <datastreamer_transmit>
}
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	08 95       	ret

00000716 <touch_ptc_pin_config>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     716:	82 b1       	in	r24, 0x02	; 2
     718:	87 7f       	andi	r24, 0xF7	; 247
     71a:	82 b9       	out	0x02, r24	; 2
     71c:	82 b1       	in	r24, 0x02	; 2
     71e:	8f 7d       	andi	r24, 0xDF	; 223
     720:	82 b9       	out	0x02, r24	; 2
     722:	82 b1       	in	r24, 0x02	; 2
     724:	8b 7f       	andi	r24, 0xFB	; 251
     726:	82 b9       	out	0x02, r24	; 2
     728:	82 b1       	in	r24, 0x02	; 2
     72a:	8f 7b       	andi	r24, 0xBF	; 191
     72c:	82 b9       	out	0x02, r24	; 2
     72e:	08 95       	ret

00000730 <qtm_measure_complete_callback>:
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <touch_postprocess_request>
     736:	08 95       	ret

00000738 <touch_sensors_config>:
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	81 e3       	ldi	r24, 0x31	; 49
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 36 0c 	call	0x186c	; 0x186c <qtm_ptc_init_acquisition_module>
     744:	82 eb       	ldi	r24, 0xB2	; 178
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 c7 0c 	call	0x198e	; 0x198e <qtm_ptc_qtlib_assign_signal_memory>
     74c:	c0 e0       	ldi	r28, 0x00	; 0
     74e:	d0 e0       	ldi	r29, 0x00	; 0
     750:	0b c0       	rjmp	.+22     	; 0x768 <touch_sensors_config+0x30>
     752:	be 01       	movw	r22, r28
     754:	81 e3       	ldi	r24, 0x31	; 49
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <qtm_enable_sensor_node>
     75c:	be 01       	movw	r22, r28
     75e:	81 e3       	ldi	r24, 0x31	; 49
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <qtm_calibrate_sensor_node>
     766:	21 96       	adiw	r28, 0x01	; 1
     768:	c4 30       	cpi	r28, 0x04	; 4
     76a:	d1 05       	cpc	r29, r1
     76c:	90 f3       	brcs	.-28     	; 0x752 <touch_sensors_config+0x1a>
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	d0 e0       	ldi	r29, 0x00	; 0
     772:	0f c0       	rjmp	.+30     	; 0x792 <touch_sensors_config+0x5a>
     774:	ae 01       	movw	r20, r28
     776:	44 0f       	add	r20, r20
     778:	55 1f       	adc	r21, r21
     77a:	44 0f       	add	r20, r20
     77c:	55 1f       	adc	r21, r21
     77e:	4c 0f       	add	r20, r28
     780:	5d 1f       	adc	r21, r29
     782:	42 56       	subi	r20, 0x62	; 98
     784:	5e 4f       	sbci	r21, 0xFE	; 254
     786:	6c 2f       	mov	r22, r28
     788:	83 e1       	ldi	r24, 0x13	; 19
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 02 06 	call	0xc04	; 0xc04 <qtm_init_sensor_key>
     790:	21 96       	adiw	r28, 0x01	; 1
     792:	c4 30       	cpi	r28, 0x04	; 4
     794:	d1 05       	cpc	r29, r1
     796:	70 f3       	brcs	.-36     	; 0x774 <touch_sensors_config+0x3c>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <qtm_error_callback>:
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <module_error_code>
     7a6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <datastreamer_output>
     7aa:	08 95       	ret

000007ac <Timer_set_comp_a>:
     7ac:	87 bd       	out	0x27, r24	; 39
     7ae:	08 95       	ret

000007b0 <touch_init>:
     7b0:	88 e0       	ldi	r24, 0x08	; 8
     7b2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <Timer_set_comp_a>
     7b6:	e3 e6       	ldi	r30, 0x63	; 99
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	87 7f       	andi	r24, 0xF7	; 247
     7be:	80 83       	st	Z, r24
     7c0:	0e 94 8b 03 	call	0x716	; 0x716 <touch_ptc_pin_config>
     7c4:	0e 94 9c 03 	call	0x738	; 0x738 <touch_sensors_config>
     7c8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <datastreamer_init>
     7cc:	08 95       	ret

000007ce <touch_process>:
     7ce:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <time_to_measure_touch_flag>
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	51 f4       	brne	.+20     	; 0x7ea <touch_process+0x1c>
     7d6:	68 e9       	ldi	r22, 0x98	; 152
     7d8:	73 e0       	ldi	r23, 0x03	; 3
     7da:	81 e3       	ldi	r24, 0x31	; 49
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <qtm_ptc_start_measurement_seq>
     7e2:	81 11       	cpse	r24, r1
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <touch_process+0x1c>
     7e6:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <time_to_measure_touch_flag>
     7ea:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <touch_postprocess_request>
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	19 f5       	brne	.+70     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7f2:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <touch_postprocess_request>
     7f6:	0e 94 cf 0a 	call	0x159e	; 0x159e <qtm_acquisition_process>
     7fa:	81 11       	cpse	r24, r1
     7fc:	0a c0       	rjmp	.+20     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7fe:	83 e1       	ldi	r24, 0x13	; 19
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 21 06 	call	0xc42	; 0xc42 <qtm_key_sensors_process>
     806:	88 23       	and	r24, r24
     808:	39 f0       	breq	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <qtm_error_callback>
     810:	03 c0       	rjmp	.+6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <qtm_error_callback>
     818:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <qtlib_key_set1>
     81c:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <qtlib_key_set1+0x1>
     820:	80 81       	ld	r24, Z
     822:	88 23       	and	r24, r24
     824:	24 f4       	brge	.+8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <time_to_measure_touch_flag>
     82c:	03 c0       	rjmp	.+6      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <measurement_done_touch>
     834:	0e 94 fe 02 	call	0x5fc	; 0x5fc <datastreamer_output>
     838:	08 95       	ret

0000083a <touch_timer_handler>:
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <time_to_measure_touch_flag>
     840:	84 e1       	ldi	r24, 0x14	; 20
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 f7 05 	call	0xbee	; 0xbee <qtm_update_qtlib_timer>
     848:	08 95       	ret

0000084a <mega_touch_timer>:
     84a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <touch_time_counter.2335>
     84e:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <touch_time_counter.2335+0x1>
     852:	44 97       	sbiw	r24, 0x14	; 20
     854:	39 f4       	brne	.+14     	; 0x864 <mega_touch_timer+0x1a>
     856:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <touch_time_counter.2335+0x1>
     85a:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <touch_time_counter.2335>
     85e:	0e 94 1d 04 	call	0x83a	; 0x83a <touch_timer_handler>
     862:	08 95       	ret
     864:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <touch_time_counter.2335>
     868:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <touch_time_counter.2335+0x1>
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <touch_time_counter.2335+0x1>
     872:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <touch_time_counter.2335>
     876:	08 95       	ret

00000878 <get_sensor_node_signal>:
     878:	fc 01       	movw	r30, r24
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	8e 0f       	add	r24, r30
     884:	9f 1f       	adc	r25, r31
     886:	fc 01       	movw	r30, r24
     888:	e2 56       	subi	r30, 0x62	; 98
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	81 81       	ldd	r24, Z+1	; 0x01
     88e:	92 81       	ldd	r25, Z+2	; 0x02
     890:	08 95       	ret

00000892 <get_sensor_node_reference>:
     892:	fc 01       	movw	r30, r24
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e8 0f       	add	r30, r24
     89a:	f9 1f       	adc	r31, r25
     89c:	ee 0f       	add	r30, r30
     89e:	ff 1f       	adc	r31, r31
     8a0:	e6 54       	subi	r30, 0x46	; 70
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	84 81       	ldd	r24, Z+4	; 0x04
     8a6:	95 81       	ldd	r25, Z+5	; 0x05
     8a8:	08 95       	ret

000008aa <get_sensor_cc_val>:
     8aa:	fc 01       	movw	r30, r24
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	8e 0f       	add	r24, r30
     8b6:	9f 1f       	adc	r25, r31
     8b8:	fc 01       	movw	r30, r24
     8ba:	e2 56       	subi	r30, 0x62	; 98
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	83 81       	ldd	r24, Z+3	; 0x03
     8c0:	94 81       	ldd	r25, Z+4	; 0x04
     8c2:	08 95       	ret

000008c4 <get_sensor_state>:
     8c4:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <qtlib_key_set1+0x4>
     8c8:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <qtlib_key_set1+0x5>
     8cc:	9c 01       	movw	r18, r24
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	82 0f       	add	r24, r18
     8d4:	93 1f       	adc	r25, r19
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	e8 0f       	add	r30, r24
     8dc:	f9 1f       	adc	r31, r25
     8de:	80 81       	ld	r24, Z
     8e0:	08 95       	ret

000008e2 <__vector_39>:
Input  : none
Output : none
Notes  : none
============================================================================*/
ISR(PTC_EOC_vect)
{
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
	qtm_m324pb_ptc_handler_eoc();
     904:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <qtm_m324pb_ptc_handler_eoc>
}
     908:	ff 91       	pop	r31
     90a:	ef 91       	pop	r30
     90c:	bf 91       	pop	r27
     90e:	af 91       	pop	r26
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	7f 91       	pop	r23
     916:	6f 91       	pop	r22
     918:	5f 91       	pop	r21
     91a:	4f 91       	pop	r20
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <SPI_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
     92a:	84 b1       	in	r24, 0x04	; 4
     92c:	8f 7b       	andi	r24, 0xBF	; 191
     92e:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
     930:	85 b1       	in	r24, 0x05	; 5
     932:	8f 7b       	andi	r24, 0xBF	; 191
     934:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
     936:	84 b1       	in	r24, 0x04	; 4
     938:	80 62       	ori	r24, 0x20	; 32
     93a:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     93c:	85 b1       	in	r24, 0x05	; 5
     93e:	8f 7d       	andi	r24, 0xDF	; 223
     940:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
     942:	84 b1       	in	r24, 0x04	; 4
     944:	80 68       	ori	r24, 0x80	; 128
     946:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     948:	85 b1       	in	r24, 0x05	; 5
     94a:	8f 77       	andi	r24, 0x7F	; 127
     94c:	85 b9       	out	0x05, r24	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
     94e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <SPI_0_init>
     952:	08 95       	ret

00000954 <Timer_initialization>:
}

void Timer_initialization(void)
{

	Timer_init();
     954:	0e 94 59 05 	call	0xab2	; 0xab2 <Timer_init>
     958:	08 95       	ret

0000095a <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     95a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <TIMER_0_init>
     95e:	08 95       	ret

00000960 <USART_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     960:	8a b1       	in	r24, 0x0a	; 10
     962:	8e 7f       	andi	r24, 0xFE	; 254
     964:	8a b9       	out	0x0a, r24	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     966:	8b b1       	in	r24, 0x0b	; 11
     968:	8e 7f       	andi	r24, 0xFE	; 254
     96a:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     96c:	8a b1       	in	r24, 0x0a	; 10
     96e:	82 60       	ori	r24, 0x02	; 2
     970:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
     972:	8b b1       	in	r24, 0x0b	; 11
     974:	8d 7f       	andi	r24, 0xFD	; 253
     976:	8b b9       	out	0x0b, r24	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_init();
     978:	0e 94 66 05 	call	0xacc	; 0xacc <USART_init>
     97c:	08 95       	ret

0000097e <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTIM4) | (1 << PRTIM3);
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
	       | (1 << PRADC) | (1 << PRSPI0);

	PRR2 = (1 << PRUSART2) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTWI1);
     98a:	9f e0       	ldi	r25, 0x0F	; 15
     98c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f8063>
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
     990:	91 b1       	in	r25, 0x01	; 1
     992:	11 b8       	out	0x01, r1	; 1

		PORTA |= mask;
     994:	92 b1       	in	r25, 0x02	; 2
     996:	82 b9       	out	0x02, r24	; 2
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     998:	94 b1       	in	r25, 0x04	; 4
     99a:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
     99c:	95 b1       	in	r25, 0x05	; 5
     99e:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     9a0:	97 b1       	in	r25, 0x07	; 7
     9a2:	17 b8       	out	0x07, r1	; 7

		PORTC |= mask;
     9a4:	98 b1       	in	r25, 0x08	; 8
     9a6:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
     9a8:	9a b1       	in	r25, 0x0a	; 10
     9aa:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
     9ac:	9b b1       	in	r25, 0x0b	; 11
     9ae:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
     9b0:	8d b1       	in	r24, 0x0d	; 13
     9b2:	80 78       	andi	r24, 0x80	; 128
     9b4:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
     9b6:	8e b1       	in	r24, 0x0e	; 14
     9b8:	8f 67       	ori	r24, 0x7F	; 127
     9ba:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	60 e8       	ldi	r22, 0x80	; 128
     9c0:	81 e6       	ldi	r24, 0x61	; 97
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
     9c8:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
     9ca:	15 be       	out	0x35, r1	; 53

	ENABLE_INTERRUPTS();
     9cc:	78 94       	sei
{
	mcu_init();

	sysctrl_init();

	SPI_0_initialization();
     9ce:	0e 94 95 04 	call	0x92a	; 0x92a <SPI_0_initialization>

	Timer_initialization();
     9d2:	0e 94 aa 04 	call	0x954	; 0x954 <Timer_initialization>

	TIMER_0_initialization();
     9d6:	0e 94 ad 04 	call	0x95a	; 0x95a <TIMER_0_initialization>

	USART_initialization();
     9da:	0e 94 b0 04 	call	0x960	; 0x960 <USART_initialization>
     9de:	08 95       	ret

000009e0 <protected_write_io>:
     9e0:	2f b7       	in	r18, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	fc 01       	movw	r30, r24
     9e6:	60 83       	st	Z, r22
     9e8:	40 83       	st	Z, r20
     9ea:	2f bf       	out	0x3f, r18	; 63
     9ec:	08 95       	ret

000009ee <SPI_0_init>:
     9ee:	e4 e6       	ldi	r30, 0x64	; 100
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	8b 7f       	andi	r24, 0xFB	; 251
     9f6:	80 83       	st	Z, r24
     9f8:	80 ed       	ldi	r24, 0xD0	; 208
     9fa:	8c bd       	out	0x2c, r24	; 44
     9fc:	e5 e7       	ldi	r30, 0x75	; 117
     9fe:	f1 e0       	ldi	r31, 0x01	; 1
     a00:	10 82       	st	Z, r1
     a02:	16 82       	std	Z+6, r1	; 0x06
     a04:	15 82       	std	Z+5, r1	; 0x05
     a06:	08 95       	ret

00000a08 <__vector_19>:
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	2f 93       	push	r18
     a14:	3f 93       	push	r19
     a16:	4f 93       	push	r20
     a18:	5f 93       	push	r21
     a1a:	6f 93       	push	r22
     a1c:	7f 93       	push	r23
     a1e:	8f 93       	push	r24
     a20:	9f 93       	push	r25
     a22:	af 93       	push	r26
     a24:	bf 93       	push	r27
     a26:	ef 93       	push	r30
     a28:	ff 93       	push	r31
     a2a:	9e b5       	in	r25, 0x2e	; 46
     a2c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <SPI_0_desc+0x4>
     a30:	82 30       	cpi	r24, 0x02	; 2
     a32:	29 f0       	breq	.+10     	; 0xa3e <__vector_19+0x36>
     a34:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <SPI_0_desc+0x1>
     a38:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <SPI_0_desc+0x2>
     a3c:	90 83       	st	Z, r25
     a3e:	e5 e7       	ldi	r30, 0x75	; 117
     a40:	f1 e0       	ldi	r31, 0x01	; 1
     a42:	a1 81       	ldd	r26, Z+1	; 0x01
     a44:	b2 81       	ldd	r27, Z+2	; 0x02
     a46:	9d 01       	movw	r18, r26
     a48:	2f 5f       	subi	r18, 0xFF	; 255
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	32 83       	std	Z+2, r19	; 0x02
     a4e:	21 83       	std	Z+1, r18	; 0x01
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	19 f0       	breq	.+6      	; 0xa5a <__vector_19+0x52>
     a54:	11 96       	adiw	r26, 0x01	; 1
     a56:	9c 91       	ld	r25, X
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <__vector_19+0x54>
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	e5 e7       	ldi	r30, 0x75	; 117
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	83 81       	ldd	r24, Z+3	; 0x03
     a62:	81 50       	subi	r24, 0x01	; 1
     a64:	83 83       	std	Z+3, r24	; 0x03
     a66:	88 23       	and	r24, r24
     a68:	11 f0       	breq	.+4      	; 0xa6e <__vector_19+0x66>
     a6a:	9e bd       	out	0x2e, r25	; 46
     a6c:	0a c0       	rjmp	.+20     	; 0xa82 <__vector_19+0x7a>
     a6e:	e5 e7       	ldi	r30, 0x75	; 117
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	80 83       	st	Z, r24
     a76:	05 80       	ldd	r0, Z+5	; 0x05
     a78:	f6 81       	ldd	r31, Z+6	; 0x06
     a7a:	e0 2d       	mov	r30, r0
     a7c:	30 97       	sbiw	r30, 0x00	; 0
     a7e:	09 f0       	breq	.+2      	; 0xa82 <__vector_19+0x7a>
     a80:	09 95       	icall
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	7f 91       	pop	r23
     a90:	6f 91       	pop	r22
     a92:	5f 91       	pop	r21
     a94:	4f 91       	pop	r20
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <TIMER_0_init>:
     aa4:	e4 e6       	ldi	r30, 0x64	; 100
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	87 7f       	andi	r24, 0xF7	; 247
     aac:	80 83       	st	Z, r24
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	08 95       	ret

00000ab2 <Timer_init>:
     ab2:	e4 e6       	ldi	r30, 0x64	; 100
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	8f 7d       	andi	r24, 0xDF	; 223
     aba:	80 83       	st	Z, r24
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	84 bd       	out	0x24, r24	; 36
     ac0:	95 e0       	ldi	r25, 0x05	; 5
     ac2:	95 bd       	out	0x25, r25	; 37
     ac4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	08 95       	ret

00000acc <USART_init>:
uint8_t USART_read()
{
	while (!(UCSR0A & (1 << RXC)))
		;
	return UDR0;
}
     acc:	e4 e6       	ldi	r30, 0x64	; 100
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	8d 7f       	andi	r24, 0xFD	; 253
     ad4:	80 83       	st	Z, r24
     ad6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     ada:	8c e0       	ldi	r24, 0x0C	; 12
     adc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     ae0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ae4:	88 e0       	ldi	r24, 0x08	; 8
     ae6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret

00000aee <USART_is_tx_ready>:
     aee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     af2:	85 fb       	bst	r24, 5
     af4:	88 27       	eor	r24, r24
     af6:	80 f9       	bld	r24, 0
     af8:	08 95       	ret

00000afa <USART_is_tx_busy>:
     afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     afe:	82 95       	swap	r24
     b00:	86 95       	lsr	r24
     b02:	86 95       	lsr	r24
     b04:	83 70       	andi	r24, 0x03	; 3
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	89 27       	eor	r24, r25
     b0a:	81 70       	andi	r24, 0x01	; 1
     b0c:	08 95       	ret

00000b0e <USART_write>:
 *
 * \return Nothing
 */
void USART_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE)))
     b0e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b12:	95 ff       	sbrs	r25, 5
     b14:	fc cf       	rjmp	.-8      	; 0xb0e <USART_write>
		;
	UDR0 = data;
     b16:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     b1a:	08 95       	ret

00000b1c <check_for_aks_block>:
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	ec 01       	movw	r28, r24
     b2c:	ae 81       	ldd	r26, Y+6	; 0x06
     b2e:	bf 81       	ldd	r27, Y+7	; 0x07
     b30:	eb 01       	movw	r28, r22
     b32:	cc 0f       	add	r28, r28
     b34:	dd 1f       	adc	r29, r29
     b36:	c6 0f       	add	r28, r22
     b38:	d7 1f       	adc	r29, r23
     b3a:	ca 0f       	add	r28, r26
     b3c:	db 1f       	adc	r29, r27
     b3e:	fa 80       	ldd	r15, Y+2	; 0x02
     b40:	fc 01       	movw	r30, r24
     b42:	44 81       	ldd	r20, Z+4	; 0x04
     b44:	55 81       	ldd	r21, Z+5	; 0x05
     b46:	e6 e0       	ldi	r30, 0x06	; 6
     b48:	e6 9f       	mul	r30, r22
     b4a:	90 01       	movw	r18, r0
     b4c:	e7 9f       	mul	r30, r23
     b4e:	30 0d       	add	r19, r0
     b50:	11 24       	eor	r1, r1
     b52:	8a 01       	movw	r16, r20
     b54:	02 0f       	add	r16, r18
     b56:	13 1f       	adc	r17, r19
     b58:	f8 01       	movw	r30, r16
     b5a:	22 81       	ldd	r18, Z+2	; 0x02
     b5c:	33 81       	ldd	r19, Z+3	; 0x03
     b5e:	f9 01       	movw	r30, r18
     b60:	21 81       	ldd	r18, Z+1	; 0x01
     b62:	32 81       	ldd	r19, Z+2	; 0x02
     b64:	f8 01       	movw	r30, r16
     b66:	04 81       	ldd	r16, Z+4	; 0x04
     b68:	15 81       	ldd	r17, Z+5	; 0x05
     b6a:	20 1b       	sub	r18, r16
     b6c:	31 0b       	sbc	r19, r17
     b6e:	e8 81       	ld	r30, Y
     b70:	2e 1b       	sub	r18, r30
     b72:	31 09       	sbc	r19, r1
     b74:	ec 01       	movw	r28, r24
     b76:	ea 81       	ldd	r30, Y+2	; 0x02
     b78:	fb 81       	ldd	r31, Y+3	; 0x03
     b7a:	00 81       	ld	r16, Z
     b7c:	11 81       	ldd	r17, Z+1	; 0x01
     b7e:	fa 01       	movw	r30, r20
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	40 17       	cp	r20, r16
     b86:	51 07       	cpc	r21, r17
     b88:	39 f1       	breq	.+78     	; 0xbd8 <check_for_aks_block+0xbc>
     b8a:	46 17       	cp	r20, r22
     b8c:	57 07       	cpc	r21, r23
     b8e:	f9 f0       	breq	.+62     	; 0xbce <check_for_aks_block+0xb2>
     b90:	12 96       	adiw	r26, 0x02	; 2
     b92:	8c 91       	ld	r24, X
     b94:	12 97       	sbiw	r26, 0x02	; 2
     b96:	f8 12       	cpse	r15, r24
     b98:	1a c0       	rjmp	.+52     	; 0xbce <check_for_aks_block+0xb2>
     b9a:	80 81       	ld	r24, Z
     b9c:	85 58       	subi	r24, 0x85	; 133
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	e8 f0       	brcs	.+58     	; 0xbdc <check_for_aks_block+0xc0>
     ba2:	c4 80       	ldd	r12, Z+4	; 0x04
     ba4:	d5 80       	ldd	r13, Z+5	; 0x05
     ba6:	82 81       	ldd	r24, Z+2	; 0x02
     ba8:	93 81       	ldd	r25, Z+3	; 0x03
     baa:	ec 01       	movw	r28, r24
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	9a 81       	ldd	r25, Y+2	; 0x02
     bb0:	c8 16       	cp	r12, r24
     bb2:	d9 06       	cpc	r13, r25
     bb4:	60 f4       	brcc	.+24     	; 0xbce <check_for_aks_block+0xb2>
     bb6:	8c 19       	sub	r24, r12
     bb8:	9d 09       	sbc	r25, r13
     bba:	cc 91       	ld	r28, X
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
     bbe:	c8 17       	cp	r28, r24
     bc0:	d9 07       	cpc	r29, r25
     bc2:	28 f4       	brcc	.+10     	; 0xbce <check_for_aks_block+0xb2>
     bc4:	8c 1b       	sub	r24, r28
     bc6:	9d 0b       	sbc	r25, r29
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	38 f0       	brcs	.+14     	; 0xbdc <check_for_aks_block+0xc0>
     bce:	4f 5f       	subi	r20, 0xFF	; 255
     bd0:	5f 4f       	sbci	r21, 0xFF	; 255
     bd2:	13 96       	adiw	r26, 0x03	; 3
     bd4:	36 96       	adiw	r30, 0x06	; 6
     bd6:	d6 cf       	rjmp	.-84     	; 0xb84 <check_for_aks_block+0x68>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	01 c0       	rjmp	.+2      	; 0xbde <check_for_aks_block+0xc2>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	08 95       	ret

00000bee <qtm_update_qtlib_timer>:
     bee:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <qtm_local_ms_timecount>
     bf2:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <qtm_local_ms_timecount+0x1>
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <qtm_local_ms_timecount+0x1>
     bfe:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <qtm_local_ms_timecount>
     c02:	08 95       	ret

00000c04 <qtm_init_sensor_key>:
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	d9 f0       	breq	.+54     	; 0xc3e <qtm_init_sensor_key+0x3a>
     c08:	41 15       	cp	r20, r1
     c0a:	51 05       	cpc	r21, r1
     c0c:	c1 f0       	breq	.+48     	; 0xc3e <qtm_init_sensor_key+0x3a>
     c0e:	26 e0       	ldi	r18, 0x06	; 6
     c10:	62 9f       	mul	r22, r18
     c12:	b0 01       	movw	r22, r0
     c14:	11 24       	eor	r1, r1
     c16:	dc 01       	movw	r26, r24
     c18:	14 96       	adiw	r26, 0x04	; 4
     c1a:	ed 91       	ld	r30, X+
     c1c:	fc 91       	ld	r31, X
     c1e:	15 97       	sbiw	r26, 0x05	; 5
     c20:	e6 0f       	add	r30, r22
     c22:	f7 1f       	adc	r31, r23
     c24:	21 e0       	ldi	r18, 0x01	; 1
     c26:	20 83       	st	Z, r18
     c28:	14 96       	adiw	r26, 0x04	; 4
     c2a:	8d 91       	ld	r24, X+
     c2c:	9c 91       	ld	r25, X
     c2e:	15 97       	sbiw	r26, 0x05	; 5
     c30:	fc 01       	movw	r30, r24
     c32:	e6 0f       	add	r30, r22
     c34:	f7 1f       	adc	r31, r23
     c36:	53 83       	std	Z+3, r21	; 0x03
     c38:	42 83       	std	Z+2, r20	; 0x02
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	08 95       	ret
     c3e:	8b e0       	ldi	r24, 0x0B	; 11
     c40:	08 95       	ret

00000c42 <qtm_key_sensors_process>:
     c42:	2f 92       	push	r2
     c44:	3f 92       	push	r3
     c46:	4f 92       	push	r4
     c48:	5f 92       	push	r5
     c4a:	6f 92       	push	r6
     c4c:	7f 92       	push	r7
     c4e:	8f 92       	push	r8
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	09 f4       	brne	.+2      	; 0xc6c <qtm_key_sensors_process+0x2a>
     c6a:	7e c3       	rjmp	.+1788   	; 0x1368 <qtm_key_sensors_process+0x726>
     c6c:	ec 01       	movw	r28, r24
     c6e:	a1 2c       	mov	r10, r1
     c70:	b1 2c       	mov	r11, r1
     c72:	81 2c       	mov	r8, r1
     c74:	91 2c       	mov	r9, r1
     c76:	21 2c       	mov	r2, r1
     c78:	d1 2c       	mov	r13, r1
     c7a:	55 24       	eor	r5, r5
     c7c:	53 94       	inc	r5
     c7e:	33 e0       	ldi	r19, 0x03	; 3
     c80:	c3 2e       	mov	r12, r19
     c82:	45 e8       	ldi	r20, 0x85	; 133
     c84:	64 2e       	mov	r6, r20
     c86:	56 e8       	ldi	r21, 0x86	; 134
     c88:	75 2e       	mov	r7, r21
     c8a:	62 e0       	ldi	r22, 0x02	; 2
     c8c:	36 2e       	mov	r3, r22
     c8e:	78 e0       	ldi	r23, 0x08	; 8
     c90:	47 2e       	mov	r4, r23
     c92:	ea 81       	ldd	r30, Y+2	; 0x02
     c94:	fb 81       	ldd	r31, Y+3	; 0x03
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	88 16       	cp	r8, r24
     c9c:	99 06       	cpc	r9, r25
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <qtm_key_sensors_process+0x60>
     ca0:	a6 c1       	rjmp	.+844    	; 0xfee <qtm_key_sensors_process+0x3ac>
     ca2:	75 01       	movw	r14, r10
     ca4:	ee 0c       	add	r14, r14
     ca6:	ff 1c       	adc	r15, r15
     ca8:	ec 81       	ldd	r30, Y+4	; 0x04
     caa:	fd 81       	ldd	r31, Y+5	; 0x05
     cac:	ee 0d       	add	r30, r14
     cae:	ff 1d       	adc	r31, r15
     cb0:	a2 81       	ldd	r26, Z+2	; 0x02
     cb2:	b3 81       	ldd	r27, Z+3	; 0x03
     cb4:	9c 91       	ld	r25, X
     cb6:	9e 71       	andi	r25, 0x1E	; 30
     cb8:	09 f0       	breq	.+2      	; 0xcbc <qtm_key_sensors_process+0x7a>
     cba:	50 82       	st	Z, r5
     cbc:	0c 81       	ldd	r16, Y+4	; 0x04
     cbe:	1d 81       	ldd	r17, Y+5	; 0x05
     cc0:	0e 0d       	add	r16, r14
     cc2:	1f 1d       	adc	r17, r15
     cc4:	d8 01       	movw	r26, r16
     cc6:	8c 91       	ld	r24, X
     cc8:	84 30       	cpi	r24, 0x04	; 4
     cca:	09 f4       	brne	.+2      	; 0xcce <qtm_key_sensors_process+0x8c>
     ccc:	9e c0       	rjmp	.+316    	; 0xe0a <qtm_key_sensors_process+0x1c8>
     cce:	38 f4       	brcc	.+14     	; 0xcde <qtm_key_sensors_process+0x9c>
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	d1 f0       	breq	.+52     	; 0xd08 <qtm_key_sensors_process+0xc6>
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <qtm_key_sensors_process+0x96>
     cd6:	45 c0       	rjmp	.+138    	; 0xd62 <qtm_key_sensors_process+0x120>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	59 f0       	breq	.+22     	; 0xcf2 <qtm_key_sensors_process+0xb0>
     cdc:	81 c1       	rjmp	.+770    	; 0xfe0 <qtm_key_sensors_process+0x39e>
     cde:	85 38       	cpi	r24, 0x85	; 133
     ce0:	09 f4       	brne	.+2      	; 0xce4 <qtm_key_sensors_process+0xa2>
     ce2:	bf c0       	rjmp	.+382    	; 0xe62 <qtm_key_sensors_process+0x220>
     ce4:	86 38       	cpi	r24, 0x86	; 134
     ce6:	09 f4       	brne	.+2      	; 0xcea <qtm_key_sensors_process+0xa8>
     ce8:	f5 c0       	rjmp	.+490    	; 0xed4 <qtm_key_sensors_process+0x292>
     cea:	87 30       	cpi	r24, 0x07	; 7
     cec:	09 f0       	breq	.+2      	; 0xcf0 <qtm_key_sensors_process+0xae>
     cee:	78 c1       	rjmp	.+752    	; 0xfe0 <qtm_key_sensors_process+0x39e>
     cf0:	36 c1       	rjmp	.+620    	; 0xf5e <qtm_key_sensors_process+0x31c>
     cf2:	91 11       	cpse	r25, r1
     cf4:	67 c1       	rjmp	.+718    	; 0xfc4 <qtm_key_sensors_process+0x382>
     cf6:	f8 01       	movw	r30, r16
     cf8:	30 82       	st	Z, r3
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	fc 01       	movw	r30, r24
     d00:	ee 0d       	add	r30, r14
     d02:	ff 1d       	adc	r31, r15
     d04:	41 82       	std	Z+1, r4	; 0x01
     d06:	5e c1       	rjmp	.+700    	; 0xfc4 <qtm_key_sensors_process+0x382>
     d08:	d8 01       	movw	r26, r16
     d0a:	11 96       	adiw	r26, 0x01	; 1
     d0c:	2c 91       	ld	r18, X
     d0e:	11 97       	sbiw	r26, 0x01	; 1
     d10:	22 23       	and	r18, r18
     d12:	29 f1       	breq	.+74     	; 0xd5e <qtm_key_sensors_process+0x11c>
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	ed 91       	ld	r30, X+
     d18:	fc 91       	ld	r31, X
     d1a:	13 97       	sbiw	r26, 0x03	; 3
     d1c:	25 30       	cpi	r18, 0x05	; 5
     d1e:	18 f0       	brcs	.+6      	; 0xd26 <qtm_key_sensors_process+0xe4>
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	92 81       	ldd	r25, Z+2	; 0x02
     d24:	0e c0       	rjmp	.+28     	; 0xd42 <qtm_key_sensors_process+0x100>
     d26:	d8 01       	movw	r26, r16
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	8d 91       	ld	r24, X+
     d2c:	9c 91       	ld	r25, X
     d2e:	15 97       	sbiw	r26, 0x05	; 5
     d30:	41 81       	ldd	r20, Z+1	; 0x01
     d32:	52 81       	ldd	r21, Z+2	; 0x02
     d34:	84 17       	cp	r24, r20
     d36:	95 07       	cpc	r25, r21
     d38:	69 f0       	breq	.+26     	; 0xd54 <qtm_key_sensors_process+0x112>
     d3a:	48 17       	cp	r20, r24
     d3c:	59 07       	cpc	r21, r25
     d3e:	30 f4       	brcc	.+12     	; 0xd4c <qtm_key_sensors_process+0x10a>
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	15 96       	adiw	r26, 0x05	; 5
     d44:	9c 93       	st	X, r25
     d46:	8e 93       	st	-X, r24
     d48:	14 97       	sbiw	r26, 0x04	; 4
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <qtm_key_sensors_process+0x112>
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	f8 01       	movw	r30, r16
     d50:	95 83       	std	Z+5, r25	; 0x05
     d52:	84 83       	std	Z+4, r24	; 0x04
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	d8 01       	movw	r26, r16
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	2c 93       	st	X, r18
     d5c:	33 c1       	rjmp	.+614    	; 0xfc4 <qtm_key_sensors_process+0x382>
     d5e:	f8 01       	movw	r30, r16
     d60:	2d c1       	rjmp	.+602    	; 0xfbc <qtm_key_sensors_process+0x37a>
     d62:	d8 01       	movw	r26, r16
     d64:	14 96       	adiw	r26, 0x04	; 4
     d66:	2d 91       	ld	r18, X+
     d68:	3c 91       	ld	r19, X
     d6a:	15 97       	sbiw	r26, 0x05	; 5
     d6c:	12 96       	adiw	r26, 0x02	; 2
     d6e:	ed 91       	ld	r30, X+
     d70:	fc 91       	ld	r31, X
     d72:	13 97       	sbiw	r26, 0x03	; 3
     d74:	41 81       	ldd	r20, Z+1	; 0x01
     d76:	52 81       	ldd	r21, Z+2	; 0x02
     d78:	24 17       	cp	r18, r20
     d7a:	35 07       	cpc	r19, r21
     d7c:	09 f4       	brne	.+2      	; 0xd80 <qtm_key_sensors_process+0x13e>
     d7e:	30 c1       	rjmp	.+608    	; 0xfe0 <qtm_key_sensors_process+0x39e>
     d80:	8e 81       	ldd	r24, Y+6	; 0x06
     d82:	9f 81       	ldd	r25, Y+7	; 0x07
     d84:	42 17       	cp	r20, r18
     d86:	53 07       	cpc	r21, r19
     d88:	f8 f4       	brcc	.+62     	; 0xdc8 <qtm_key_sensors_process+0x186>
     d8a:	ea 81       	ldd	r30, Y+2	; 0x02
     d8c:	fb 81       	ldd	r31, Y+3	; 0x03
     d8e:	24 1b       	sub	r18, r20
     d90:	35 0b       	sbc	r19, r21
     d92:	dc 01       	movw	r26, r24
     d94:	aa 0d       	add	r26, r10
     d96:	bb 1d       	adc	r27, r11
     d98:	8c 91       	ld	r24, X
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	05 80       	ldd	r0, Z+5	; 0x05
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <qtm_key_sensors_process+0x162>
     da0:	95 95       	asr	r25
     da2:	87 95       	ror	r24
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <qtm_key_sensors_process+0x15e>
     da8:	99 27       	eor	r25, r25
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	08 f4       	brcc	.+2      	; 0xdb2 <qtm_key_sensors_process+0x170>
     db0:	17 c1       	rjmp	.+558    	; 0xfe0 <qtm_key_sensors_process+0x39e>
     db2:	84 81       	ldd	r24, Z+4	; 0x04
     db4:	88 23       	and	r24, r24
     db6:	09 f4       	brne	.+2      	; 0xdba <qtm_key_sensors_process+0x178>
     db8:	13 c1       	rjmp	.+550    	; 0xfe0 <qtm_key_sensors_process+0x39e>
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	f8 01       	movw	r30, r16
     dbe:	80 83       	st	Z, r24
     dc0:	ea 81       	ldd	r30, Y+2	; 0x02
     dc2:	fb 81       	ldd	r31, Y+3	; 0x03
     dc4:	24 81       	ldd	r18, Z+4	; 0x04
     dc6:	1a c0       	rjmp	.+52     	; 0xdfc <qtm_key_sensors_process+0x1ba>
     dc8:	fc 01       	movw	r30, r24
     dca:	ea 0d       	add	r30, r10
     dcc:	fb 1d       	adc	r31, r11
     dce:	42 1b       	sub	r20, r18
     dd0:	53 0b       	sbc	r21, r19
     dd2:	80 81       	ld	r24, Z
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	48 17       	cp	r20, r24
     dd8:	59 07       	cpc	r21, r25
     dda:	08 f4       	brcc	.+2      	; 0xdde <qtm_key_sensors_process+0x19c>
     ddc:	01 c1       	rjmp	.+514    	; 0xfe0 <qtm_key_sensors_process+0x39e>
     dde:	82 81       	ldd	r24, Z+2	; 0x02
     de0:	88 23       	and	r24, r24
     de2:	31 f0       	breq	.+12     	; 0xdf0 <qtm_key_sensors_process+0x1ae>
     de4:	b4 01       	movw	r22, r8
     de6:	ce 01       	movw	r24, r28
     de8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <check_for_aks_block>
     dec:	81 11       	cpse	r24, r1
     dee:	f8 c0       	rjmp	.+496    	; 0xfe0 <qtm_key_sensors_process+0x39e>
     df0:	e4 e0       	ldi	r30, 0x04	; 4
     df2:	d8 01       	movw	r26, r16
     df4:	ec 93       	st	X, r30
     df6:	ea 81       	ldd	r30, Y+2	; 0x02
     df8:	fb 81       	ldd	r31, Y+3	; 0x03
     dfa:	22 81       	ldd	r18, Z+2	; 0x02
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	fc 01       	movw	r30, r24
     e02:	ee 0d       	add	r30, r14
     e04:	ff 1d       	adc	r31, r15
     e06:	21 83       	std	Z+1, r18	; 0x01
     e08:	dd c0       	rjmp	.+442    	; 0xfc4 <qtm_key_sensors_process+0x382>
     e0a:	d8 01       	movw	r26, r16
     e0c:	14 96       	adiw	r26, 0x04	; 4
     e0e:	2d 91       	ld	r18, X+
     e10:	3c 91       	ld	r19, X
     e12:	15 97       	sbiw	r26, 0x05	; 5
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	ed 91       	ld	r30, X+
     e18:	fc 91       	ld	r31, X
     e1a:	13 97       	sbiw	r26, 0x03	; 3
     e1c:	81 81       	ldd	r24, Z+1	; 0x01
     e1e:	92 81       	ldd	r25, Z+2	; 0x02
     e20:	82 17       	cp	r24, r18
     e22:	93 07       	cpc	r25, r19
     e24:	08 f4       	brcc	.+2      	; 0xe28 <qtm_key_sensors_process+0x1e6>
     e26:	bb c0       	rjmp	.+374    	; 0xf9e <qtm_key_sensors_process+0x35c>
     e28:	ee 81       	ldd	r30, Y+6	; 0x06
     e2a:	ff 81       	ldd	r31, Y+7	; 0x07
     e2c:	ea 0d       	add	r30, r10
     e2e:	fb 1d       	adc	r31, r11
     e30:	82 1b       	sub	r24, r18
     e32:	93 0b       	sbc	r25, r19
     e34:	20 81       	ld	r18, Z
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	28 17       	cp	r18, r24
     e3a:	39 07       	cpc	r19, r25
     e3c:	08 f0       	brcs	.+2      	; 0xe40 <qtm_key_sensors_process+0x1fe>
     e3e:	c5 c0       	rjmp	.+394    	; 0xfca <qtm_key_sensors_process+0x388>
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	88 23       	and	r24, r24
     e44:	31 f0       	breq	.+12     	; 0xe52 <qtm_key_sensors_process+0x210>
     e46:	b4 01       	movw	r22, r8
     e48:	ce 01       	movw	r24, r28
     e4a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <check_for_aks_block>
     e4e:	81 11       	cpse	r24, r1
     e50:	c7 c0       	rjmp	.+398    	; 0xfe0 <qtm_key_sensors_process+0x39e>
     e52:	f8 01       	movw	r30, r16
     e54:	81 81       	ldd	r24, Z+1	; 0x01
     e56:	88 23       	and	r24, r24
     e58:	09 f4       	brne	.+2      	; 0xe5c <qtm_key_sensors_process+0x21a>
     e5a:	6a c0       	rjmp	.+212    	; 0xf30 <qtm_key_sensors_process+0x2ee>
     e5c:	81 50       	subi	r24, 0x01	; 1
     e5e:	81 83       	std	Z+1, r24	; 0x01
     e60:	b1 c0       	rjmp	.+354    	; 0xfc4 <qtm_key_sensors_process+0x382>
     e62:	e8 81       	ld	r30, Y
     e64:	f9 81       	ldd	r31, Y+1	; 0x01
     e66:	aa 81       	ldd	r26, Y+2	; 0x02
     e68:	bb 81       	ldd	r27, Y+3	; 0x03
     e6a:	18 96       	adiw	r26, 0x08	; 8
     e6c:	8c 91       	ld	r24, X
     e6e:	83 83       	std	Z+3, r24	; 0x03
     e70:	ec 81       	ldd	r30, Y+4	; 0x04
     e72:	fd 81       	ldd	r31, Y+5	; 0x05
     e74:	ee 0d       	add	r30, r14
     e76:	ff 1d       	adc	r31, r15
     e78:	44 81       	ldd	r20, Z+4	; 0x04
     e7a:	55 81       	ldd	r21, Z+5	; 0x05
     e7c:	a2 81       	ldd	r26, Z+2	; 0x02
     e7e:	b3 81       	ldd	r27, Z+3	; 0x03
     e80:	11 96       	adiw	r26, 0x01	; 1
     e82:	8d 91       	ld	r24, X+
     e84:	9c 91       	ld	r25, X
     e86:	12 97       	sbiw	r26, 0x02	; 2
     e88:	84 17       	cp	r24, r20
     e8a:	95 07       	cpc	r25, r21
     e8c:	c0 f0       	brcs	.+48     	; 0xebe <qtm_key_sensors_process+0x27c>
     e8e:	ae 81       	ldd	r26, Y+6	; 0x06
     e90:	bf 81       	ldd	r27, Y+7	; 0x07
     e92:	aa 0d       	add	r26, r10
     e94:	bb 1d       	adc	r27, r11
     e96:	6c 91       	ld	r22, X
     e98:	26 2f       	mov	r18, r22
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	7c 91       	ld	r23, X
     ea0:	7f 5f       	subi	r23, 0xFF	; 255
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <qtm_key_sensors_process+0x266>
     ea4:	35 95       	asr	r19
     ea6:	27 95       	ror	r18
     ea8:	7a 95       	dec	r23
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <qtm_key_sensors_process+0x262>
     eac:	84 1b       	sub	r24, r20
     eae:	95 0b       	sbc	r25, r21
     eb0:	62 1b       	sub	r22, r18
     eb2:	26 2f       	mov	r18, r22
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	08 f4       	brcc	.+2      	; 0xebe <qtm_key_sensors_process+0x27c>
     ebc:	8f c0       	rjmp	.+286    	; 0xfdc <qtm_key_sensors_process+0x39a>
     ebe:	70 82       	st	Z, r7
     ec0:	ea 81       	ldd	r30, Y+2	; 0x02
     ec2:	fb 81       	ldd	r31, Y+3	; 0x03
     ec4:	22 81       	ldd	r18, Z+2	; 0x02
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	fc 01       	movw	r30, r24
     ecc:	ee 0d       	add	r30, r14
     ece:	ff 1d       	adc	r31, r15
     ed0:	21 83       	std	Z+1, r18	; 0x01
     ed2:	42 c0       	rjmp	.+132    	; 0xf58 <qtm_key_sensors_process+0x316>
     ed4:	d8 01       	movw	r26, r16
     ed6:	14 96       	adiw	r26, 0x04	; 4
     ed8:	6d 91       	ld	r22, X+
     eda:	7c 91       	ld	r23, X
     edc:	15 97       	sbiw	r26, 0x05	; 5
     ede:	12 96       	adiw	r26, 0x02	; 2
     ee0:	ed 91       	ld	r30, X+
     ee2:	fc 91       	ld	r31, X
     ee4:	13 97       	sbiw	r26, 0x03	; 3
     ee6:	21 81       	ldd	r18, Z+1	; 0x01
     ee8:	32 81       	ldd	r19, Z+2	; 0x02
     eea:	26 17       	cp	r18, r22
     eec:	37 07       	cpc	r19, r23
     eee:	58 f4       	brcc	.+22     	; 0xf06 <qtm_key_sensors_process+0x2c4>
     ef0:	11 96       	adiw	r26, 0x01	; 1
     ef2:	8c 91       	ld	r24, X
     ef4:	11 97       	sbiw	r26, 0x01	; 1
     ef6:	81 11       	cpse	r24, r1
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <qtm_key_sensors_process+0x2bc>
     efa:	cc 92       	st	X, r12
     efc:	6f c0       	rjmp	.+222    	; 0xfdc <qtm_key_sensors_process+0x39a>
     efe:	81 50       	subi	r24, 0x01	; 1
     f00:	f8 01       	movw	r30, r16
     f02:	81 83       	std	Z+1, r24	; 0x01
     f04:	6b c0       	rjmp	.+214    	; 0xfdc <qtm_key_sensors_process+0x39a>
     f06:	ee 81       	ldd	r30, Y+6	; 0x06
     f08:	ff 81       	ldd	r31, Y+7	; 0x07
     f0a:	ea 0d       	add	r30, r10
     f0c:	fb 1d       	adc	r31, r11
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	9f 5f       	subi	r25, 0xFF	; 255
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <qtm_key_sensors_process+0x2dc>
     f1a:	55 95       	asr	r21
     f1c:	47 95       	ror	r20
     f1e:	9a 95       	dec	r25
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <qtm_key_sensors_process+0x2d8>
     f22:	26 1b       	sub	r18, r22
     f24:	37 0b       	sbc	r19, r23
     f26:	84 1b       	sub	r24, r20
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	82 17       	cp	r24, r18
     f2c:	93 07       	cpc	r25, r19
     f2e:	60 f4       	brcc	.+24     	; 0xf48 <qtm_key_sensors_process+0x306>
     f30:	d8 01       	movw	r26, r16
     f32:	6c 92       	st	X, r6
     f34:	ea 81       	ldd	r30, Y+2	; 0x02
     f36:	fb 81       	ldd	r31, Y+3	; 0x03
     f38:	23 81       	ldd	r18, Z+3	; 0x03
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	fc 01       	movw	r30, r24
     f40:	ee 0d       	add	r30, r14
     f42:	ff 1d       	adc	r31, r15
     f44:	21 83       	std	Z+1, r18	; 0x01
     f46:	4a c0       	rjmp	.+148    	; 0xfdc <qtm_key_sensors_process+0x39a>
     f48:	f8 01       	movw	r30, r16
     f4a:	81 81       	ldd	r24, Z+1	; 0x01
     f4c:	81 11       	cpse	r24, r1
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <qtm_key_sensors_process+0x312>
     f50:	c0 82       	st	Z, r12
     f52:	44 c0       	rjmp	.+136    	; 0xfdc <qtm_key_sensors_process+0x39a>
     f54:	81 50       	subi	r24, 0x01	; 1
     f56:	81 83       	std	Z+1, r24	; 0x01
     f58:	22 24       	eor	r2, r2
     f5a:	23 94       	inc	r2
     f5c:	33 c0       	rjmp	.+102    	; 0xfc4 <qtm_key_sensors_process+0x382>
     f5e:	f8 01       	movw	r30, r16
     f60:	24 81       	ldd	r18, Z+4	; 0x04
     f62:	35 81       	ldd	r19, Z+5	; 0x05
     f64:	02 80       	ldd	r0, Z+2	; 0x02
     f66:	f3 81       	ldd	r31, Z+3	; 0x03
     f68:	e0 2d       	mov	r30, r0
     f6a:	81 81       	ldd	r24, Z+1	; 0x01
     f6c:	92 81       	ldd	r25, Z+2	; 0x02
     f6e:	82 17       	cp	r24, r18
     f70:	93 07       	cpc	r25, r19
     f72:	58 f5       	brcc	.+86     	; 0xfca <qtm_key_sensors_process+0x388>
     f74:	28 1b       	sub	r18, r24
     f76:	39 0b       	sbc	r19, r25
     f78:	ee 81       	ldd	r30, Y+6	; 0x06
     f7a:	ff 81       	ldd	r31, Y+7	; 0x07
     f7c:	ea 0d       	add	r30, r10
     f7e:	fb 1d       	adc	r31, r11
     f80:	80 81       	ld	r24, Z
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	ea 81       	ldd	r30, Y+2	; 0x02
     f86:	fb 81       	ldd	r31, Y+3	; 0x03
     f88:	05 80       	ldd	r0, Z+5	; 0x05
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <qtm_key_sensors_process+0x34e>
     f8c:	95 95       	asr	r25
     f8e:	87 95       	ror	r24
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <qtm_key_sensors_process+0x34a>
     f94:	99 27       	eor	r25, r25
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	18 f4       	brcc	.+6      	; 0xfa2 <qtm_key_sensors_process+0x360>
     f9c:	d8 01       	movw	r26, r16
     f9e:	cc 92       	st	X, r12
     fa0:	16 c0       	rjmp	.+44     	; 0xfce <qtm_key_sensors_process+0x38c>
     fa2:	f8 01       	movw	r30, r16
     fa4:	81 81       	ldd	r24, Z+1	; 0x01
     fa6:	81 11       	cpse	r24, r1
     fa8:	0b c0       	rjmp	.+22     	; 0xfc0 <qtm_key_sensors_process+0x37e>
     faa:	50 82       	st	Z, r5
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	fc 01       	movw	r30, r24
     fb2:	ee 0d       	add	r30, r14
     fb4:	ff 1d       	adc	r31, r15
     fb6:	02 80       	ldd	r0, Z+2	; 0x02
     fb8:	f3 81       	ldd	r31, Z+3	; 0x03
     fba:	e0 2d       	mov	r30, r0
     fbc:	c0 82       	st	Z, r12
     fbe:	10 c0       	rjmp	.+32     	; 0xfe0 <qtm_key_sensors_process+0x39e>
     fc0:	81 50       	subi	r24, 0x01	; 1
     fc2:	81 83       	std	Z+1, r24	; 0x01
     fc4:	dd 24       	eor	r13, r13
     fc6:	d3 94       	inc	r13
     fc8:	0b c0       	rjmp	.+22     	; 0xfe0 <qtm_key_sensors_process+0x39e>
     fca:	f8 01       	movw	r30, r16
     fcc:	c0 82       	st	Z, r12
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	fc 01       	movw	r30, r24
     fd4:	ee 0d       	add	r30, r14
     fd6:	ff 1d       	adc	r31, r15
     fd8:	11 82       	std	Z+1, r1	; 0x01
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <qtm_key_sensors_process+0x39e>
     fdc:	22 24       	eor	r2, r2
     fde:	23 94       	inc	r2
     fe0:	ff ef       	ldi	r31, 0xFF	; 255
     fe2:	8f 1a       	sub	r8, r31
     fe4:	9f 0a       	sbc	r9, r31
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	a8 0e       	add	r10, r24
     fea:	b1 1c       	adc	r11, r1
     fec:	52 ce       	rjmp	.-860    	; 0xc92 <qtm_key_sensors_process+0x50>
     fee:	e8 81       	ld	r30, Y
     ff0:	f9 81       	ldd	r31, Y+1	; 0x01
     ff2:	80 81       	ld	r24, Z
     ff4:	87 ff       	sbrs	r24, 7
     ff6:	23 c0       	rjmp	.+70     	; 0x103e <qtm_key_sensors_process+0x3fc>
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	ea 81       	ldd	r30, Y+2	; 0x02
    1002:	fb 81       	ldd	r31, Y+3	; 0x03
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	28 17       	cp	r18, r24
    100a:	39 07       	cpc	r19, r25
    100c:	98 f4       	brcc	.+38     	; 0x1034 <qtm_key_sensors_process+0x3f2>
    100e:	ec 81       	ldd	r30, Y+4	; 0x04
    1010:	fd 81       	ldd	r31, Y+5	; 0x05
    1012:	e4 0f       	add	r30, r20
    1014:	f5 1f       	adc	r31, r21
    1016:	a2 81       	ldd	r26, Z+2	; 0x02
    1018:	b3 81       	ldd	r27, Z+3	; 0x03
    101a:	8c 91       	ld	r24, X
    101c:	80 fd       	sbrc	r24, 0
    101e:	05 c0       	rjmp	.+10     	; 0x102a <qtm_key_sensors_process+0x3e8>
    1020:	90 81       	ld	r25, Z
    1022:	97 7f       	andi	r25, 0xF7	; 247
    1024:	11 f0       	breq	.+4      	; 0x102a <qtm_key_sensors_process+0x3e8>
    1026:	81 60       	ori	r24, 0x01	; 1
    1028:	8c 93       	st	X, r24
    102a:	2f 5f       	subi	r18, 0xFF	; 255
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	4a 5f       	subi	r20, 0xFA	; 250
    1030:	5f 4f       	sbci	r21, 0xFF	; 255
    1032:	e6 cf       	rjmp	.-52     	; 0x1000 <qtm_key_sensors_process+0x3be>
    1034:	e8 81       	ld	r30, Y
    1036:	f9 81       	ldd	r31, Y+1	; 0x01
    1038:	80 81       	ld	r24, Z
    103a:	8f 77       	andi	r24, 0x7F	; 127
    103c:	80 83       	st	Z, r24
    103e:	d1 10       	cpse	r13, r1
    1040:	07 c0       	rjmp	.+14     	; 0x1050 <qtm_key_sensors_process+0x40e>
    1042:	e8 81       	ld	r30, Y
    1044:	f9 81       	ldd	r31, Y+1	; 0x01
    1046:	21 10       	cpse	r2, r1
    1048:	6f c0       	rjmp	.+222    	; 0x1128 <qtm_key_sensors_process+0x4e6>
    104a:	80 81       	ld	r24, Z
    104c:	8e 7f       	andi	r24, 0xFE	; 254
    104e:	6e c0       	rjmp	.+220    	; 0x112c <qtm_key_sensors_process+0x4ea>
    1050:	ea 81       	ldd	r30, Y+2	; 0x02
    1052:	fb 81       	ldd	r31, Y+3	; 0x03
    1054:	81 85       	ldd	r24, Z+9	; 0x09
    1056:	88 23       	and	r24, r24
    1058:	a1 f3       	breq	.-24     	; 0x1042 <qtm_key_sensors_process+0x400>
    105a:	e8 81       	ld	r30, Y
    105c:	f9 81       	ldd	r31, Y+1	; 0x01
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	80 83       	st	Z, r24
    1064:	ea 81       	ldd	r30, Y+2	; 0x02
    1066:	fb 81       	ldd	r31, Y+3	; 0x03
    1068:	81 85       	ldd	r24, Z+9	; 0x09
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	51 f7       	brne	.-44     	; 0x1042 <qtm_key_sensors_process+0x400>
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	96 e0       	ldi	r25, 0x06	; 6
    1078:	d9 2e       	mov	r13, r25
    107a:	ea 81       	ldd	r30, Y+2	; 0x02
    107c:	fb 81       	ldd	r31, Y+3	; 0x03
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	26 17       	cp	r18, r22
    1084:	37 07       	cpc	r19, r23
    1086:	e8 f6       	brcc	.-70     	; 0x1042 <qtm_key_sensors_process+0x400>
    1088:	0c 81       	ldd	r16, Y+4	; 0x04
    108a:	1d 81       	ldd	r17, Y+5	; 0x05
    108c:	fa 01       	movw	r30, r20
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	e0 0f       	add	r30, r16
    1094:	f1 1f       	adc	r31, r17
    1096:	80 81       	ld	r24, Z
    1098:	98 2f       	mov	r25, r24
    109a:	97 7f       	andi	r25, 0xF7	; 247
    109c:	a1 f1       	breq	.+104    	; 0x1106 <qtm_key_sensors_process+0x4c4>
    109e:	85 38       	cpi	r24, 0x85	; 133
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <qtm_key_sensors_process+0x464>
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	b1 f5       	brne	.+108    	; 0x1112 <qtm_key_sensors_process+0x4d0>
    10a6:	ee 80       	ldd	r14, Y+6	; 0x06
    10a8:	ff 80       	ldd	r15, Y+7	; 0x07
    10aa:	d7 01       	movw	r26, r14
    10ac:	a4 0f       	add	r26, r20
    10ae:	b5 1f       	adc	r27, r21
    10b0:	12 96       	adiw	r26, 0x02	; 2
    10b2:	bc 90       	ld	r11, X
    10b4:	bb 20       	and	r11, r11
    10b6:	39 f1       	breq	.+78     	; 0x1106 <qtm_key_sensors_process+0x4c4>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	c1 2c       	mov	r12, r1
    10be:	86 17       	cp	r24, r22
    10c0:	97 07       	cpc	r25, r23
    10c2:	f8 f4       	brcc	.+62     	; 0x1102 <qtm_key_sensors_process+0x4c0>
    10c4:	28 17       	cp	r18, r24
    10c6:	39 07       	cpc	r19, r25
    10c8:	d1 f0       	breq	.+52     	; 0x10fe <qtm_key_sensors_process+0x4bc>
    10ca:	d8 9e       	mul	r13, r24
    10cc:	d0 01       	movw	r26, r0
    10ce:	d9 9e       	mul	r13, r25
    10d0:	b0 0d       	add	r27, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	a0 0f       	add	r26, r16
    10d6:	b1 1f       	adc	r27, r17
    10d8:	ac 91       	ld	r26, X
    10da:	a4 30       	cpi	r26, 0x04	; 4
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <qtm_key_sensors_process+0x4a0>
    10de:	a6 38       	cpi	r26, 0x86	; 134
    10e0:	71 f4       	brne	.+28     	; 0x10fe <qtm_key_sensors_process+0x4bc>
    10e2:	dc 01       	movw	r26, r24
    10e4:	aa 0f       	add	r26, r26
    10e6:	bb 1f       	adc	r27, r27
    10e8:	a8 0f       	add	r26, r24
    10ea:	b9 1f       	adc	r27, r25
    10ec:	ae 0d       	add	r26, r14
    10ee:	bf 1d       	adc	r27, r15
    10f0:	12 96       	adiw	r26, 0x02	; 2
    10f2:	ac 91       	ld	r26, X
    10f4:	ba 12       	cpse	r11, r26
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <qtm_key_sensors_process+0x4bc>
    10f8:	cb 01       	movw	r24, r22
    10fa:	cc 24       	eor	r12, r12
    10fc:	c3 94       	inc	r12
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	de cf       	rjmp	.-68     	; 0x10be <qtm_key_sensors_process+0x47c>
    1102:	c1 10       	cpse	r12, r1
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <qtm_key_sensors_process+0x4d0>
    1106:	02 80       	ldd	r0, Z+2	; 0x02
    1108:	f3 81       	ldd	r31, Z+3	; 0x03
    110a:	e0 2d       	mov	r30, r0
    110c:	80 81       	ld	r24, Z
    110e:	8e 7f       	andi	r24, 0xFE	; 254
    1110:	05 c0       	rjmp	.+10     	; 0x111c <qtm_key_sensors_process+0x4da>
    1112:	02 80       	ldd	r0, Z+2	; 0x02
    1114:	f3 81       	ldd	r31, Z+3	; 0x03
    1116:	e0 2d       	mov	r30, r0
    1118:	80 81       	ld	r24, Z
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	80 83       	st	Z, r24
    111e:	2f 5f       	subi	r18, 0xFF	; 255
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	4d 5f       	subi	r20, 0xFD	; 253
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	a9 cf       	rjmp	.-174    	; 0x107a <qtm_key_sensors_process+0x438>
    1128:	80 81       	ld	r24, Z
    112a:	81 60       	ori	r24, 0x01	; 1
    112c:	80 83       	st	Z, r24
    112e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <qtm_local_ms_timecount>
    1132:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <qtm_local_ms_timecount+0x1>
    1136:	e8 81       	ld	r30, Y
    1138:	f9 81       	ldd	r31, Y+1	; 0x01
    113a:	21 81       	ldd	r18, Z+1	; 0x01
    113c:	32 81       	ldd	r19, Z+2	; 0x02
    113e:	a9 01       	movw	r20, r18
    1140:	48 53       	subi	r20, 0x38	; 56
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	48 17       	cp	r20, r24
    1146:	59 07       	cpc	r21, r25
    1148:	38 f4       	brcc	.+14     	; 0x1158 <qtm_key_sensors_process+0x516>
    114a:	82 1b       	sub	r24, r18
    114c:	93 0b       	sbc	r25, r19
    114e:	aa 24       	eor	r10, r10
    1150:	a3 94       	inc	r10
    1152:	a3 e0       	ldi	r26, 0x03	; 3
    1154:	ba 2e       	mov	r11, r26
    1156:	44 c0       	rjmp	.+136    	; 0x11e0 <qtm_key_sensors_process+0x59e>
    1158:	82 17       	cp	r24, r18
    115a:	93 07       	cpc	r25, r19
    115c:	10 f0       	brcs	.+4      	; 0x1162 <qtm_key_sensors_process+0x520>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	04 c1       	rjmp	.+520    	; 0x136a <qtm_key_sensors_process+0x728>
    1162:	82 1b       	sub	r24, r18
    1164:	93 0b       	sbc	r25, r19
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	89 3c       	cpi	r24, 0xC9	; 201
    116a:	91 05       	cpc	r25, r1
    116c:	c0 f3       	brcs	.-16     	; 0x115e <qtm_key_sensors_process+0x51c>
    116e:	ef cf       	rjmp	.-34     	; 0x114e <qtm_key_sensors_process+0x50c>
    1170:	88 5c       	subi	r24, 0xC8	; 200
    1172:	91 09       	sbc	r25, r1
    1174:	e8 81       	ld	r30, Y
    1176:	f9 81       	ldd	r31, Y+1	; 0x01
    1178:	21 81       	ldd	r18, Z+1	; 0x01
    117a:	32 81       	ldd	r19, Z+2	; 0x02
    117c:	28 53       	subi	r18, 0x38	; 56
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	32 83       	std	Z+2, r19	; 0x02
    1182:	21 83       	std	Z+1, r18	; 0x01
    1184:	23 81       	ldd	r18, Z+3	; 0x03
    1186:	21 11       	cpse	r18, r1
    1188:	96 c0       	rjmp	.+300    	; 0x12b6 <qtm_key_sensors_process+0x674>
    118a:	24 81       	ldd	r18, Z+4	; 0x04
    118c:	22 23       	and	r18, r18
    118e:	11 f0       	breq	.+4      	; 0x1194 <qtm_key_sensors_process+0x552>
    1190:	21 50       	subi	r18, 0x01	; 1
    1192:	24 83       	std	Z+4, r18	; 0x04
    1194:	e8 81       	ld	r30, Y
    1196:	f9 81       	ldd	r31, Y+1	; 0x01
    1198:	25 81       	ldd	r18, Z+5	; 0x05
    119a:	22 23       	and	r18, r18
    119c:	11 f0       	breq	.+4      	; 0x11a2 <qtm_key_sensors_process+0x560>
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	25 83       	std	Z+5, r18	; 0x05
    11a2:	8a 80       	ldd	r8, Y+2	; 0x02
    11a4:	9b 80       	ldd	r9, Y+3	; 0x03
    11a6:	d4 01       	movw	r26, r8
    11a8:	16 96       	adiw	r26, 0x06	; 6
    11aa:	2c 91       	ld	r18, X
    11ac:	16 97       	sbiw	r26, 0x06	; 6
    11ae:	21 11       	cpse	r18, r1
    11b0:	1b c0       	rjmp	.+54     	; 0x11e8 <qtm_key_sensors_process+0x5a6>
    11b2:	8a 80       	ldd	r8, Y+2	; 0x02
    11b4:	9b 80       	ldd	r9, Y+3	; 0x03
    11b6:	f4 01       	movw	r30, r8
    11b8:	27 81       	ldd	r18, Z+7	; 0x07
    11ba:	21 11       	cpse	r18, r1
    11bc:	48 c0       	rjmp	.+144    	; 0x124e <qtm_key_sensors_process+0x60c>
    11be:	ea 81       	ldd	r30, Y+2	; 0x02
    11c0:	fb 81       	ldd	r31, Y+3	; 0x03
    11c2:	23 81       	ldd	r18, Z+3	; 0x03
    11c4:	22 23       	and	r18, r18
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <qtm_key_sensors_process+0x59e>
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ea 81       	ldd	r30, Y+2	; 0x02
    11d2:	fb 81       	ldd	r31, Y+3	; 0x03
    11d4:	40 81       	ld	r20, Z
    11d6:	51 81       	ldd	r21, Z+1	; 0x01
    11d8:	a4 17       	cp	r26, r20
    11da:	b5 07       	cpc	r27, r21
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <qtm_key_sensors_process+0x59e>
    11de:	6e c0       	rjmp	.+220    	; 0x12bc <qtm_key_sensors_process+0x67a>
    11e0:	89 3c       	cpi	r24, 0xC9	; 201
    11e2:	91 05       	cpc	r25, r1
    11e4:	28 f6       	brcc	.-118    	; 0x1170 <qtm_key_sensors_process+0x52e>
    11e6:	bb cf       	rjmp	.-138    	; 0x115e <qtm_key_sensors_process+0x51c>
    11e8:	08 81       	ld	r16, Y
    11ea:	19 81       	ldd	r17, Y+1	; 0x01
    11ec:	f8 01       	movw	r30, r16
    11ee:	24 81       	ldd	r18, Z+4	; 0x04
    11f0:	21 11       	cpse	r18, r1
    11f2:	df cf       	rjmp	.-66     	; 0x11b2 <qtm_key_sensors_process+0x570>
    11f4:	ed 90       	ld	r14, X+
    11f6:	fc 90       	ld	r15, X
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	4e 15       	cp	r20, r14
    1202:	5f 05       	cpc	r21, r15
    1204:	f1 f0       	breq	.+60     	; 0x1242 <qtm_key_sensors_process+0x600>
    1206:	ec 81       	ldd	r30, Y+4	; 0x04
    1208:	fd 81       	ldd	r31, Y+5	; 0x05
    120a:	e6 0f       	add	r30, r22
    120c:	f7 1f       	adc	r31, r23
    120e:	20 81       	ld	r18, Z
    1210:	23 30       	cpi	r18, 0x03	; 3
    1212:	11 f0       	breq	.+4      	; 0x1218 <qtm_key_sensors_process+0x5d6>
    1214:	28 30       	cpi	r18, 0x08	; 8
    1216:	81 f4       	brne	.+32     	; 0x1238 <qtm_key_sensors_process+0x5f6>
    1218:	24 81       	ldd	r18, Z+4	; 0x04
    121a:	35 81       	ldd	r19, Z+5	; 0x05
    121c:	c2 80       	ldd	r12, Z+2	; 0x02
    121e:	d3 80       	ldd	r13, Z+3	; 0x03
    1220:	d6 01       	movw	r26, r12
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	cd 90       	ld	r12, X+
    1226:	dc 90       	ld	r13, X
    1228:	12 97       	sbiw	r26, 0x02	; 2
    122a:	2c 15       	cp	r18, r12
    122c:	3d 05       	cpc	r19, r13
    122e:	20 f4       	brcc	.+8      	; 0x1238 <qtm_key_sensors_process+0x5f6>
    1230:	2f 5f       	subi	r18, 0xFF	; 255
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	35 83       	std	Z+5, r19	; 0x05
    1236:	24 83       	std	Z+4, r18	; 0x04
    1238:	4f 5f       	subi	r20, 0xFF	; 255
    123a:	5f 4f       	sbci	r21, 0xFF	; 255
    123c:	6a 5f       	subi	r22, 0xFA	; 250
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	df cf       	rjmp	.-66     	; 0x1200 <qtm_key_sensors_process+0x5be>
    1242:	f4 01       	movw	r30, r8
    1244:	26 81       	ldd	r18, Z+6	; 0x06
    1246:	d8 01       	movw	r26, r16
    1248:	14 96       	adiw	r26, 0x04	; 4
    124a:	2c 93       	st	X, r18
    124c:	b2 cf       	rjmp	.-156    	; 0x11b2 <qtm_key_sensors_process+0x570>
    124e:	08 81       	ld	r16, Y
    1250:	19 81       	ldd	r17, Y+1	; 0x01
    1252:	d8 01       	movw	r26, r16
    1254:	15 96       	adiw	r26, 0x05	; 5
    1256:	2c 91       	ld	r18, X
    1258:	21 11       	cpse	r18, r1
    125a:	b1 cf       	rjmp	.-158    	; 0x11be <qtm_key_sensors_process+0x57c>
    125c:	e0 80       	ld	r14, Z
    125e:	f1 80       	ldd	r15, Z+1	; 0x01
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	40 e0       	ldi	r20, 0x00	; 0
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	4e 15       	cp	r20, r14
    126a:	5f 05       	cpc	r21, r15
    126c:	f1 f0       	breq	.+60     	; 0x12aa <qtm_key_sensors_process+0x668>
    126e:	ec 81       	ldd	r30, Y+4	; 0x04
    1270:	fd 81       	ldd	r31, Y+5	; 0x05
    1272:	e6 0f       	add	r30, r22
    1274:	f7 1f       	adc	r31, r23
    1276:	20 81       	ld	r18, Z
    1278:	23 30       	cpi	r18, 0x03	; 3
    127a:	11 f0       	breq	.+4      	; 0x1280 <qtm_key_sensors_process+0x63e>
    127c:	28 30       	cpi	r18, 0x08	; 8
    127e:	81 f4       	brne	.+32     	; 0x12a0 <qtm_key_sensors_process+0x65e>
    1280:	24 81       	ldd	r18, Z+4	; 0x04
    1282:	35 81       	ldd	r19, Z+5	; 0x05
    1284:	c2 80       	ldd	r12, Z+2	; 0x02
    1286:	d3 80       	ldd	r13, Z+3	; 0x03
    1288:	d6 01       	movw	r26, r12
    128a:	11 96       	adiw	r26, 0x01	; 1
    128c:	cd 90       	ld	r12, X+
    128e:	dc 90       	ld	r13, X
    1290:	12 97       	sbiw	r26, 0x02	; 2
    1292:	c2 16       	cp	r12, r18
    1294:	d3 06       	cpc	r13, r19
    1296:	20 f4       	brcc	.+8      	; 0x12a0 <qtm_key_sensors_process+0x65e>
    1298:	21 50       	subi	r18, 0x01	; 1
    129a:	31 09       	sbc	r19, r1
    129c:	35 83       	std	Z+5, r19	; 0x05
    129e:	24 83       	std	Z+4, r18	; 0x04
    12a0:	4f 5f       	subi	r20, 0xFF	; 255
    12a2:	5f 4f       	sbci	r21, 0xFF	; 255
    12a4:	6a 5f       	subi	r22, 0xFA	; 250
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	df cf       	rjmp	.-66     	; 0x1268 <qtm_key_sensors_process+0x626>
    12aa:	f4 01       	movw	r30, r8
    12ac:	27 81       	ldd	r18, Z+7	; 0x07
    12ae:	d8 01       	movw	r26, r16
    12b0:	15 96       	adiw	r26, 0x05	; 5
    12b2:	2c 93       	st	X, r18
    12b4:	84 cf       	rjmp	.-248    	; 0x11be <qtm_key_sensors_process+0x57c>
    12b6:	21 50       	subi	r18, 0x01	; 1
    12b8:	23 83       	std	Z+3, r18	; 0x03
    12ba:	81 cf       	rjmp	.-254    	; 0x11be <qtm_key_sensors_process+0x57c>
    12bc:	a9 01       	movw	r20, r18
    12be:	44 0f       	add	r20, r20
    12c0:	55 1f       	adc	r21, r21
    12c2:	ec 81       	ldd	r30, Y+4	; 0x04
    12c4:	fd 81       	ldd	r31, Y+5	; 0x05
    12c6:	e4 0f       	add	r30, r20
    12c8:	f5 1f       	adc	r31, r21
    12ca:	60 81       	ld	r22, Z
    12cc:	65 38       	cpi	r22, 0x85	; 133
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <qtm_key_sensors_process+0x690>
    12d0:	47 c0       	rjmp	.+142    	; 0x1360 <qtm_key_sensors_process+0x71e>
    12d2:	61 81       	ldd	r22, Z+1	; 0x01
    12d4:	66 23       	and	r22, r22
    12d6:	19 f0       	breq	.+6      	; 0x12de <qtm_key_sensors_process+0x69c>
    12d8:	61 50       	subi	r22, 0x01	; 1
    12da:	61 83       	std	Z+1, r22	; 0x01
    12dc:	41 c0       	rjmp	.+130    	; 0x1360 <qtm_key_sensors_process+0x71e>
    12de:	a0 82       	st	Z, r10
    12e0:	6c 81       	ldd	r22, Y+4	; 0x04
    12e2:	7d 81       	ldd	r23, Y+5	; 0x05
    12e4:	fb 01       	movw	r30, r22
    12e6:	e4 0f       	add	r30, r20
    12e8:	f5 1f       	adc	r31, r21
    12ea:	02 80       	ldd	r0, Z+2	; 0x02
    12ec:	f3 81       	ldd	r31, Z+3	; 0x03
    12ee:	e0 2d       	mov	r30, r0
    12f0:	b0 82       	st	Z, r11
    12f2:	ee 81       	ldd	r30, Y+6	; 0x06
    12f4:	ff 81       	ldd	r31, Y+7	; 0x07
    12f6:	e2 0f       	add	r30, r18
    12f8:	f3 1f       	adc	r31, r19
    12fa:	d2 80       	ldd	r13, Z+2	; 0x02
    12fc:	dd 20       	and	r13, r13
    12fe:	81 f1       	breq	.+96     	; 0x1360 <qtm_key_sensors_process+0x71e>
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	ea 81       	ldd	r30, Y+2	; 0x02
    130a:	fb 81       	ldd	r31, Y+3	; 0x03
    130c:	60 81       	ld	r22, Z
    130e:	71 81       	ldd	r23, Z+1	; 0x01
    1310:	06 17       	cp	r16, r22
    1312:	17 07       	cpc	r17, r23
    1314:	28 f5       	brcc	.+74     	; 0x1360 <qtm_key_sensors_process+0x71e>
    1316:	ee 81       	ldd	r30, Y+6	; 0x06
    1318:	ff 81       	ldd	r31, Y+7	; 0x07
    131a:	e4 0f       	add	r30, r20
    131c:	f5 1f       	adc	r31, r21
    131e:	62 81       	ldd	r22, Z+2	; 0x02
    1320:	d6 12       	cpse	r13, r22
    1322:	19 c0       	rjmp	.+50     	; 0x1356 <qtm_key_sensors_process+0x714>
    1324:	ba 01       	movw	r22, r20
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	ec 81       	ldd	r30, Y+4	; 0x04
    132c:	fd 81       	ldd	r31, Y+5	; 0x05
    132e:	4f 01       	movw	r8, r30
    1330:	86 0e       	add	r8, r22
    1332:	97 1e       	adc	r9, r23
    1334:	f4 01       	movw	r30, r8
    1336:	e2 80       	ldd	r14, Z+2	; 0x02
    1338:	f3 80       	ldd	r15, Z+3	; 0x03
    133a:	f7 01       	movw	r30, r14
    133c:	f0 80       	ld	r15, Z
    133e:	f0 fe       	sbrs	r15, 0
    1340:	0a c0       	rjmp	.+20     	; 0x1356 <qtm_key_sensors_process+0x714>
    1342:	f4 01       	movw	r30, r8
    1344:	a0 82       	st	Z, r10
    1346:	ec 81       	ldd	r30, Y+4	; 0x04
    1348:	fd 81       	ldd	r31, Y+5	; 0x05
    134a:	e6 0f       	add	r30, r22
    134c:	f7 1f       	adc	r31, r23
    134e:	02 80       	ldd	r0, Z+2	; 0x02
    1350:	f3 81       	ldd	r31, Z+3	; 0x03
    1352:	e0 2d       	mov	r30, r0
    1354:	b0 82       	st	Z, r11
    1356:	0f 5f       	subi	r16, 0xFF	; 255
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	4d 5f       	subi	r20, 0xFD	; 253
    135c:	5f 4f       	sbci	r21, 0xFF	; 255
    135e:	d4 cf       	rjmp	.-88     	; 0x1308 <qtm_key_sensors_process+0x6c6>
    1360:	11 96       	adiw	r26, 0x01	; 1
    1362:	2d 5f       	subi	r18, 0xFD	; 253
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	34 cf       	rjmp	.-408    	; 0x11d0 <qtm_key_sensors_process+0x58e>
    1368:	8b e0       	ldi	r24, 0x0B	; 11
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	df 90       	pop	r13
    1378:	cf 90       	pop	r12
    137a:	bf 90       	pop	r11
    137c:	af 90       	pop	r10
    137e:	9f 90       	pop	r9
    1380:	8f 90       	pop	r8
    1382:	7f 90       	pop	r7
    1384:	6f 90       	pop	r6
    1386:	5f 90       	pop	r5
    1388:	4f 90       	pop	r4
    138a:	3f 90       	pop	r3
    138c:	2f 90       	pop	r2
    138e:	08 95       	ret

00001390 <select_next_channel_to_measure>:
    1390:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_measure_channel>
    1394:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <current_measure_channel+0x1>
    1398:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    139c:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    13a0:	ed 91       	ld	r30, X+
    13a2:	fc 91       	ld	r31, X
    13a4:	11 97       	sbiw	r26, 0x01	; 1
    13a6:	40 81       	ld	r20, Z
    13a8:	51 81       	ldd	r21, Z+1	; 0x01
    13aa:	25 e0       	ldi	r18, 0x05	; 5
    13ac:	28 9f       	mul	r18, r24
    13ae:	b0 01       	movw	r22, r0
    13b0:	29 9f       	mul	r18, r25
    13b2:	70 0d       	add	r23, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	84 17       	cp	r24, r20
    13bc:	95 07       	cpc	r25, r21
    13be:	a8 f4       	brcc	.+42     	; 0x13ea <select_next_channel_to_measure+0x5a>
    13c0:	14 96       	adiw	r26, 0x04	; 4
    13c2:	ed 91       	ld	r30, X+
    13c4:	fc 91       	ld	r31, X
    13c6:	15 97       	sbiw	r26, 0x05	; 5
    13c8:	e2 0f       	add	r30, r18
    13ca:	f3 1f       	adc	r31, r19
    13cc:	e6 0f       	add	r30, r22
    13ce:	f7 1f       	adc	r31, r23
    13d0:	e0 81       	ld	r30, Z
    13d2:	2b 5f       	subi	r18, 0xFB	; 251
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	e0 fd       	sbrc	r30, 0
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <select_next_channel_to_measure+0x4e>
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	ee cf       	rjmp	.-36     	; 0x13ba <select_next_channel_to_measure+0x2a>
    13de:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <current_measure_channel+0x1>
    13e2:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <current_measure_channel>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	08 95       	ret
    13ea:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <current_measure_channel+0x1>
    13ee:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <current_measure_channel>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	08 95       	ret

000013f6 <qtm_measure_node>:
    13f6:	4a e0       	ldi	r20, 0x0A	; 10
    13f8:	48 9f       	mul	r20, r24
    13fa:	90 01       	movw	r18, r0
    13fc:	49 9f       	mul	r20, r25
    13fe:	30 0d       	add	r19, r0
    1400:	11 24       	eor	r1, r1
    1402:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    1406:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    140a:	02 80       	ldd	r0, Z+2	; 0x02
    140c:	f3 81       	ldd	r31, Z+3	; 0x03
    140e:	e0 2d       	mov	r30, r0
    1410:	e2 0f       	add	r30, r18
    1412:	f3 1f       	adc	r31, r19
    1414:	42 81       	ldd	r20, Z+2	; 0x02
    1416:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7f80f8>
    141a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    141e:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    1422:	02 80       	ldd	r0, Z+2	; 0x02
    1424:	f3 81       	ldd	r31, Z+3	; 0x03
    1426:	e0 2d       	mov	r30, r0
    1428:	e2 0f       	add	r30, r18
    142a:	f3 1f       	adc	r31, r19
    142c:	43 81       	ldd	r20, Z+3	; 0x03
    142e:	40 93 f9 00 	sts	0x00F9, r20	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7f80f9>
    1432:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    1436:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    143a:	02 80       	ldd	r0, Z+2	; 0x02
    143c:	f3 81       	ldd	r31, Z+3	; 0x03
    143e:	e0 2d       	mov	r30, r0
    1440:	e2 0f       	add	r30, r18
    1442:	f3 1f       	adc	r31, r19
    1444:	44 81       	ldd	r20, Z+4	; 0x04
    1446:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
    144a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    144e:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    1452:	02 80       	ldd	r0, Z+2	; 0x02
    1454:	f3 81       	ldd	r31, Z+3	; 0x03
    1456:	e0 2d       	mov	r30, r0
    1458:	e2 0f       	add	r30, r18
    145a:	f3 1f       	adc	r31, r19
    145c:	42 81       	ldd	r20, Z+2	; 0x02
    145e:	53 81       	ldd	r21, Z+3	; 0x03
    1460:	64 81       	ldd	r22, Z+4	; 0x04
    1462:	75 81       	ldd	r23, Z+5	; 0x05
    1464:	47 2f       	mov	r20, r23
    1466:	55 27       	eor	r21, r21
    1468:	66 27       	eor	r22, r22
    146a:	77 27       	eor	r23, r23
    146c:	40 93 fb 00 	sts	0x00FB, r20	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7f80fb>
    1470:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    1474:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    1478:	02 80       	ldd	r0, Z+2	; 0x02
    147a:	f3 81       	ldd	r31, Z+3	; 0x03
    147c:	e0 2d       	mov	r30, r0
    147e:	e2 0f       	add	r30, r18
    1480:	f3 1f       	adc	r31, r19
    1482:	40 81       	ld	r20, Z
    1484:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1488:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    148c:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    1490:	02 80       	ldd	r0, Z+2	; 0x02
    1492:	f3 81       	ldd	r31, Z+3	; 0x03
    1494:	e0 2d       	mov	r30, r0
    1496:	e2 0f       	add	r30, r18
    1498:	f3 1f       	adc	r31, r19
    149a:	41 81       	ldd	r20, Z+1	; 0x01
    149c:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    14a0:	65 e0       	ldi	r22, 0x05	; 5
    14a2:	68 9f       	mul	r22, r24
    14a4:	a0 01       	movw	r20, r0
    14a6:	69 9f       	mul	r22, r25
    14a8:	50 0d       	add	r21, r0
    14aa:	11 24       	eor	r1, r1
    14ac:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    14b0:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    14b4:	04 80       	ldd	r0, Z+4	; 0x04
    14b6:	f5 81       	ldd	r31, Z+5	; 0x05
    14b8:	e0 2d       	mov	r30, r0
    14ba:	e4 0f       	add	r30, r20
    14bc:	f5 1f       	adc	r31, r21
    14be:	83 81       	ldd	r24, Z+3	; 0x03
    14c0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    14c4:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    14c8:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    14cc:	04 80       	ldd	r0, Z+4	; 0x04
    14ce:	f5 81       	ldd	r31, Z+5	; 0x05
    14d0:	e0 2d       	mov	r30, r0
    14d2:	e4 0f       	add	r30, r20
    14d4:	f5 1f       	adc	r31, r21
    14d6:	83 81       	ldd	r24, Z+3	; 0x03
    14d8:	94 81       	ldd	r25, Z+4	; 0x04
    14da:	88 27       	eor	r24, r24
    14dc:	9f 73       	andi	r25, 0x3F	; 63
    14de:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7f80e6>
    14e2:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    14e6:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    14ea:	14 96       	adiw	r26, 0x04	; 4
    14ec:	ed 91       	ld	r30, X+
    14ee:	fc 91       	ld	r31, X
    14f0:	15 97       	sbiw	r26, 0x05	; 5
    14f2:	e4 0f       	add	r30, r20
    14f4:	f5 1f       	adc	r31, r21
    14f6:	80 81       	ld	r24, Z
    14f8:	81 fd       	sbrc	r24, 1
    14fa:	60 83       	st	Z, r22
    14fc:	14 96       	adiw	r26, 0x04	; 4
    14fe:	8d 91       	ld	r24, X+
    1500:	9c 91       	ld	r25, X
    1502:	15 97       	sbiw	r26, 0x05	; 5
    1504:	fc 01       	movw	r30, r24
    1506:	e4 0f       	add	r30, r20
    1508:	f5 1f       	adc	r31, r21
    150a:	80 81       	ld	r24, Z
    150c:	8c 71       	andi	r24, 0x1C	; 28
    150e:	71 f4       	brne	.+28     	; 0x152c <qtm_measure_node+0x136>
    1510:	12 96       	adiw	r26, 0x02	; 2
    1512:	ed 91       	ld	r30, X+
    1514:	fc 91       	ld	r31, X
    1516:	13 97       	sbiw	r26, 0x03	; 3
    1518:	e2 0f       	add	r30, r18
    151a:	f3 1f       	adc	r31, r19
    151c:	e0 85       	ldd	r30, Z+8	; 0x08
    151e:	e2 95       	swap	r30
    1520:	ef 70       	andi	r30, 0x0F	; 15
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	ec 59       	subi	r30, 0x9C	; 156
    1526:	fe 4f       	sbci	r31, 0xFE	; 254
    1528:	80 81       	ld	r24, Z
    152a:	01 c0       	rjmp	.+2      	; 0x152e <qtm_measure_node+0x138>
    152c:	8f e3       	ldi	r24, 0x3F	; 63
    152e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7f80e7>
    1532:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    1536:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    153a:	02 80       	ldd	r0, Z+2	; 0x02
    153c:	f3 81       	ldd	r31, Z+3	; 0x03
    153e:	e0 2d       	mov	r30, r0
    1540:	e2 0f       	add	r30, r18
    1542:	f3 1f       	adc	r31, r19
    1544:	86 81       	ldd	r24, Z+6	; 0x06
    1546:	8b 3f       	cpi	r24, 0xFB	; 251
    1548:	10 f4       	brcc	.+4      	; 0x154e <qtm_measure_node+0x158>
    154a:	8c 5f       	subi	r24, 0xFC	; 252
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <qtm_measure_node+0x15a>
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1554:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    1558:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    155c:	02 80       	ldd	r0, Z+2	; 0x02
    155e:	f3 81       	ldd	r31, Z+3	; 0x03
    1560:	e0 2d       	mov	r30, r0
    1562:	e2 0f       	add	r30, r18
    1564:	f3 1f       	adc	r31, r19
    1566:	87 81       	ldd	r24, Z+7	; 0x07
    1568:	80 7f       	andi	r24, 0xF0	; 240
    156a:	91 85       	ldd	r25, Z+9	; 0x09
    156c:	89 2b       	or	r24, r25
    156e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1572:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    1576:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	fc 01       	movw	r30, r24
    1580:	e2 0f       	add	r30, r18
    1582:	f3 1f       	adc	r31, r19
    1584:	87 81       	ldd	r24, Z+7	; 0x07
    1586:	8f 70       	andi	r24, 0x0F	; 15
    1588:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    158c:	82 e1       	ldi	r24, 0x12	; 18
    158e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1592:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1596:	81 60       	ori	r24, 0x01	; 1
    1598:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    159c:	08 95       	ret

0000159e <qtm_acquisition_process>:
    159e:	4f 92       	push	r4
    15a0:	5f 92       	push	r5
    15a2:	6f 92       	push	r6
    15a4:	7f 92       	push	r7
    15a6:	8f 92       	push	r8
    15a8:	9f 92       	push	r9
    15aa:	af 92       	push	r10
    15ac:	bf 92       	push	r11
    15ae:	cf 92       	push	r12
    15b0:	df 92       	push	r13
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <touch_seq_lib_state>
    15c2:	88 23       	and	r24, r24
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <qtm_acquisition_process+0x2a>
    15c6:	31 c1       	rjmp	.+610    	; 0x182a <qtm_acquisition_process+0x28c>
    15c8:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    15cc:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    15d0:	e0 90 d4 01 	lds	r14, 0x01D4	; 0x8001d4 <qtm_raw_data_measurements_ptr>
    15d4:	f0 90 d5 01 	lds	r15, 0x01D5	; 0x8001d5 <qtm_raw_data_measurements_ptr+0x1>
    15d8:	41 2c       	mov	r4, r1
    15da:	51 2c       	mov	r5, r1
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	00 e0       	ldi	r16, 0x00	; 0
    15e2:	10 e0       	ldi	r17, 0x00	; 0
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	66 24       	eor	r6, r6
    15e8:	63 94       	inc	r6
    15ea:	91 e8       	ldi	r25, 0x81	; 129
    15ec:	79 2e       	mov	r7, r25
    15ee:	aa 24       	eor	r10, r10
    15f0:	aa 94       	dec	r10
    15f2:	bb 24       	eor	r11, r11
    15f4:	b3 94       	inc	r11
    15f6:	cd 90       	ld	r12, X+
    15f8:	dc 90       	ld	r13, X
    15fa:	11 97       	sbiw	r26, 0x01	; 1
    15fc:	f6 01       	movw	r30, r12
    15fe:	20 81       	ld	r18, Z
    1600:	31 81       	ldd	r19, Z+1	; 0x01
    1602:	02 17       	cp	r16, r18
    1604:	13 07       	cpc	r17, r19
    1606:	08 f0       	brcs	.+2      	; 0x160a <qtm_acquisition_process+0x6c>
    1608:	0c c1       	rjmp	.+536    	; 0x1822 <qtm_acquisition_process+0x284>
    160a:	e7 01       	movw	r28, r14
    160c:	29 91       	ld	r18, Y+
    160e:	39 91       	ld	r19, Y+
    1610:	7e 01       	movw	r14, r28
    1612:	14 96       	adiw	r26, 0x04	; 4
    1614:	ed 91       	ld	r30, X+
    1616:	fc 91       	ld	r31, X
    1618:	15 97       	sbiw	r26, 0x05	; 5
    161a:	e6 0f       	add	r30, r22
    161c:	f7 1f       	adc	r31, r23
    161e:	40 81       	ld	r20, Z
    1620:	4c 71       	andi	r20, 0x1C	; 28
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	56 95       	lsr	r21
    1626:	47 95       	ror	r20
    1628:	56 95       	lsr	r21
    162a:	47 95       	ror	r20
    162c:	41 15       	cp	r20, r1
    162e:	51 05       	cpc	r21, r1
    1630:	21 f0       	breq	.+8      	; 0x163a <qtm_acquisition_process+0x9c>
    1632:	41 30       	cpi	r20, 0x01	; 1
    1634:	51 05       	cpc	r21, r1
    1636:	c1 f0       	breq	.+48     	; 0x1668 <qtm_acquisition_process+0xca>
    1638:	eb c0       	rjmp	.+470    	; 0x1810 <qtm_acquisition_process+0x272>
    163a:	12 96       	adiw	r26, 0x02	; 2
    163c:	4d 91       	ld	r20, X+
    163e:	5c 91       	ld	r21, X
    1640:	13 97       	sbiw	r26, 0x03	; 3
    1642:	44 0d       	add	r20, r4
    1644:	55 1d       	adc	r21, r5
    1646:	ea 01       	movw	r28, r20
    1648:	98 85       	ldd	r25, Y+8	; 0x08
    164a:	9f 70       	andi	r25, 0x0F	; 15
    164c:	49 85       	ldd	r20, Y+9	; 0x09
    164e:	94 17       	cp	r25, r20
    1650:	10 f4       	brcc	.+4      	; 0x1656 <qtm_acquisition_process+0xb8>
    1652:	49 1b       	sub	r20, r25
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <qtm_acquisition_process+0xba>
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	02 c0       	rjmp	.+4      	; 0x165e <qtm_acquisition_process+0xc0>
    165a:	36 95       	lsr	r19
    165c:	27 95       	ror	r18
    165e:	4a 95       	dec	r20
    1660:	e2 f7       	brpl	.-8      	; 0x165a <qtm_acquisition_process+0xbc>
    1662:	32 83       	std	Z+2, r19	; 0x02
    1664:	21 83       	std	Z+1, r18	; 0x01
    1666:	d5 c0       	rjmp	.+426    	; 0x1812 <qtm_acquisition_process+0x274>
    1668:	12 96       	adiw	r26, 0x02	; 2
    166a:	4d 91       	ld	r20, X+
    166c:	5c 91       	ld	r21, X
    166e:	13 97       	sbiw	r26, 0x03	; 3
    1670:	44 0d       	add	r20, r4
    1672:	55 1d       	adc	r21, r5
    1674:	ea 01       	movw	r28, r20
    1676:	09 84       	ldd	r0, Y+9	; 0x09
    1678:	02 c0       	rjmp	.+4      	; 0x167e <qtm_acquisition_process+0xe0>
    167a:	36 95       	lsr	r19
    167c:	27 95       	ror	r18
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <qtm_acquisition_process+0xdc>
    1682:	32 83       	std	Z+2, r19	; 0x02
    1684:	21 83       	std	Z+1, r18	; 0x01
    1686:	43 81       	ldd	r20, Z+3	; 0x03
    1688:	54 81       	ldd	r21, Z+4	; 0x04
    168a:	21 15       	cp	r18, r1
    168c:	d2 e0       	ldi	r29, 0x02	; 2
    168e:	3d 07       	cpc	r19, r29
    1690:	20 f0       	brcs	.+8      	; 0x169a <qtm_acquisition_process+0xfc>
    1692:	2f 5f       	subi	r18, 0xFF	; 255
    1694:	31 40       	sbci	r19, 0x01	; 1
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <qtm_acquisition_process+0x106>
    169a:	e5 01       	movw	r28, r10
    169c:	c2 1b       	sub	r28, r18
    169e:	d3 0b       	sbc	r29, r19
    16a0:	9e 01       	movw	r18, r28
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	e6 01       	movw	r28, r12
    16a6:	da 80       	ldd	r13, Y+2	; 0x02
    16a8:	d0 e4       	ldi	r29, 0x40	; 64
    16aa:	dd 12       	cpse	r13, r29
    16ac:	05 c0       	rjmp	.+10     	; 0x16b8 <qtm_acquisition_process+0x11a>
    16ae:	36 95       	lsr	r19
    16b0:	27 95       	ror	r18
    16b2:	99 23       	and	r25, r25
    16b4:	19 f0       	breq	.+6      	; 0x16bc <qtm_acquisition_process+0x11e>
    16b6:	09 c0       	rjmp	.+18     	; 0x16ca <qtm_acquisition_process+0x12c>
    16b8:	99 23       	and	r25, r25
    16ba:	39 f0       	breq	.+14     	; 0x16ca <qtm_acquisition_process+0x12c>
    16bc:	4f 3f       	cpi	r20, 0xFF	; 255
    16be:	9f e3       	ldi	r25, 0x3F	; 63
    16c0:	59 07       	cpc	r21, r25
    16c2:	31 f4       	brne	.+12     	; 0x16d0 <qtm_acquisition_process+0x132>
    16c4:	70 82       	st	Z, r7
    16c6:	8e e0       	ldi	r24, 0x0E	; 14
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <qtm_acquisition_process+0x13a>
    16ca:	88 24       	eor	r8, r8
    16cc:	83 94       	inc	r8
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <qtm_acquisition_process+0x134>
    16d0:	81 2c       	mov	r8, r1
    16d2:	2a 30       	cpi	r18, 0x0A	; 10
    16d4:	31 05       	cpc	r19, r1
    16d6:	98 f4       	brcc	.+38     	; 0x16fe <qtm_acquisition_process+0x160>
    16d8:	14 96       	adiw	r26, 0x04	; 4
    16da:	ed 91       	ld	r30, X+
    16dc:	fc 91       	ld	r31, X
    16de:	15 97       	sbiw	r26, 0x05	; 5
    16e0:	e6 0f       	add	r30, r22
    16e2:	f7 1f       	adc	r31, r23
    16e4:	20 81       	ld	r18, Z
    16e6:	27 ff       	sbrs	r18, 7
    16e8:	60 82       	st	Z, r6
    16ea:	14 96       	adiw	r26, 0x04	; 4
    16ec:	ed 91       	ld	r30, X+
    16ee:	fc 91       	ld	r31, X
    16f0:	15 97       	sbiw	r26, 0x05	; 5
    16f2:	e6 0f       	add	r30, r22
    16f4:	f7 1f       	adc	r31, r23
    16f6:	5f 73       	andi	r21, 0x3F	; 63
    16f8:	54 83       	std	Z+4, r21	; 0x04
    16fa:	43 83       	std	Z+3, r20	; 0x03
    16fc:	8a c0       	rjmp	.+276    	; 0x1812 <qtm_acquisition_process+0x274>
    16fe:	6a 01       	movw	r12, r20
    1700:	cc 24       	eor	r12, r12
    1702:	c0 e3       	ldi	r28, 0x30	; 48
    1704:	dc 22       	and	r13, r28
    1706:	9d 2c       	mov	r9, r13
    1708:	92 94       	swap	r9
    170a:	df e0       	ldi	r29, 0x0F	; 15
    170c:	9d 22       	and	r9, r29
    170e:	6a 01       	movw	r12, r20
    1710:	cc 24       	eor	r12, r12
    1712:	df e0       	ldi	r29, 0x0F	; 15
    1714:	dd 22       	and	r13, r29
    1716:	9d 2d       	mov	r25, r13
    1718:	6a 01       	movw	r12, r20
    171a:	c0 ef       	ldi	r28, 0xF0	; 240
    171c:	cc 22       	and	r12, r28
    171e:	dd 24       	eor	r13, r13
    1720:	54 e0       	ldi	r21, 0x04	; 4
    1722:	d6 94       	lsr	r13
    1724:	c7 94       	ror	r12
    1726:	5a 95       	dec	r21
    1728:	e1 f7       	brne	.-8      	; 0x1722 <qtm_acquisition_process+0x184>
    172a:	5c 2d       	mov	r21, r12
    172c:	4f 70       	andi	r20, 0x0F	; 15
    172e:	81 10       	cpse	r8, r1
    1730:	32 c0       	rjmp	.+100    	; 0x1796 <qtm_acquisition_process+0x1f8>
    1732:	20 3d       	cpi	r18, 0xD0	; 208
    1734:	31 05       	cpc	r19, r1
    1736:	60 f0       	brcs	.+24     	; 0x1750 <qtm_acquisition_process+0x1b2>
    1738:	d3 e0       	ldi	r29, 0x03	; 3
    173a:	9d 16       	cp	r9, r29
    173c:	49 f0       	breq	.+18     	; 0x1750 <qtm_acquisition_process+0x1b2>
    173e:	93 94       	inc	r9
    1740:	2f 5c       	subi	r18, 0xCF	; 207
    1742:	31 09       	sbc	r19, r1
    1744:	f6 cf       	rjmp	.-20     	; 0x1732 <qtm_acquisition_process+0x194>
    1746:	9f 30       	cpi	r25, 0x0F	; 15
    1748:	41 f0       	breq	.+16     	; 0x175a <qtm_acquisition_process+0x1bc>
    174a:	9f 5f       	subi	r25, 0xFF	; 255
    174c:	25 51       	subi	r18, 0x15	; 21
    174e:	31 09       	sbc	r19, r1
    1750:	26 31       	cpi	r18, 0x16	; 22
    1752:	31 05       	cpc	r19, r1
    1754:	c0 f7       	brcc	.-16     	; 0x1746 <qtm_acquisition_process+0x1a8>
    1756:	9f 30       	cpi	r25, 0x0F	; 15
    1758:	69 f4       	brne	.+26     	; 0x1774 <qtm_acquisition_process+0x1d6>
    175a:	93 e0       	ldi	r25, 0x03	; 3
    175c:	99 12       	cpse	r9, r25
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <qtm_acquisition_process+0x1c6>
    1760:	9f e0       	ldi	r25, 0x0F	; 15
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <qtm_acquisition_process+0x1d6>
    1764:	93 94       	inc	r9
    1766:	95 e0       	ldi	r25, 0x05	; 5
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <qtm_acquisition_process+0x1d6>
    176a:	5f 30       	cpi	r21, 0x0F	; 15
    176c:	49 f0       	breq	.+18     	; 0x1780 <qtm_acquisition_process+0x1e2>
    176e:	5f 5f       	subi	r21, 0xFF	; 255
    1770:	22 50       	subi	r18, 0x02	; 2
    1772:	31 09       	sbc	r19, r1
    1774:	23 30       	cpi	r18, 0x03	; 3
    1776:	31 05       	cpc	r19, r1
    1778:	c0 f7       	brcc	.-16     	; 0x176a <qtm_acquisition_process+0x1cc>
    177a:	5f 30       	cpi	r21, 0x0F	; 15
    177c:	09 f0       	breq	.+2      	; 0x1780 <qtm_acquisition_process+0x1e2>
    177e:	5b c0       	rjmp	.+182    	; 0x1836 <qtm_acquisition_process+0x298>
    1780:	9f 30       	cpi	r25, 0x0F	; 15
    1782:	09 f4       	brne	.+2      	; 0x1786 <qtm_acquisition_process+0x1e8>
    1784:	54 c0       	rjmp	.+168    	; 0x182e <qtm_acquisition_process+0x290>
    1786:	9f 5f       	subi	r25, 0xFF	; 255
    1788:	55 e0       	ldi	r21, 0x05	; 5
    178a:	55 c0       	rjmp	.+170    	; 0x1836 <qtm_acquisition_process+0x298>
    178c:	99 20       	and	r9, r9
    178e:	61 f0       	breq	.+24     	; 0x17a8 <qtm_acquisition_process+0x20a>
    1790:	9a 94       	dec	r9
    1792:	2f 5c       	subi	r18, 0xCF	; 207
    1794:	31 09       	sbc	r19, r1
    1796:	20 3d       	cpi	r18, 0xD0	; 208
    1798:	31 05       	cpc	r19, r1
    179a:	c0 f7       	brcc	.-16     	; 0x178c <qtm_acquisition_process+0x1ee>
    179c:	05 c0       	rjmp	.+10     	; 0x17a8 <qtm_acquisition_process+0x20a>
    179e:	99 23       	and	r25, r25
    17a0:	41 f0       	breq	.+16     	; 0x17b2 <qtm_acquisition_process+0x214>
    17a2:	91 50       	subi	r25, 0x01	; 1
    17a4:	25 51       	subi	r18, 0x15	; 21
    17a6:	31 09       	sbc	r19, r1
    17a8:	26 31       	cpi	r18, 0x16	; 22
    17aa:	31 05       	cpc	r19, r1
    17ac:	c0 f7       	brcc	.-16     	; 0x179e <qtm_acquisition_process+0x200>
    17ae:	91 11       	cpse	r25, r1
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <qtm_acquisition_process+0x22c>
    17b2:	91 10       	cpse	r9, r1
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <qtm_acquisition_process+0x21c>
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <qtm_acquisition_process+0x22c>
    17ba:	9a 94       	dec	r9
    17bc:	9a e0       	ldi	r25, 0x0A	; 10
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <qtm_acquisition_process+0x22c>
    17c0:	55 23       	and	r21, r21
    17c2:	41 f0       	breq	.+16     	; 0x17d4 <qtm_acquisition_process+0x236>
    17c4:	51 50       	subi	r21, 0x01	; 1
    17c6:	22 50       	subi	r18, 0x02	; 2
    17c8:	31 09       	sbc	r19, r1
    17ca:	23 30       	cpi	r18, 0x03	; 3
    17cc:	31 05       	cpc	r19, r1
    17ce:	c0 f7       	brcc	.-16     	; 0x17c0 <qtm_acquisition_process+0x222>
    17d0:	51 11       	cpse	r21, r1
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <qtm_acquisition_process+0x250>
    17d4:	99 23       	and	r25, r25
    17d6:	b9 f1       	breq	.+110    	; 0x1846 <qtm_acquisition_process+0x2a8>
    17d8:	91 50       	subi	r25, 0x01	; 1
    17da:	5a e0       	ldi	r21, 0x0A	; 10
    17dc:	23 30       	cpi	r18, 0x03	; 3
    17de:	31 05       	cpc	r19, r1
    17e0:	d0 f6       	brcc	.-76     	; 0x1796 <qtm_acquisition_process+0x1f8>
    17e2:	05 c0       	rjmp	.+10     	; 0x17ee <qtm_acquisition_process+0x250>
    17e4:	23 30       	cpi	r18, 0x03	; 3
    17e6:	31 05       	cpc	r19, r1
    17e8:	58 f1       	brcs	.+86     	; 0x1840 <qtm_acquisition_process+0x2a2>
    17ea:	4f e0       	ldi	r20, 0x0F	; 15
    17ec:	5f e0       	ldi	r21, 0x0F	; 15
    17ee:	29 2d       	mov	r18, r9
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	32 2f       	mov	r19, r18
    17f4:	22 27       	eor	r18, r18
    17f6:	32 95       	swap	r19
    17f8:	30 7f       	andi	r19, 0xF0	; 240
    17fa:	39 2b       	or	r19, r25
    17fc:	24 2b       	or	r18, r20
    17fe:	c0 e1       	ldi	r28, 0x10	; 16
    1800:	5c 9f       	mul	r21, r28
    1802:	60 01       	movw	r12, r0
    1804:	11 24       	eor	r1, r1
    1806:	c2 2a       	or	r12, r18
    1808:	d3 2a       	or	r13, r19
    180a:	d4 82       	std	Z+4, r13	; 0x04
    180c:	c3 82       	std	Z+3, r12	; 0x03
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <qtm_acquisition_process+0x274>
    1810:	ff cf       	rjmp	.-2      	; 0x1810 <qtm_acquisition_process+0x272>
    1812:	0f 5f       	subi	r16, 0xFF	; 255
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	6b 5f       	subi	r22, 0xFB	; 251
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	da e0       	ldi	r29, 0x0A	; 10
    181c:	4d 0e       	add	r4, r29
    181e:	51 1c       	adc	r5, r1
    1820:	ea ce       	rjmp	.-556    	; 0x15f6 <qtm_acquisition_process+0x58>
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <touch_seq_lib_state>
    1828:	10 c0       	rjmp	.+32     	; 0x184a <qtm_acquisition_process+0x2ac>
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	0e c0       	rjmp	.+28     	; 0x184a <qtm_acquisition_process+0x2ac>
    182e:	53 e0       	ldi	r21, 0x03	; 3
    1830:	95 16       	cp	r9, r21
    1832:	c1 f2       	breq	.-80     	; 0x17e4 <qtm_acquisition_process+0x246>
    1834:	5f e0       	ldi	r21, 0x0F	; 15
    1836:	23 30       	cpi	r18, 0x03	; 3
    1838:	31 05       	cpc	r19, r1
    183a:	08 f0       	brcs	.+2      	; 0x183e <qtm_acquisition_process+0x2a0>
    183c:	7a cf       	rjmp	.-268    	; 0x1732 <qtm_acquisition_process+0x194>
    183e:	d7 cf       	rjmp	.-82     	; 0x17ee <qtm_acquisition_process+0x250>
    1840:	5f e0       	ldi	r21, 0x0F	; 15
    1842:	4f e0       	ldi	r20, 0x0F	; 15
    1844:	d4 cf       	rjmp	.-88     	; 0x17ee <qtm_acquisition_process+0x250>
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	d2 cf       	rjmp	.-92     	; 0x17ee <qtm_acquisition_process+0x250>
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	bf 90       	pop	r11
    185c:	af 90       	pop	r10
    185e:	9f 90       	pop	r9
    1860:	8f 90       	pop	r8
    1862:	7f 90       	pop	r7
    1864:	6f 90       	pop	r6
    1866:	5f 90       	pop	r5
    1868:	4f 90       	pop	r4
    186a:	08 95       	ret

0000186c <qtm_ptc_init_acquisition_module>:
    186c:	8f 92       	push	r8
    186e:	9f 92       	push	r9
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	09 f4       	brne	.+2      	; 0x1886 <qtm_ptc_init_acquisition_module+0x1a>
    1884:	76 c0       	rjmp	.+236    	; 0x1972 <qtm_ptc_init_acquisition_module+0x106>
    1886:	dc 01       	movw	r26, r24
    1888:	ed 91       	ld	r30, X+
    188a:	fc 91       	ld	r31, X
    188c:	c0 80       	ld	r12, Z
    188e:	d1 80       	ldd	r13, Z+1	; 0x01
    1890:	e1 2c       	mov	r14, r1
    1892:	f1 2c       	mov	r15, r1
    1894:	a0 e0       	ldi	r26, 0x00	; 0
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	ba 01       	movw	r22, r20
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	ac 15       	cp	r26, r12
    18a4:	bd 05       	cpc	r27, r13
    18a6:	b1 f0       	breq	.+44     	; 0x18d4 <qtm_ptc_init_acquisition_module+0x68>
    18a8:	ec 01       	movw	r28, r24
    18aa:	ea 81       	ldd	r30, Y+2	; 0x02
    18ac:	fb 81       	ldd	r31, Y+3	; 0x03
    18ae:	ee 0d       	add	r30, r14
    18b0:	ff 1d       	adc	r31, r15
    18b2:	a0 80       	ld	r10, Z
    18b4:	b1 80       	ldd	r11, Z+1	; 0x01
    18b6:	2a 29       	or	r18, r10
    18b8:	3b 29       	or	r19, r11
    18ba:	82 80       	ldd	r8, Z+2	; 0x02
    18bc:	93 80       	ldd	r9, Z+3	; 0x03
    18be:	a4 80       	ldd	r10, Z+4	; 0x04
    18c0:	b5 80       	ldd	r11, Z+5	; 0x05
    18c2:	48 29       	or	r20, r8
    18c4:	59 29       	or	r21, r9
    18c6:	6a 29       	or	r22, r10
    18c8:	7b 29       	or	r23, r11
    18ca:	11 96       	adiw	r26, 0x01	; 1
    18cc:	da e0       	ldi	r29, 0x0A	; 10
    18ce:	ed 0e       	add	r14, r29
    18d0:	f1 1c       	adc	r15, r1
    18d2:	e7 cf       	rjmp	.-50     	; 0x18a2 <qtm_ptc_init_acquisition_module+0x36>
    18d4:	41 15       	cp	r20, r1
    18d6:	51 05       	cpc	r21, r1
    18d8:	61 05       	cpc	r22, r1
    18da:	71 05       	cpc	r23, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <qtm_ptc_init_acquisition_module+0x74>
    18de:	4b c0       	rjmp	.+150    	; 0x1976 <qtm_ptc_init_acquisition_module+0x10a>
    18e0:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <touch_seq_lib_state>
    18e4:	4a 01       	movw	r8, r20
    18e6:	5b 01       	movw	r10, r22
    18e8:	88 24       	eor	r8, r8
    18ea:	aa 24       	eor	r10, r10
    18ec:	bb 24       	eor	r11, r11
    18ee:	6a 01       	movw	r12, r20
    18f0:	7b 01       	movw	r14, r22
    18f2:	cc 24       	eor	r12, r12
    18f4:	dd 24       	eor	r13, r13
    18f6:	ff 24       	eor	r15, r15
    18f8:	87 2f       	mov	r24, r23
    18fa:	99 27       	eor	r25, r25
    18fc:	aa 27       	eor	r26, r26
    18fe:	bb 27       	eor	r27, r27
    1900:	e1 11       	cpse	r30, r1
    1902:	17 c0       	rjmp	.+46     	; 0x1932 <qtm_ptc_init_acquisition_module+0xc6>
    1904:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1908:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    190c:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    1910:	89 2c       	mov	r8, r9
    1912:	9a 2c       	mov	r9, r10
    1914:	ab 2c       	mov	r10, r11
    1916:	bb 24       	eor	r11, r11
    1918:	80 92 f5 00 	sts	0x00F5, r8	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    191c:	67 01       	movw	r12, r14
    191e:	ee 24       	eor	r14, r14
    1920:	ff 24       	eor	r15, r15
    1922:	c0 92 f6 00 	sts	0x00F6, r12	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    1926:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <touch_seq_lib_state>
    1930:	1e c0       	rjmp	.+60     	; 0x196e <qtm_ptc_init_acquisition_module+0x102>
    1932:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1936:	2e 2b       	or	r18, r30
    1938:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    193c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1940:	23 2b       	or	r18, r19
    1942:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1946:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    194a:	42 2b       	or	r20, r18
    194c:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
    1950:	20 91 f5 00 	lds	r18, 0x00F5	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    1954:	29 29       	or	r18, r9
    1956:	20 93 f5 00 	sts	0x00F5, r18	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
    195a:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    195e:	2e 29       	or	r18, r14
    1960:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
    1964:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
    1968:	82 2b       	or	r24, r18
    196a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <qtm_ptc_init_acquisition_module+0x10c>
    1972:	8b e0       	ldi	r24, 0x0B	; 11
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <qtm_ptc_init_acquisition_module+0x10c>
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	df 90       	pop	r13
    1982:	cf 90       	pop	r12
    1984:	bf 90       	pop	r11
    1986:	af 90       	pop	r10
    1988:	9f 90       	pop	r9
    198a:	8f 90       	pop	r8
    198c:	08 95       	ret

0000198e <qtm_ptc_qtlib_assign_signal_memory>:
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	31 f0       	breq	.+12     	; 0x199e <qtm_ptc_qtlib_assign_signal_memory+0x10>
    1992:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <qtm_raw_data_measurements_ptr+0x1>
    1996:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <qtm_raw_data_measurements_ptr>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	08 95       	ret
    199e:	8b e0       	ldi	r24, 0x0B	; 11
    19a0:	08 95       	ret

000019a2 <qtm_ptc_start_measurement_seq>:
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <qtm_ptc_start_measurement_seq+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <qtm_ptc_start_measurement_seq+0x8>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <max_conversion_cycles>
    19b2:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <max_conversion_cycles+0x1>
    19b6:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <max_conversion_cycles+0x2>
    19ba:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <max_conversion_cycles+0x3>
    19be:	61 15       	cp	r22, r1
    19c0:	71 05       	cpc	r23, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <qtm_ptc_start_measurement_seq+0x24>
    19c4:	db c0       	rjmp	.+438    	; 0x1b7c <qtm_ptc_start_measurement_seq+0x1da>
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	09 f4       	brne	.+2      	; 0x19cc <qtm_ptc_start_measurement_seq+0x2a>
    19ca:	d8 c0       	rjmp	.+432    	; 0x1b7c <qtm_ptc_start_measurement_seq+0x1da>
    19cc:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <touch_seq_lib_state>
    19d0:	22 23       	and	r18, r18
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <qtm_ptc_start_measurement_seq+0x34>
    19d4:	d5 c0       	rjmp	.+426    	; 0x1b80 <qtm_ptc_start_measurement_seq+0x1de>
    19d6:	24 30       	cpi	r18, 0x04	; 4
    19d8:	09 f0       	breq	.+2      	; 0x19dc <qtm_ptc_start_measurement_seq+0x3a>
    19da:	93 c0       	rjmp	.+294    	; 0x1b02 <qtm_ptc_start_measurement_seq+0x160>
    19dc:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <ptc_eoc_ok_flag>
    19e0:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    19e4:	80 ff       	sbrs	r24, 0
    19e6:	8b c0       	rjmp	.+278    	; 0x1afe <qtm_ptc_start_measurement_seq+0x15c>
    19e8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	a6 e0       	ldi	r26, 0x06	; 6
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__umulhisi3>
    19f6:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <max_conversion_cycles>
    19fa:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <max_conversion_cycles+0x1>
    19fe:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <max_conversion_cycles+0x2>
    1a02:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <max_conversion_cycles+0x3>
    1a06:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1a0a:	2f 70       	andi	r18, 0x0F	; 15
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	82 0f       	add	r24, r18
    1a12:	91 1d       	adc	r25, r1
    1a14:	a1 1d       	adc	r26, r1
    1a16:	b1 1d       	adc	r27, r1
    1a18:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <max_conversion_cycles>
    1a1c:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <max_conversion_cycles+0x1>
    1a20:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <max_conversion_cycles+0x2>
    1a24:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <max_conversion_cycles+0x3>
    1a28:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1a2c:	27 70       	andi	r18, 0x07	; 7
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <qtm_ptc_start_measurement_seq+0x96>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	aa 1f       	adc	r26, r26
    1a36:	bb 1f       	adc	r27, r27
    1a38:	2a 95       	dec	r18
    1a3a:	d2 f7       	brpl	.-12     	; 0x1a30 <qtm_ptc_start_measurement_seq+0x8e>
    1a3c:	0e 96       	adiw	r24, 0x0e	; 14
    1a3e:	a1 1d       	adc	r26, r1
    1a40:	b1 1d       	adc	r27, r1
    1a42:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <max_conversion_cycles>
    1a46:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <max_conversion_cycles+0x1>
    1a4a:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <max_conversion_cycles+0x2>
    1a4e:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <max_conversion_cycles+0x3>
    1a52:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1a56:	23 70       	andi	r18, 0x03	; 3
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <qtm_ptc_start_measurement_seq+0xc0>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	aa 1f       	adc	r26, r26
    1a60:	bb 1f       	adc	r27, r27
    1a62:	2a 95       	dec	r18
    1a64:	d2 f7       	brpl	.-12     	; 0x1a5a <qtm_ptc_start_measurement_seq+0xb8>
    1a66:	22 e0       	ldi	r18, 0x02	; 2
    1a68:	b6 95       	lsr	r27
    1a6a:	a7 95       	ror	r26
    1a6c:	97 95       	ror	r25
    1a6e:	87 95       	ror	r24
    1a70:	2a 95       	dec	r18
    1a72:	d1 f7       	brne	.-12     	; 0x1a68 <qtm_ptc_start_measurement_seq+0xc6>
    1a74:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <max_conversion_cycles>
    1a78:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <max_conversion_cycles+0x1>
    1a7c:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <max_conversion_cycles+0x2>
    1a80:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <max_conversion_cycles+0x3>
    1a84:	19 82       	std	Y+1, r1	; 0x01
    1a86:	1a 82       	std	Y+2, r1	; 0x02
    1a88:	1b 82       	std	Y+3, r1	; 0x03
    1a8a:	1c 82       	std	Y+4, r1	; 0x04
    1a8c:	21 e0       	ldi	r18, 0x01	; 1
    1a8e:	49 81       	ldd	r20, Y+1	; 0x01
    1a90:	5a 81       	ldd	r21, Y+2	; 0x02
    1a92:	6b 81       	ldd	r22, Y+3	; 0x03
    1a94:	7c 81       	ldd	r23, Y+4	; 0x04
    1a96:	48 17       	cp	r20, r24
    1a98:	59 07       	cpc	r21, r25
    1a9a:	6a 07       	cpc	r22, r26
    1a9c:	7b 07       	cpc	r23, r27
    1a9e:	b0 f4       	brcc	.+44     	; 0x1acc <qtm_ptc_start_measurement_seq+0x12a>
    1aa0:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <ptc_eoc_ok_flag>
    1aa4:	33 23       	and	r19, r19
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <qtm_ptc_start_measurement_seq+0x110>
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	ab 83       	std	Y+3, r26	; 0x03
    1aae:	bc 83       	std	Y+4, r27	; 0x04
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	49 81       	ldd	r20, Y+1	; 0x01
    1ab4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ab6:	6b 81       	ldd	r22, Y+3	; 0x03
    1ab8:	7c 81       	ldd	r23, Y+4	; 0x04
    1aba:	4f 5f       	subi	r20, 0xFF	; 255
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	6f 4f       	sbci	r22, 0xFF	; 255
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	49 83       	std	Y+1, r20	; 0x01
    1ac4:	5a 83       	std	Y+2, r21	; 0x02
    1ac6:	6b 83       	std	Y+3, r22	; 0x03
    1ac8:	7c 83       	std	Y+4, r23	; 0x04
    1aca:	e1 cf       	rjmp	.-62     	; 0x1a8e <qtm_ptc_start_measurement_seq+0xec>
    1acc:	22 23       	and	r18, r18
    1ace:	b9 f0       	breq	.+46     	; 0x1afe <qtm_ptc_start_measurement_seq+0x15c>
    1ad0:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1ad4:	80 ff       	sbrs	r24, 0
    1ad6:	13 c0       	rjmp	.+38     	; 0x1afe <qtm_ptc_start_measurement_seq+0x15c>
    1ad8:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1adc:	00 00       	nop
    1ade:	82 e1       	ldi	r24, 0x12	; 18
    1ae0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1ae4:	00 00       	nop
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1aec:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ptc_lockups>
    1af0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ptc_lockups+0x1>
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <ptc_lockups+0x1>
    1afa:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ptc_lockups>
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	42 c0       	rjmp	.+132    	; 0x1b86 <qtm_ptc_start_measurement_seq+0x1e4>
    1b02:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    1b06:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    1b0a:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <ptc_seq_measure_complete_pointer+0x1>
    1b0e:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <ptc_seq_measure_complete_pointer>
    1b12:	dc 01       	movw	r26, r24
    1b14:	ed 91       	ld	r30, X+
    1b16:	fc 91       	ld	r31, X
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	80 34       	cpi	r24, 0x40	; 64
    1b1c:	11 f4       	brne	.+4      	; 0x1b22 <qtm_ptc_start_measurement_seq+0x180>
    1b1e:	88 e0       	ldi	r24, 0x08	; 8
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <qtm_ptc_start_measurement_seq+0x186>
    1b22:	80 38       	cpi	r24, 0x80	; 128
    1b24:	79 f5       	brne	.+94     	; 0x1b84 <qtm_ptc_start_measurement_seq+0x1e2>
    1b26:	8a e0       	ldi	r24, 0x0A	; 10
    1b28:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1b2c:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <qtm_acquisition_control_working_set_ptr>
    1b30:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <qtm_acquisition_control_working_set_ptr+0x1>
    1b34:	01 90       	ld	r0, Z+
    1b36:	f0 81       	ld	r31, Z
    1b38:	e0 2d       	mov	r30, r0
    1b3a:	84 81       	ldd	r24, Z+4	; 0x04
    1b3c:	80 31       	cpi	r24, 0x10	; 16
    1b3e:	08 f0       	brcs	.+2      	; 0x1b42 <qtm_ptc_start_measurement_seq+0x1a0>
    1b40:	80 e1       	ldi	r24, 0x10	; 16
    1b42:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	84 bf       	out	0x34, r24	; 52
    1b4a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7f8074>
    1b4e:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <current_measure_channel+0x1>
    1b52:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <current_measure_channel>
    1b56:	0e 94 c8 09 	call	0x1390	; 0x1390 <select_next_channel_to_measure>
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	0b c0       	rjmp	.+22     	; 0x1b74 <qtm_ptc_start_measurement_seq+0x1d2>
    1b5e:	84 e0       	ldi	r24, 0x04	; 4
    1b60:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <touch_seq_lib_state>
    1b64:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_measure_channel>
    1b68:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <current_measure_channel+0x1>
    1b6c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <qtm_measure_node>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	09 c0       	rjmp	.+18     	; 0x1b86 <qtm_ptc_start_measurement_seq+0x1e4>
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <touch_seq_lib_state>
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <qtm_ptc_start_measurement_seq+0x1e4>
    1b7c:	8b e0       	ldi	r24, 0x0B	; 11
    1b7e:	03 c0       	rjmp	.+6      	; 0x1b86 <qtm_ptc_start_measurement_seq+0x1e4>
    1b80:	83 e0       	ldi	r24, 0x03	; 3
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <qtm_ptc_start_measurement_seq+0x1e4>
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	08 95       	ret

00001b94 <qtm_enable_sensor_node>:
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	c9 f0       	breq	.+50     	; 0x1bca <qtm_enable_sensor_node+0x36>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	ed 91       	ld	r30, X+
    1b9c:	fc 91       	ld	r31, X
    1b9e:	11 97       	sbiw	r26, 0x01	; 1
    1ba0:	20 81       	ld	r18, Z
    1ba2:	31 81       	ldd	r19, Z+1	; 0x01
    1ba4:	26 17       	cp	r18, r22
    1ba6:	37 07       	cpc	r19, r23
    1ba8:	90 f0       	brcs	.+36     	; 0x1bce <qtm_enable_sensor_node+0x3a>
    1baa:	45 e0       	ldi	r20, 0x05	; 5
    1bac:	46 9f       	mul	r20, r22
    1bae:	90 01       	movw	r18, r0
    1bb0:	47 9f       	mul	r20, r23
    1bb2:	30 0d       	add	r19, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	14 96       	adiw	r26, 0x04	; 4
    1bb8:	ed 91       	ld	r30, X+
    1bba:	fc 91       	ld	r31, X
    1bbc:	15 97       	sbiw	r26, 0x05	; 5
    1bbe:	e2 0f       	add	r30, r18
    1bc0:	f3 1f       	adc	r31, r19
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 83       	st	Z, r24
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	08 95       	ret
    1bca:	8b e0       	ldi	r24, 0x0B	; 11
    1bcc:	08 95       	ret
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	08 95       	ret

00001bd2 <qtm_calibrate_sensor_node>:
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	d1 f1       	breq	.+116    	; 0x1c4a <qtm_calibrate_sensor_node+0x78>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	ed 91       	ld	r30, X+
    1bda:	fc 91       	ld	r31, X
    1bdc:	11 97       	sbiw	r26, 0x01	; 1
    1bde:	20 81       	ld	r18, Z
    1be0:	31 81       	ldd	r19, Z+1	; 0x01
    1be2:	26 17       	cp	r18, r22
    1be4:	37 07       	cpc	r19, r23
    1be6:	98 f1       	brcs	.+102    	; 0x1c4e <qtm_calibrate_sensor_node+0x7c>
    1be8:	22 81       	ldd	r18, Z+2	; 0x02
    1bea:	14 96       	adiw	r26, 0x04	; 4
    1bec:	ed 91       	ld	r30, X+
    1bee:	fc 91       	ld	r31, X
    1bf0:	15 97       	sbiw	r26, 0x05	; 5
    1bf2:	20 34       	cpi	r18, 0x40	; 64
    1bf4:	59 f4       	brne	.+22     	; 0x1c0c <qtm_calibrate_sensor_node+0x3a>
    1bf6:	85 e0       	ldi	r24, 0x05	; 5
    1bf8:	86 9f       	mul	r24, r22
    1bfa:	d0 01       	movw	r26, r0
    1bfc:	87 9f       	mul	r24, r23
    1bfe:	b0 0d       	add	r27, r0
    1c00:	11 24       	eor	r1, r1
    1c02:	ae 0f       	add	r26, r30
    1c04:	bf 1f       	adc	r27, r31
    1c06:	84 e3       	ldi	r24, 0x34	; 52
    1c08:	92 e0       	ldi	r25, 0x02	; 2
    1c0a:	0c c0       	rjmp	.+24     	; 0x1c24 <qtm_calibrate_sensor_node+0x52>
    1c0c:	20 38       	cpi	r18, 0x80	; 128
    1c0e:	81 f4       	brne	.+32     	; 0x1c30 <qtm_calibrate_sensor_node+0x5e>
    1c10:	85 e0       	ldi	r24, 0x05	; 5
    1c12:	86 9f       	mul	r24, r22
    1c14:	d0 01       	movw	r26, r0
    1c16:	87 9f       	mul	r24, r23
    1c18:	b0 0d       	add	r27, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	ae 0f       	add	r26, r30
    1c1e:	bf 1f       	adc	r27, r31
    1c20:	87 e6       	ldi	r24, 0x67	; 103
    1c22:	95 e0       	ldi	r25, 0x05	; 5
    1c24:	14 96       	adiw	r26, 0x04	; 4
    1c26:	9c 93       	st	X, r25
    1c28:	8e 93       	st	-X, r24
    1c2a:	13 97       	sbiw	r26, 0x03	; 3
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <qtm_calibrate_sensor_node+0x60>
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	95 e0       	ldi	r25, 0x05	; 5
    1c34:	96 9f       	mul	r25, r22
    1c36:	90 01       	movw	r18, r0
    1c38:	97 9f       	mul	r25, r23
    1c3a:	30 0d       	add	r19, r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	e2 0f       	add	r30, r18
    1c40:	f3 1f       	adc	r31, r19
    1c42:	90 81       	ld	r25, Z
    1c44:	92 60       	ori	r25, 0x02	; 2
    1c46:	90 83       	st	Z, r25
    1c48:	08 95       	ret
    1c4a:	8b e0       	ldi	r24, 0x0B	; 11
    1c4c:	08 95       	ret
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	08 95       	ret

00001c52 <qtm_m324pb_ptc_handler_eoc>:
    1c52:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1c56:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    1c5a:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
    1c5e:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <current_measure_channel>
    1c62:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <current_measure_channel+0x1>
    1c66:	ee 0f       	add	r30, r30
    1c68:	ff 1f       	adc	r31, r31
    1c6a:	40 91 d4 01 	lds	r20, 0x01D4	; 0x8001d4 <qtm_raw_data_measurements_ptr>
    1c6e:	50 91 d5 01 	lds	r21, 0x01D5	; 0x8001d5 <qtm_raw_data_measurements_ptr+0x1>
    1c72:	e4 0f       	add	r30, r20
    1c74:	f5 1f       	adc	r31, r21
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	92 2b       	or	r25, r18
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
    1c7e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <good_eocs>
    1c82:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <good_eocs+0x1>
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <good_eocs+0x1>
    1c8c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <good_eocs>
    1c90:	89 2b       	or	r24, r25
    1c92:	21 f4       	brne	.+8      	; 0x1c9c <qtm_m324pb_ptc_handler_eoc+0x4a>
    1c94:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <ptc_lockups+0x1>
    1c98:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <ptc_lockups>
    1c9c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_measure_channel>
    1ca0:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <current_measure_channel+0x1>
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <current_measure_channel+0x1>
    1caa:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <current_measure_channel>
    1cae:	0e 94 c8 09 	call	0x1390	; 0x1390 <select_next_channel_to_measure>
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	0a c0       	rjmp	.+20     	; 0x1cca <qtm_m324pb_ptc_handler_eoc+0x78>
    1cb6:	84 e0       	ldi	r24, 0x04	; 4
    1cb8:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <touch_seq_lib_state>
    1cbc:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_measure_channel>
    1cc0:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <current_measure_channel+0x1>
    1cc4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <qtm_measure_node>
    1cc8:	05 c0       	rjmp	.+10     	; 0x1cd4 <qtm_m324pb_ptc_handler_eoc+0x82>
    1cca:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <ptc_seq_measure_complete_pointer>
    1cce:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <ptc_seq_measure_complete_pointer+0x1>
    1cd2:	09 95       	icall
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <ptc_eoc_ok_flag>
    1cda:	08 95       	ret

00001cdc <__umulhisi3>:
    1cdc:	a2 9f       	mul	r26, r18
    1cde:	b0 01       	movw	r22, r0
    1ce0:	b3 9f       	mul	r27, r19
    1ce2:	c0 01       	movw	r24, r0
    1ce4:	a3 9f       	mul	r26, r19
    1ce6:	70 0d       	add	r23, r0
    1ce8:	81 1d       	adc	r24, r1
    1cea:	11 24       	eor	r1, r1
    1cec:	91 1d       	adc	r25, r1
    1cee:	b2 9f       	mul	r27, r18
    1cf0:	70 0d       	add	r23, r0
    1cf2:	81 1d       	adc	r24, r1
    1cf4:	11 24       	eor	r1, r1
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	08 95       	ret

00001cfa <_exit>:
    1cfa:	f8 94       	cli

00001cfc <__stop_program>:
    1cfc:	ff cf       	rjmp	.-2      	; 0x1cfc <__stop_program>
