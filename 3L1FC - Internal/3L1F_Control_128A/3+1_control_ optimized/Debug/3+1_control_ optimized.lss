
3+1_control_ optimized.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000cd0  00000d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800138  00800138  00000d9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002005  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfd  00000000  00000000  00002fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000131e  00000000  00000000  00003cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00004ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000719  00000000  00000000  000053a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a4  00000000  00000000  00005abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006261  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	e2 c1       	rjmp	.+964    	; 0x3f6 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	0a c2       	rjmp	.+1044   	; 0x45a <__vector_17>
  46:	00 00       	nop
  48:	5a c2       	rjmp	.+1204   	; 0x4fe <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 33       	cpi	r26, 0x38	; 56
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e3       	ldi	r26, 0x38	; 56
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 34       	cpi	r26, 0x44	; 68
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	27 d3       	rcall	.+1614   	; 0x712 <main>
  c4:	03 c6       	rjmp	.+3078   	; 0xccc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <as0>:
 *  Author: kjeyabalan
 */ 

#include "fanSpeed.h"

void as0() {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29

	PORTC &= ~(1 << PC2);
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	85 bb       	out	0x15, r24	; 21
	
	PORTD &= ~(1 << PD4);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7e       	andi	r24, 0xEF	; 239
  d6:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD5);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD6);
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	8f 7b       	andi	r24, 0xBF	; 191
  e2:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD7);
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	8f 77       	andi	r24, 0x7F	; 127
  e8:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
  ea:	85 b3       	in	r24, 0x15	; 21
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	85 bb       	out	0x15, r24	; 21

	PORTF &= ~(1 << PF0);
  f0:	c2 e6       	ldi	r28, 0x62	; 98
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	88 81       	ld	r24, Y
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	88 83       	st	Y, r24
	custom_delay_ms(200);
  fa:	88 ec       	ldi	r24, 0xC8	; 200
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	8a d1       	rcall	.+788    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF1);
 100:	88 81       	ld	r24, Y
 102:	8d 7f       	andi	r24, 0xFD	; 253
 104:	88 83       	st	Y, r24
	custom_delay_ms(200);
 106:	88 ec       	ldi	r24, 0xC8	; 200
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	84 d1       	rcall	.+776    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF2);
 10c:	88 81       	ld	r24, Y
 10e:	8b 7f       	andi	r24, 0xFB	; 251
 110:	88 83       	st	Y, r24
	custom_delay_ms(200);
 112:	88 ec       	ldi	r24, 0xC8	; 200
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	7e d1       	rcall	.+764    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 118:	88 81       	ld	r24, Y
 11a:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 11c:	88 83       	st	Y, r24
 11e:	88 ec       	ldi	r24, 0xC8	; 200
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	78 d1       	rcall	.+752    	; 0x414 <custom_delay_ms>
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <as1>:

void as1() {
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29

	PORTC |= (1 << PC2);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	84 60       	ori	r24, 0x04	; 4
 132:	85 bb       	out	0x15, r24	; 21

	PORTD |= (1 << PD4);
 134:	82 b3       	in	r24, 0x12	; 18
 136:	80 61       	ori	r24, 0x10	; 16
 138:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD5);
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD6);
 140:	82 b3       	in	r24, 0x12	; 18
 142:	8f 7b       	andi	r24, 0xBF	; 191
 144:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD7);
 146:	82 b3       	in	r24, 0x12	; 18
 148:	8f 77       	andi	r24, 0x7F	; 127
 14a:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	85 bb       	out	0x15, r24	; 21
	//relay Pins
	PORTF &= ~ (1 << PF0);
 152:	c2 e6       	ldi	r28, 0x62	; 98
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	88 81       	ld	r24, Y
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	88 83       	st	Y, r24
	custom_delay_ms(200);
 15c:	88 ec       	ldi	r24, 0xC8	; 200
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	59 d1       	rcall	.+690    	; 0x414 <custom_delay_ms>
	PORTF |= (1 << PF1);   //2.2k
 162:	88 81       	ld	r24, Y
 164:	82 60       	ori	r24, 0x02	; 2
 166:	88 83       	st	Y, r24
	custom_delay_ms(200);
 168:	88 ec       	ldi	r24, 0xC8	; 200
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	53 d1       	rcall	.+678    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF2);
 16e:	88 81       	ld	r24, Y
 170:	8b 7f       	andi	r24, 0xFB	; 251
 172:	88 83       	st	Y, r24
	custom_delay_ms(200);
 174:	88 ec       	ldi	r24, 0xC8	; 200
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	4d d1       	rcall	.+666    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 17a:	88 81       	ld	r24, Y
 17c:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 17e:	88 83       	st	Y, r24
 180:	88 ec       	ldi	r24, 0xC8	; 200
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	47 d1       	rcall	.+654    	; 0x414 <custom_delay_ms>
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <as2>:

void as2() {   // fan Speed 2
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29

	PORTC |= (1 << PC2); //Fan on led
 190:	85 b3       	in	r24, 0x15	; 21
 192:	84 60       	ori	r24, 0x04	; 4
 194:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= (1 << PD4);
 196:	82 b3       	in	r24, 0x12	; 18
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD5);
 19c:	82 b3       	in	r24, 0x12	; 18
 19e:	80 62       	ori	r24, 0x20	; 32
 1a0:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD6);     // Led Pins
 1a2:	82 b3       	in	r24, 0x12	; 18
 1a4:	8f 7b       	andi	r24, 0xBF	; 191
 1a6:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD7);
 1a8:	82 b3       	in	r24, 0x12	; 18
 1aa:	8f 77       	andi	r24, 0x7F	; 127
 1ac:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
 1ae:	85 b3       	in	r24, 0x15	; 21
 1b0:	8e 7f       	andi	r24, 0xFE	; 254
 1b2:	85 bb       	out	0x15, r24	; 21

	PORTF |=  (1 << PF0);     //Relay Pins
 1b4:	c2 e6       	ldi	r28, 0x62	; 98
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	88 81       	ld	r24, Y
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	88 83       	st	Y, r24
	custom_delay_ms(200);
 1be:	88 ec       	ldi	r24, 0xC8	; 200
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	28 d1       	rcall	.+592    	; 0x414 <custom_delay_ms>
	PORTF |= (1 << PF1);
 1c4:	88 81       	ld	r24, Y
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	88 83       	st	Y, r24
	custom_delay_ms(200);
 1ca:	88 ec       	ldi	r24, 0xC8	; 200
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	22 d1       	rcall	.+580    	; 0x414 <custom_delay_ms>
	PORTF &= ~ (1 << PF2);     //3.3k
 1d0:	88 81       	ld	r24, Y
 1d2:	8b 7f       	andi	r24, 0xFB	; 251
 1d4:	88 83       	st	Y, r24
	custom_delay_ms(200);
 1d6:	88 ec       	ldi	r24, 0xC8	; 200
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	1c d1       	rcall	.+568    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 1dc:	88 81       	ld	r24, Y
 1de:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 1e0:	88 83       	st	Y, r24
 1e2:	88 ec       	ldi	r24, 0xC8	; 200
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	16 d1       	rcall	.+556    	; 0x414 <custom_delay_ms>
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <as3>:

void as3() {   //Fan speed 3
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29

	PORTC |= (1 << PC2); //fan on led
 1f2:	85 b3       	in	r24, 0x15	; 21
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= (1 << PD4);
 1f8:	82 b3       	in	r24, 0x12	; 18
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD5);
 1fe:	82 b3       	in	r24, 0x12	; 18
 200:	80 62       	ori	r24, 0x20	; 32
 202:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD6);     // Led Pins
 204:	82 b3       	in	r24, 0x12	; 18
 206:	80 64       	ori	r24, 0x40	; 64
 208:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD7);
 20a:	82 b3       	in	r24, 0x12	; 18
 20c:	8f 77       	andi	r24, 0x7F	; 127
 20e:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
 210:	85 b3       	in	r24, 0x15	; 21
 212:	8e 7f       	andi	r24, 0xFE	; 254
 214:	85 bb       	out	0x15, r24	; 21

	PORTF |= (1 << PF0);     //Relay Pins
 216:	c2 e6       	ldi	r28, 0x62	; 98
 218:	d0 e0       	ldi	r29, 0x00	; 0
 21a:	88 81       	ld	r24, Y
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	88 83       	st	Y, r24
	custom_delay_ms(200);
 220:	88 ec       	ldi	r24, 0xC8	; 200
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	f7 d0       	rcall	.+494    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF1);
 226:	88 81       	ld	r24, Y
 228:	8d 7f       	andi	r24, 0xFD	; 253
 22a:	88 83       	st	Y, r24
	custom_delay_ms(200);
 22c:	88 ec       	ldi	r24, 0xC8	; 200
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	f1 d0       	rcall	.+482    	; 0x414 <custom_delay_ms>
	PORTF |= (1 << PF2);    //4.3k
 232:	88 81       	ld	r24, Y
 234:	84 60       	ori	r24, 0x04	; 4
 236:	88 83       	st	Y, r24
	custom_delay_ms(200);
 238:	88 ec       	ldi	r24, 0xC8	; 200
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	eb d0       	rcall	.+470    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 23e:	88 81       	ld	r24, Y
 240:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 242:	88 83       	st	Y, r24
 244:	88 ec       	ldi	r24, 0xC8	; 200
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	e5 d0       	rcall	.+458    	; 0x414 <custom_delay_ms>
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <as4>:

void as4() {     //Fan speed 4
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
	
	PORTC |= (1 << PC2); //fan on led
 254:	85 b3       	in	r24, 0x15	; 21
 256:	84 60       	ori	r24, 0x04	; 4
 258:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= (1 << PD4);
 25a:	82 b3       	in	r24, 0x12	; 18
 25c:	80 61       	ori	r24, 0x10	; 16
 25e:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD5);
 260:	82 b3       	in	r24, 0x12	; 18
 262:	80 62       	ori	r24, 0x20	; 32
 264:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD6);     // Led Pins
 266:	82 b3       	in	r24, 0x12	; 18
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD7);
 26c:	82 b3       	in	r24, 0x12	; 18
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
 272:	85 b3       	in	r24, 0x15	; 21
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	85 bb       	out	0x15, r24	; 21

	PORTF &= ~(1 << PF0);     //Relay Pins
 278:	c2 e6       	ldi	r28, 0x62	; 98
 27a:	d0 e0       	ldi	r29, 0x00	; 0
 27c:	88 81       	ld	r24, Y
 27e:	8e 7f       	andi	r24, 0xFE	; 254
 280:	88 83       	st	Y, r24
	custom_delay_ms(200);
 282:	88 ec       	ldi	r24, 0xC8	; 200
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	c6 d0       	rcall	.+396    	; 0x414 <custom_delay_ms>
	PORTF |= (1 << PF1);
 288:	88 81       	ld	r24, Y
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	88 83       	st	Y, r24
	custom_delay_ms(200);
 28e:	88 ec       	ldi	r24, 0xC8	; 200
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	c0 d0       	rcall	.+384    	; 0x414 <custom_delay_ms>
	PORTF |= (1 << PF2);      //5.5k
 294:	88 81       	ld	r24, Y
 296:	84 60       	ori	r24, 0x04	; 4
 298:	88 83       	st	Y, r24
	custom_delay_ms(200);
 29a:	88 ec       	ldi	r24, 0xC8	; 200
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	ba d0       	rcall	.+372    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 2a0:	88 81       	ld	r24, Y
 2a2:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 2a4:	88 83       	st	Y, r24
 2a6:	88 ec       	ldi	r24, 0xC8	; 200
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	b4 d0       	rcall	.+360    	; 0x414 <custom_delay_ms>
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <as5>:

void as5() {       // fan speed 5
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
	
	PORTC |= (1 << PC2);  // fan on led
 2b6:	85 b3       	in	r24, 0x15	; 21
 2b8:	84 60       	ori	r24, 0x04	; 4
 2ba:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= (1 << PD4);
 2bc:	82 b3       	in	r24, 0x12	; 18
 2be:	80 61       	ori	r24, 0x10	; 16
 2c0:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD5);
 2c2:	82 b3       	in	r24, 0x12	; 18
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD6);     // Led Pins
 2c8:	82 b3       	in	r24, 0x12	; 18
 2ca:	80 64       	ori	r24, 0x40	; 64
 2cc:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD7);
 2ce:	82 b3       	in	r24, 0x12	; 18
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1 << PC0);
 2d4:	85 b3       	in	r24, 0x15	; 21
 2d6:	81 60       	ori	r24, 0x01	; 1
 2d8:	85 bb       	out	0x15, r24	; 21
	

	PORTF &= ~(1 << PF0);     //Relay Pins
 2da:	c2 e6       	ldi	r28, 0x62	; 98
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	88 81       	ld	r24, Y
 2e0:	8e 7f       	andi	r24, 0xFE	; 254
 2e2:	88 83       	st	Y, r24
	custom_delay_ms(200);
 2e4:	88 ec       	ldi	r24, 0xC8	; 200
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	95 d0       	rcall	.+298    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF1);
 2ea:	88 81       	ld	r24, Y
 2ec:	8d 7f       	andi	r24, 0xFD	; 253
 2ee:	88 83       	st	Y, r24
	custom_delay_ms(200);
 2f0:	88 ec       	ldi	r24, 0xC8	; 200
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	8f d0       	rcall	.+286    	; 0x414 <custom_delay_ms>
	PORTF &= ~(1 << PF2);
 2f6:	88 81       	ld	r24, Y
 2f8:	8b 7f       	andi	r24, 0xFB	; 251
 2fa:	88 83       	st	Y, r24
	custom_delay_ms(200);
 2fc:	88 ec       	ldi	r24, 0xC8	; 200
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	89 d0       	rcall	.+274    	; 0x414 <custom_delay_ms>
	PORTF |= (1 << PF3);       //direct
 302:	88 81       	ld	r24, Y
 304:	88 60       	ori	r24, 0x08	; 8
	custom_delay_ms(200);
 306:	88 83       	st	Y, r24
 308:	88 ec       	ldi	r24, 0xC8	; 200
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	83 d0       	rcall	.+262    	; 0x414 <custom_delay_ms>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <light1_ON>:
 */ 

#include "lights.h"

void light1_ON(){
	PORTC |= (1 << PC1);
 314:	85 b3       	in	r24, 0x15	; 21
 316:	82 60       	ori	r24, 0x02	; 2
 318:	85 bb       	out	0x15, r24	; 21
	PORTF |= (1 << PF4);
 31a:	e2 e6       	ldi	r30, 0x62	; 98
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	80 61       	ori	r24, 0x10	; 16
 322:	80 83       	st	Z, r24
	lastState.lightState_1 = 1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <lastState>
 32a:	08 95       	ret

0000032c <light1_OFF>:
}

void light1_OFF(){
	PORTC &= ~(1 << PC1);
 32c:	85 b3       	in	r24, 0x15	; 21
 32e:	8d 7f       	andi	r24, 0xFD	; 253
 330:	85 bb       	out	0x15, r24	; 21
	PORTF &= ~(1 << PF4);
 332:	e2 e6       	ldi	r30, 0x62	; 98
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8f 7e       	andi	r24, 0xEF	; 239
 33a:	80 83       	st	Z, r24
	lastState.lightState_1 = 0;
 33c:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <lastState>
 340:	08 95       	ret

00000342 <light2_ON>:
}

void light2_ON(){
	PORTC |= (1 << PC3);
 342:	85 b3       	in	r24, 0x15	; 21
 344:	88 60       	ori	r24, 0x08	; 8
 346:	85 bb       	out	0x15, r24	; 21
	PORTF |= (1 << PF5);
 348:	e2 e6       	ldi	r30, 0x62	; 98
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 62       	ori	r24, 0x20	; 32
 350:	80 83       	st	Z, r24
	lastState.lightState_2 = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <lastState+0x1>
 358:	08 95       	ret

0000035a <light2_OFF>:
}
void light2_OFF(){
	PORTC &= ~(1 << PC3);
 35a:	85 b3       	in	r24, 0x15	; 21
 35c:	87 7f       	andi	r24, 0xF7	; 247
 35e:	85 bb       	out	0x15, r24	; 21
	PORTF &= ~(1 << PF5);
 360:	e2 e6       	ldi	r30, 0x62	; 98
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	8f 7d       	andi	r24, 0xDF	; 223
 368:	80 83       	st	Z, r24
	lastState.lightState_2 = 0;
 36a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <lastState+0x1>
 36e:	08 95       	ret

00000370 <light3_ON>:
}

void light3_ON(){
	PORTC |= (1 << PC4);
 370:	85 b3       	in	r24, 0x15	; 21
 372:	80 61       	ori	r24, 0x10	; 16
 374:	85 bb       	out	0x15, r24	; 21
	PORTF |= (1 << PF6);
 376:	e2 e6       	ldi	r30, 0x62	; 98
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	80 64       	ori	r24, 0x40	; 64
 37e:	80 83       	st	Z, r24
	lastState.lightState_3 = 1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <lastState+0x2>
 386:	08 95       	ret

00000388 <light3_OFF>:
}

void light3_OFF(){
	PORTC &= ~(1 << PC4);
 388:	85 b3       	in	r24, 0x15	; 21
 38a:	8f 7e       	andi	r24, 0xEF	; 239
 38c:	85 bb       	out	0x15, r24	; 21
	PORTF &= ~(1 << PF6);
 38e:	e2 e6       	ldi	r30, 0x62	; 98
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	8f 7b       	andi	r24, 0xBF	; 191
 396:	80 83       	st	Z, r24
	lastState.lightState_3 = 0;
 398:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <lastState+0x2>
 39c:	08 95       	ret

0000039e <calculateCRC>:
	while (1) {
	}
	return 0;
}

uint8_t calculateCRC(uint8_t *data, size_t length) {
 39e:	dc 01       	movw	r26, r24
	uint8_t crc = INIT_CRC;
	for (size_t i = 0; i < length; i++) {
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	50 e0       	ldi	r21, 0x00	; 0
	}
	return 0;
}

uint8_t calculateCRC(uint8_t *data, size_t length) {
	uint8_t crc = INIT_CRC;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
	for (size_t i = 0; i < length; i++) {
 3a6:	15 c0       	rjmp	.+42     	; 0x3d2 <calculateCRC+0x34>
		crc ^= data[i];
 3a8:	fd 01       	movw	r30, r26
 3aa:	e4 0f       	add	r30, r20
 3ac:	f5 1f       	adc	r31, r21
 3ae:	90 81       	ld	r25, Z
 3b0:	89 27       	eor	r24, r25
		for (uint8_t j = 0; j < 8; j++) {
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <calculateCRC+0x2c>
			if (crc & 0x80) {
 3b6:	88 23       	and	r24, r24
 3b8:	34 f4       	brge	.+12     	; 0x3c6 <calculateCRC+0x28>
				crc = (crc << 1) ^ POLYNOMIAL;
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	97 e0       	ldi	r25, 0x07	; 7
 3c2:	89 27       	eor	r24, r25
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <calculateCRC+0x2a>
				} else {
				crc <<= 1;
 3c6:	88 0f       	add	r24, r24

uint8_t calculateCRC(uint8_t *data, size_t length) {
	uint8_t crc = INIT_CRC;
	for (size_t i = 0; i < length; i++) {
		crc ^= data[i];
		for (uint8_t j = 0; j < 8; j++) {
 3c8:	2f 5f       	subi	r18, 0xFF	; 255
 3ca:	28 30       	cpi	r18, 0x08	; 8
 3cc:	a0 f3       	brcs	.-24     	; 0x3b6 <calculateCRC+0x18>
	return 0;
}

uint8_t calculateCRC(uint8_t *data, size_t length) {
	uint8_t crc = INIT_CRC;
	for (size_t i = 0; i < length; i++) {
 3ce:	4f 5f       	subi	r20, 0xFF	; 255
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
 3d2:	46 17       	cp	r20, r22
 3d4:	57 07       	cpc	r21, r23
 3d6:	40 f3       	brcs	.-48     	; 0x3a8 <calculateCRC+0xa>
				crc <<= 1;
			}
		}
	}
	return crc;
}
 3d8:	08 95       	ret

000003da <timer1_init>:

void timer1_init() {
	TCCR1B |= (1 << WGM12); 
 3da:	8e b5       	in	r24, 0x2e	; 46
 3dc:	88 60       	ori	r24, 0x08	; 8
 3de:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 3624;
 3e0:	88 e2       	ldi	r24, 0x28	; 40
 3e2:	9e e0       	ldi	r25, 0x0E	; 14
 3e4:	9b bd       	out	0x2b, r25	; 43
 3e6:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);  
 3e8:	87 b7       	in	r24, 0x37	; 55
 3ea:	80 61       	ori	r24, 0x10	; 16
 3ec:	87 bf       	out	0x37, r24	; 55
	TCCR1B |= (1 << CS12) | (1 << CS10);
 3ee:	8e b5       	in	r24, 0x2e	; 46
 3f0:	85 60       	ori	r24, 0x05	; 5
 3f2:	8e bd       	out	0x2e, r24	; 46
 3f4:	08 95       	ret

000003f6 <__vector_12>:
}

ISR(TIMER1_COMPA_vect) {
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
	timer_flag = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <timer_flag>
}
 408:	8f 91       	pop	r24
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <custom_delay_ms>:

void custom_delay_ms(uint16_t ms) {
 414:	ac 01       	movw	r20, r24
	static uint16_t counter = 0;

	if (timer_flag) {
 416:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <timer_flag>
 41a:	99 23       	and	r25, r25
 41c:	99 f0       	breq	.+38     	; 0x444 <custom_delay_ms+0x30>
		timer_flag = 0;
 41e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <timer_flag>
		counter++;
 422:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <counter.1994>
 426:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <counter.1994+0x1>
 42a:	2f 5f       	subi	r18, 0xFF	; 255
 42c:	3f 4f       	sbci	r19, 0xFF	; 255
 42e:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <counter.1994+0x1>
 432:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <counter.1994>

		if (counter >= ms) {
 436:	24 17       	cp	r18, r20
 438:	35 07       	cpc	r19, r21
 43a:	20 f0       	brcs	.+8      	; 0x444 <custom_delay_ms+0x30>
			counter = 0;  
 43c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <counter.1994+0x1>
 440:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <counter.1994>
 444:	08 95       	ret

00000446 <SPI_init_slave>:
		}
	}
}

void SPI_init_slave() {
	DDRB |= (1 << DDB4); 
 446:	87 b3       	in	r24, 0x17	; 23
 448:	80 61       	ori	r24, 0x10	; 16
 44a:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1 << SPE);
 44c:	8d b1       	in	r24, 0x0d	; 13
 44e:	80 64       	ori	r24, 0x40	; 64
 450:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1 << SPIE); 
 452:	8d b1       	in	r24, 0x0d	; 13
 454:	80 68       	ori	r24, 0x80	; 128
 456:	8d b9       	out	0x0d, r24	; 13
 458:	08 95       	ret

0000045a <__vector_17>:
}

ISR(SPI_STC_vect) {
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	0b b6       	in	r0, 0x3b	; 59
 466:	0f 92       	push	r0
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
	uint8_t receivedSPIData = SPDR;
 480:	9f b1       	in	r25, 0x0f	; 15
	static char receivedBytes[2];
	static uint8_t receivedCRC = 0;
	static uint8_t byteIndex = 0;

	if (byteIndex < 2) {
 482:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <byteIndex.2005>
 486:	82 30       	cpi	r24, 0x02	; 2
 488:	48 f4       	brcc	.+18     	; 0x49c <__vector_17+0x42>
		receivedBytes[byteIndex] = receivedSPIData;
 48a:	e8 2f       	mov	r30, r24
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	e7 5c       	subi	r30, 0xC7	; 199
 490:	fe 4f       	sbci	r31, 0xFE	; 254
 492:	90 83       	st	Z, r25
		byteIndex++;
 494:	8f 5f       	subi	r24, 0xFF	; 255
 496:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <byteIndex.2005>
 49a:	07 c0       	rjmp	.+14     	; 0x4aa <__vector_17+0x50>
		} else if (byteIndex == 2) {
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	29 f4       	brne	.+10     	; 0x4aa <__vector_17+0x50>
		receivedCRC = receivedSPIData;
 4a0:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <__data_end>
		byteIndex++;
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <byteIndex.2005>
	}

	if (byteIndex == 3) {
 4aa:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <byteIndex.2005>
 4ae:	83 30       	cpi	r24, 0x03	; 3
 4b0:	81 f4       	brne	.+32     	; 0x4d2 <__vector_17+0x78>
		uint8_t calculatedCRC = calculateCRC((uint8_t *)receivedBytes, 2);
 4b2:	62 e0       	ldi	r22, 0x02	; 2
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	89 e3       	ldi	r24, 0x39	; 57
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	71 df       	rcall	.-286    	; 0x39e <calculateCRC>
		if (calculatedCRC == receivedCRC) {
 4bc:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <__data_end>
 4c0:	89 13       	cpse	r24, r25
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__vector_17+0x74>
			receivedBytes[2] = '\0';
 4c4:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <byteIndex.2005>
			SPIprocessCommand(receivedBytes);
 4c8:	89 e3       	ldi	r24, 0x39	; 57
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	b2 d1       	rcall	.+868    	; 0x832 <SPIprocessCommand>
		}
		byteIndex = 0;
 4ce:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <byteIndex.2005>
	}
	SPSR |= (1 << SPIF);
 4d2:	8e b1       	in	r24, 0x0e	; 14
 4d4:	80 68       	ori	r24, 0x80	; 128
 4d6:	8e b9       	out	0x0e, r24	; 14
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0b be       	out	0x3b, r0	; 59
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <__vector_18>:

ISR (USART0_RX_vect){
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	0b b6       	in	r0, 0x3b	; 59
 50a:	0f 92       	push	r0
 50c:	2f 93       	push	r18
 50e:	3f 93       	push	r19
 510:	4f 93       	push	r20
 512:	5f 93       	push	r21
 514:	6f 93       	push	r22
 516:	7f 93       	push	r23
 518:	8f 93       	push	r24
 51a:	9f 93       	push	r25
 51c:	af 93       	push	r26
 51e:	bf 93       	push	r27
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
	unsigned char receivedData = UDR0;
 524:	8c b1       	in	r24, 0x0c	; 12
	UARTprocessCommand(receivedData);
 526:	0a d3       	rcall	.+1556   	; 0xb3c <UARTprocessCommand>
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0b be       	out	0x3b, r0	; 59
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <setup>:

void setup(void){
	sei();
 54e:	78 94       	sei
	SPI_init_slave();
 550:	7a df       	rcall	.-268    	; 0x446 <SPI_init_slave>
	timer1_init();
 552:	43 df       	rcall	.-378    	; 0x3da <timer1_init>
 554:	87 e6       	ldi	r24, 0x67	; 103
	USART_Init(MYUBRR);
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	e0 d2       	rcall	.+1472   	; 0xb1a <USART_Init>
 55a:	81 b3       	in	r24, 0x11	; 17
	DDRD|=(1<<7)|(1<<5)|(1<<6)|(1<<4);
 55c:	80 6f       	ori	r24, 0xF0	; 240
 55e:	81 bb       	out	0x11, r24	; 17
 560:	e1 e6       	ldi	r30, 0x61	; 97
	DDRF|=(1<<4)|(1<<5)|(1<<6)|(1<<3)|(1<<2)|(1<<1)|(1<<0);
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	8f 67       	ori	r24, 0x7F	; 127
 568:	80 83       	st	Z, r24
 56a:	84 b3       	in	r24, 0x14	; 20
	DDRC|=(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0)|(1<<6)|(1<<7);
 56c:	8f 6d       	ori	r24, 0xDF	; 223
 56e:	84 bb       	out	0x14, r24	; 20
 570:	08 95       	ret

00000572 <readLastStatesFromEEPROM>:
 572:	ef 92       	push	r14
}

void readLastStatesFromEEPROM(void){
 574:	ff 92       	push	r15
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	28 97       	sbiw	r28, 0x08	; 8
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
	uint16_t addresses[] = {EEPROM_LIGHT1_STATE_ADDR, EEPROM_LIGHT2_STATE_ADDR, EEPROM_LIGHT3_STATE_ADDR, EEPROM_FAN1_STATE_ADDR};
 58c:	88 e0       	ldi	r24, 0x08	; 8
 58e:	e0 e0       	ldi	r30, 0x00	; 0
 590:	f1 e0       	ldi	r31, 0x01	; 1
 592:	de 01       	movw	r26, r28
 594:	11 96       	adiw	r26, 0x01	; 1
 596:	01 90       	ld	r0, Z+
 598:	0d 92       	st	X+, r0
 59a:	8a 95       	dec	r24
 59c:	e1 f7       	brne	.-8      	; 0x596 <readLastStatesFromEEPROM+0x24>
	uint8_t *state_ptr = (uint8_t *)&lastState;
	for (uint8_t i = 0; i < sizeof(lastState); i++) {
 59e:	10 e0       	ldi	r17, 0x00	; 0
 5a0:	14 c0       	rjmp	.+40     	; 0x5ca <readLastStatesFromEEPROM+0x58>
		state_ptr[i] = eeprom_read_byte((uint8_t*) addresses[i]);
 5a2:	81 2f       	mov	r24, r17
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	9c 01       	movw	r18, r24
 5a8:	20 5c       	subi	r18, 0xC0	; 192
 5aa:	3e 4f       	sbci	r19, 0xFE	; 254
 5ac:	79 01       	movw	r14, r18
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	e1 e0       	ldi	r30, 0x01	; 1
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	ec 0f       	add	r30, r28
 5b8:	fd 1f       	adc	r31, r29
 5ba:	e8 0f       	add	r30, r24
 5bc:	f9 1f       	adc	r31, r25
 5be:	80 81       	ld	r24, Z
 5c0:	91 81       	ldd	r25, Z+1	; 0x01
 5c2:	6f d3       	rcall	.+1758   	; 0xca2 <eeprom_read_byte>
 5c4:	f7 01       	movw	r30, r14
 5c6:	80 83       	st	Z, r24
}

void readLastStatesFromEEPROM(void){
	uint16_t addresses[] = {EEPROM_LIGHT1_STATE_ADDR, EEPROM_LIGHT2_STATE_ADDR, EEPROM_LIGHT3_STATE_ADDR, EEPROM_FAN1_STATE_ADDR};
	uint8_t *state_ptr = (uint8_t *)&lastState;
	for (uint8_t i = 0; i < sizeof(lastState); i++) {
 5c8:	1f 5f       	subi	r17, 0xFF	; 255
 5ca:	14 30       	cpi	r17, 0x04	; 4
 5cc:	50 f3       	brcs	.-44     	; 0x5a2 <readLastStatesFromEEPROM+0x30>
		state_ptr[i] = eeprom_read_byte((uint8_t*) addresses[i]);
	}
}
 5ce:	28 96       	adiw	r28, 0x08	; 8
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	ff 90       	pop	r15
 5e2:	ef 90       	pop	r14
 5e4:	08 95       	ret

000005e6 <retainLightStates>:

void retainLightStates(void){
 5e6:	ef 92       	push	r14
 5e8:	ff 92       	push	r15
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	68 97       	sbiw	r28, 0x18	; 24
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	f8 94       	cli
 5fc:	de bf       	out	0x3e, r29	; 62
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	cd bf       	out	0x3d, r28	; 61
	pin_map_t lightMapping[3][2] = {
 602:	82 e1       	ldi	r24, 0x12	; 18
 604:	e8 e0       	ldi	r30, 0x08	; 8
 606:	f1 e0       	ldi	r31, 0x01	; 1
 608:	de 01       	movw	r26, r28
 60a:	11 96       	adiw	r26, 0x01	; 1
 60c:	01 90       	ld	r0, Z+
 60e:	0d 92       	st	X+, r0
 610:	8a 95       	dec	r24
 612:	e1 f7       	brne	.-8      	; 0x60c <retainLightStates+0x26>
		{{&PORTC, PC1}, {&PORTF, PF4}},  // light1state
		{{&PORTC, PC3}, {&PORTF, PF5}},  // light2state
		{{&PORTC, PC4}, {&PORTF, PF6}}  // light3state
	};

	volatile uint8_t *lightStates[3] = { &lastState.lightState_1, &lastState.lightState_2, &lastState.lightState_3};
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	ea e1       	ldi	r30, 0x1A	; 26
 618:	f1 e0       	ldi	r31, 0x01	; 1
 61a:	de 01       	movw	r26, r28
 61c:	53 96       	adiw	r26, 0x13	; 19
 61e:	01 90       	ld	r0, Z+
 620:	0d 92       	st	X+, r0
 622:	8a 95       	dec	r24
 624:	e1 f7       	brne	.-8      	; 0x61e <retainLightStates+0x38>

	for(uint8_t i = 0; i < 3; i++) {
 626:	20 e0       	ldi	r18, 0x00	; 0
 628:	46 c0       	rjmp	.+140    	; 0x6b6 <retainLightStates+0xd0>
		if(*lightStates[i]) {
 62a:	82 2f       	mov	r24, r18
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	fc 01       	movw	r30, r24
 630:	ee 0f       	add	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	4c 0f       	add	r20, r28
 63a:	5d 1f       	adc	r21, r29
 63c:	e4 0f       	add	r30, r20
 63e:	f5 1f       	adc	r31, r21
 640:	02 88       	ldd	r0, Z+18	; 0x12
 642:	f3 89       	ldd	r31, Z+19	; 0x13
 644:	e0 2d       	mov	r30, r0
 646:	30 81       	ld	r19, Z
 648:	33 23       	and	r19, r19
 64a:	a1 f1       	breq	.+104    	; 0x6b4 <retainLightStates+0xce>
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
 64c:	7c 01       	movw	r14, r24
 64e:	ee 0c       	add	r14, r14
 650:	ff 1c       	adc	r15, r15
 652:	d7 01       	movw	r26, r14
 654:	a8 0f       	add	r26, r24
 656:	b9 1f       	adc	r27, r25
 658:	aa 0f       	add	r26, r26
 65a:	bb 1f       	adc	r27, r27
 65c:	a4 0f       	add	r26, r20
 65e:	b5 1f       	adc	r27, r21
 660:	0d 91       	ld	r16, X+
 662:	1c 91       	ld	r17, X
 664:	11 97       	sbiw	r26, 0x01	; 1
 666:	f8 01       	movw	r30, r16
 668:	30 81       	ld	r19, Z
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	50 e0       	ldi	r21, 0x00	; 0
 66e:	ba 01       	movw	r22, r20
 670:	12 96       	adiw	r26, 0x02	; 2
 672:	0c 90       	ld	r0, X
 674:	12 97       	sbiw	r26, 0x02	; 2
 676:	02 c0       	rjmp	.+4      	; 0x67c <retainLightStates+0x96>
 678:	66 0f       	add	r22, r22
 67a:	77 1f       	adc	r23, r23
 67c:	0a 94       	dec	r0
 67e:	e2 f7       	brpl	.-8      	; 0x678 <retainLightStates+0x92>
 680:	63 27       	eor	r22, r19
 682:	60 83       	st	Z, r22
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
 684:	13 96       	adiw	r26, 0x03	; 3
 686:	0d 90       	ld	r0, X+
 688:	bc 91       	ld	r27, X
 68a:	a0 2d       	mov	r26, r0
 68c:	3c 91       	ld	r19, X
 68e:	f7 01       	movw	r30, r14
 690:	e8 0f       	add	r30, r24
 692:	f9 1f       	adc	r31, r25
 694:	ee 0f       	add	r30, r30
 696:	ff 1f       	adc	r31, r31
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	8c 0f       	add	r24, r28
 69e:	9d 1f       	adc	r25, r29
 6a0:	e8 0f       	add	r30, r24
 6a2:	f9 1f       	adc	r31, r25
 6a4:	05 80       	ldd	r0, Z+5	; 0x05
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <retainLightStates+0xc6>
 6a8:	44 0f       	add	r20, r20
 6aa:	55 1f       	adc	r21, r21
 6ac:	0a 94       	dec	r0
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <retainLightStates+0xc2>
 6b0:	43 27       	eor	r20, r19
 6b2:	4c 93       	st	X, r20
		{{&PORTC, PC4}, {&PORTF, PF6}}  // light3state
	};

	volatile uint8_t *lightStates[3] = { &lastState.lightState_1, &lastState.lightState_2, &lastState.lightState_3};

	for(uint8_t i = 0; i < 3; i++) {
 6b4:	2f 5f       	subi	r18, 0xFF	; 255
 6b6:	23 30       	cpi	r18, 0x03	; 3
 6b8:	08 f4       	brcc	.+2      	; 0x6bc <retainLightStates+0xd6>
 6ba:	b7 cf       	rjmp	.-146    	; 0x62a <retainLightStates+0x44>
		if(*lightStates[i]) {
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
		}
	}
}
 6bc:	68 96       	adiw	r28, 0x18	; 24
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	f8 94       	cli
 6c2:	de bf       	out	0x3e, r29	; 62
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	cd bf       	out	0x3d, r28	; 61
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	08 95       	ret

000006d6 <retainFanState>:

void retainFanState(void){
	switch(lastState.lastF1State){
 6d6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <lastState+0x3>
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	81 f0       	breq	.+32     	; 0x6fe <retainFanState+0x28>
 6de:	28 f4       	brcc	.+10     	; 0x6ea <retainFanState+0x14>
 6e0:	88 23       	and	r24, r24
 6e2:	49 f0       	breq	.+18     	; 0x6f6 <retainFanState+0x20>
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	49 f0       	breq	.+18     	; 0x6fa <retainFanState+0x24>
 6e8:	12 c0       	rjmp	.+36     	; 0x70e <retainFanState+0x38>
 6ea:	84 30       	cpi	r24, 0x04	; 4
 6ec:	61 f0       	breq	.+24     	; 0x706 <retainFanState+0x30>
 6ee:	48 f0       	brcs	.+18     	; 0x702 <retainFanState+0x2c>
 6f0:	85 30       	cpi	r24, 0x05	; 5
 6f2:	59 f0       	breq	.+22     	; 0x70a <retainFanState+0x34>
 6f4:	0c c0       	rjmp	.+24     	; 0x70e <retainFanState+0x38>
		case 0: as0(); break;
 6f6:	e8 cc       	rjmp	.-1584   	; 0xc8 <as0>
 6f8:	08 95       	ret
		case 1: as1(); break;
 6fa:	17 cd       	rjmp	.-1490   	; 0x12a <as1>
 6fc:	08 95       	ret
		case 2: as2(); break;
 6fe:	46 cd       	rjmp	.-1396   	; 0x18c <as2>
 700:	08 95       	ret
		case 3: as3(); break;
 702:	75 cd       	rjmp	.-1302   	; 0x1ee <as3>
 704:	08 95       	ret
		case 4: as4(); break;
 706:	a4 cd       	rjmp	.-1208   	; 0x250 <as4>
 708:	08 95       	ret
		case 5: as5(); break;
 70a:	d3 cd       	rjmp	.-1114   	; 0x2b2 <as5>
 70c:	08 95       	ret
 70e:	dc cc       	rjmp	.-1608   	; 0xc8 <as0>
		default:as0(); break;
 710:	08 95       	ret

00000712 <main>:
 712:	1d df       	rcall	.-454    	; 0x54e <setup>
 714:	2e df       	rcall	.-420    	; 0x572 <readLastStatesFromEEPROM>

int main(void)
 {
    setup();
    readLastStatesFromEEPROM();
    retainLightStates();
 716:	67 df       	rcall	.-306    	; 0x5e6 <retainLightStates>
 718:	de df       	rcall	.-68     	; 0x6d6 <retainFanState>
    retainFanState();
 71a:	ff cf       	rjmp	.-2      	; 0x71a <main+0x8>

0000071c <handle_All_ON>:
 71c:	fb dd       	rcall	.-1034   	; 0x314 <light1_ON>
 71e:	11 de       	rcall	.-990    	; 0x342 <light2_ON>
}

void handle_All_ON() {
	light1_ON();
	light2_ON();
	light3_ON();
 720:	27 de       	rcall	.-946    	; 0x370 <light3_ON>
 722:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <lastState+0x3>
	switch(lastState.lastF1State){
 726:	83 30       	cpi	r24, 0x03	; 3
 728:	e9 f0       	breq	.+58     	; 0x764 <handle_All_ON+0x48>
 72a:	28 f4       	brcc	.+10     	; 0x736 <handle_All_ON+0x1a>
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	41 f0       	breq	.+16     	; 0x740 <handle_All_ON+0x24>
 730:	82 30       	cpi	r24, 0x02	; 2
 732:	79 f0       	breq	.+30     	; 0x752 <handle_All_ON+0x36>
 734:	32 c0       	rjmp	.+100    	; 0x79a <handle_All_ON+0x7e>
 736:	84 30       	cpi	r24, 0x04	; 4
 738:	f1 f0       	breq	.+60     	; 0x776 <handle_All_ON+0x5a>
 73a:	85 30       	cpi	r24, 0x05	; 5
 73c:	29 f1       	breq	.+74     	; 0x788 <handle_All_ON+0x6c>
 73e:	2d c0       	rjmp	.+90     	; 0x79a <handle_All_ON+0x7e>
		case 1: as1(); USART_Transmit('A'); lastState.lastF1State = 1; fan_speed = 1; break;
 740:	f4 dc       	rcall	.-1560   	; 0x12a <as1>
 742:	81 e4       	ldi	r24, 0x41	; 65
 744:	f3 d1       	rcall	.+998    	; 0xb2c <USART_Transmit>
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 74c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
 750:	08 95       	ret
		case 2: as2(); USART_Transmit('C'); lastState.lastF1State = 2; fan_speed = 2; break;
 752:	1c dd       	rcall	.-1480   	; 0x18c <as2>
 754:	83 e4       	ldi	r24, 0x43	; 67
 756:	ea d1       	rcall	.+980    	; 0xb2c <USART_Transmit>
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 75e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
 762:	08 95       	ret
		case 3: as3(); USART_Transmit('D'); lastState.lastF1State = 3; fan_speed = 3; break;
 764:	44 dd       	rcall	.-1400   	; 0x1ee <as3>
 766:	84 e4       	ldi	r24, 0x44	; 68
 768:	e1 d1       	rcall	.+962    	; 0xb2c <USART_Transmit>
 76a:	83 e0       	ldi	r24, 0x03	; 3
 76c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 770:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
 774:	08 95       	ret
		case 4: as4(); USART_Transmit('E'); lastState.lastF1State = 4; fan_speed = 4; break;
 776:	6c dd       	rcall	.-1320   	; 0x250 <as4>
 778:	85 e4       	ldi	r24, 0x45	; 69
 77a:	d8 d1       	rcall	.+944    	; 0xb2c <USART_Transmit>
 77c:	84 e0       	ldi	r24, 0x04	; 4
 77e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 782:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
 786:	08 95       	ret
		case 5: as5(); USART_Transmit('F'); lastState.lastF1State = 5; fan_speed = 5; break;
 788:	94 dd       	rcall	.-1240   	; 0x2b2 <as5>
 78a:	86 e4       	ldi	r24, 0x46	; 70
 78c:	cf d1       	rcall	.+926    	; 0xb2c <USART_Transmit>
 78e:	85 e0       	ldi	r24, 0x05	; 5
 790:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 794:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
 798:	08 95       	ret
 79a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <fan_speed>
		default:
		switch(fan_speed){
 79e:	83 30       	cpi	r24, 0x03	; 3
 7a0:	e9 f0       	breq	.+58     	; 0x7dc <handle_All_ON+0xc0>
 7a2:	28 f4       	brcc	.+10     	; 0x7ae <handle_All_ON+0x92>
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	41 f0       	breq	.+16     	; 0x7b8 <handle_All_ON+0x9c>
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	79 f0       	breq	.+30     	; 0x7ca <handle_All_ON+0xae>
 7ac:	32 c0       	rjmp	.+100    	; 0x812 <handle_All_ON+0xf6>
 7ae:	84 30       	cpi	r24, 0x04	; 4
 7b0:	f1 f0       	breq	.+60     	; 0x7ee <handle_All_ON+0xd2>
 7b2:	85 30       	cpi	r24, 0x05	; 5
 7b4:	29 f1       	breq	.+74     	; 0x800 <handle_All_ON+0xe4>
			case 1: as1(); USART_Transmit('A'); lastState.lastF1State = 1; fan_speed = 1; break;
 7b6:	2d c0       	rjmp	.+90     	; 0x812 <handle_All_ON+0xf6>
 7b8:	b8 dc       	rcall	.-1680   	; 0x12a <as1>
 7ba:	81 e4       	ldi	r24, 0x41	; 65
 7bc:	b7 d1       	rcall	.+878    	; 0xb2c <USART_Transmit>
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 7c4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
			case 2: as2(); USART_Transmit('C'); lastState.lastF1State = 2; fan_speed = 2; break;
 7c8:	08 95       	ret
 7ca:	e0 dc       	rcall	.-1600   	; 0x18c <as2>
 7cc:	83 e4       	ldi	r24, 0x43	; 67
 7ce:	ae d1       	rcall	.+860    	; 0xb2c <USART_Transmit>
 7d0:	82 e0       	ldi	r24, 0x02	; 2
 7d2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 7d6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
			case 3: as3(); USART_Transmit('D'); lastState.lastF1State = 3; fan_speed = 3; break;
 7da:	08 95       	ret
 7dc:	08 dd       	rcall	.-1520   	; 0x1ee <as3>
 7de:	84 e4       	ldi	r24, 0x44	; 68
 7e0:	a5 d1       	rcall	.+842    	; 0xb2c <USART_Transmit>
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 7e8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
			case 4: as4(); USART_Transmit('E'); lastState.lastF1State = 4; fan_speed = 4; break;
 7ec:	08 95       	ret
 7ee:	30 dd       	rcall	.-1440   	; 0x250 <as4>
 7f0:	85 e4       	ldi	r24, 0x45	; 69
 7f2:	9c d1       	rcall	.+824    	; 0xb2c <USART_Transmit>
 7f4:	84 e0       	ldi	r24, 0x04	; 4
 7f6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 7fa:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
 7fe:	08 95       	ret
			case 5: as5(); USART_Transmit('F'); lastState.lastF1State = 5; fan_speed = 5; break;
 800:	58 dd       	rcall	.-1360   	; 0x2b2 <as5>
 802:	86 e4       	ldi	r24, 0x46	; 70
 804:	93 d1       	rcall	.+806    	; 0xb2c <USART_Transmit>
 806:	85 e0       	ldi	r24, 0x05	; 5
 808:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 80c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
 810:	08 95       	ret
 812:	8b dc       	rcall	.-1770   	; 0x12a <as1>
 814:	81 e4       	ldi	r24, 0x41	; 65
			default:as1(); USART_Transmit('A'); lastState.lastF1State = 1; fan_speed = 1; break;
 816:	8a d1       	rcall	.+788    	; 0xb2c <USART_Transmit>
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 81e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
 822:	08 95       	ret

00000824 <handle_All_OFF>:
 824:	83 dd       	rcall	.-1274   	; 0x32c <light1_OFF>
 826:	99 dd       	rcall	.-1230   	; 0x35a <light2_OFF>
 828:	af dd       	rcall	.-1186   	; 0x388 <light3_OFF>
 82a:	4e dc       	rcall	.-1892   	; 0xc8 <as0>

void handle_All_OFF() {
	light1_OFF();
	light2_OFF();
	light3_OFF();
	as0();
 82c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <lastState+0x3>
	lastState.lastF1State = 0;
 830:	08 95       	ret

00000832 <SPIprocessCommand>:
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 */ 

#include "spiDataProcess.h"
const char* command;

void SPIprocessCommand(const char* command) {
 836:	ec 01       	movw	r28, r24
	
	if (strcmp(command, "H1") == 0) {
 838:	60 e2       	ldi	r22, 0x20	; 32
 83a:	71 e0       	ldi	r23, 0x01	; 1
 83c:	29 d2       	rcall	.+1106   	; 0xc90 <strcmp>
 83e:	89 2b       	or	r24, r25
 840:	19 f4       	brne	.+6      	; 0x848 <SPIprocessCommand+0x16>
		USART_Transmit('G');
 842:	87 e4       	ldi	r24, 0x47	; 71
 844:	73 d1       	rcall	.+742    	; 0xb2c <USART_Transmit>
 846:	66 c1       	rjmp	.+716    	; 0xb14 <SPIprocessCommand+0x2e2>
	}
	else if (strcmp(command, "L1") == 0) {
 848:	63 e2       	ldi	r22, 0x23	; 35
 84a:	71 e0       	ldi	r23, 0x01	; 1
 84c:	ce 01       	movw	r24, r28
 84e:	20 d2       	rcall	.+1088   	; 0xc90 <strcmp>
 850:	89 2b       	or	r24, r25
 852:	19 f5       	brne	.+70     	; 0x89a <SPIprocessCommand+0x68>
		PORTC ^= (1 << PC1);               //LIGHT 1
 854:	95 b3       	in	r25, 0x15	; 21
 856:	82 e0       	ldi	r24, 0x02	; 2
 858:	89 27       	eor	r24, r25
 85a:	85 bb       	out	0x15, r24	; 21
		PORTF ^= (1 << PF4);
 85c:	e2 e6       	ldi	r30, 0x62	; 98
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	90 81       	ld	r25, Z
 862:	80 e1       	ldi	r24, 0x10	; 16
 864:	89 27       	eor	r24, r25
 866:	80 83       	st	Z, r24
		uint8_t newLightState_1 = (lastState.lightState_1 == 0) ? 1 : 0;
 868:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <lastState>
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	91 11       	cpse	r25, r1
 870:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_1 != lastState.lightState_1) {
 872:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <lastState>
 876:	89 17       	cp	r24, r25
 878:	09 f4       	brne	.+2      	; 0x87c <SPIprocessCommand+0x4a>
 87a:	4c c1       	rjmp	.+664    	; 0xb14 <SPIprocessCommand+0x2e2>
			lastState.lightState_1 = newLightState_1;
 87c:	c0 e4       	ldi	r28, 0x40	; 64
 87e:	d1 e0       	ldi	r29, 0x01	; 1
 880:	88 83       	st	Y, r24
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT1_STATE_ADDR, lastState.lightState_1); // Store the Light1 state in EEPROM
 882:	68 81       	ld	r22, Y
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	14 d2       	rcall	.+1064   	; 0xcb2 <eeprom_write_byte>
			USART_Transmit(lastState.lightState_1 == 1 ? 'P' : 'Q');
 88a:	88 81       	ld	r24, Y
 88c:	81 30       	cpi	r24, 0x01	; 1
 88e:	11 f4       	brne	.+4      	; 0x894 <SPIprocessCommand+0x62>
 890:	80 e5       	ldi	r24, 0x50	; 80
 892:	01 c0       	rjmp	.+2      	; 0x896 <SPIprocessCommand+0x64>
 894:	81 e5       	ldi	r24, 0x51	; 81
 896:	4a d1       	rcall	.+660    	; 0xb2c <USART_Transmit>
		}
	}

	else if (strcmp(command, "L2") == 0) {    //light 2
 898:	3d c1       	rjmp	.+634    	; 0xb14 <SPIprocessCommand+0x2e2>
 89a:	66 e2       	ldi	r22, 0x26	; 38
 89c:	71 e0       	ldi	r23, 0x01	; 1
 89e:	ce 01       	movw	r24, r28
 8a0:	f7 d1       	rcall	.+1006   	; 0xc90 <strcmp>
 8a2:	89 2b       	or	r24, r25
 8a4:	19 f5       	brne	.+70     	; 0x8ec <SPIprocessCommand+0xba>
		PORTC ^= (1 << PC3);
 8a6:	95 b3       	in	r25, 0x15	; 21
 8a8:	88 e0       	ldi	r24, 0x08	; 8
 8aa:	89 27       	eor	r24, r25
 8ac:	85 bb       	out	0x15, r24	; 21
		PORTF ^= (1 << PF5);
 8ae:	e2 e6       	ldi	r30, 0x62	; 98
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	90 81       	ld	r25, Z
 8b4:	80 e2       	ldi	r24, 0x20	; 32
 8b6:	89 27       	eor	r24, r25
 8b8:	80 83       	st	Z, r24
		uint8_t newLightState_2 = (lastState.lightState_2 == 0) ? 1 : 0;
 8ba:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <lastState+0x1>
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	91 11       	cpse	r25, r1
 8c2:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_2 != lastState.lightState_2){
 8c4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <lastState+0x1>
 8c8:	89 17       	cp	r24, r25
 8ca:	09 f4       	brne	.+2      	; 0x8ce <SPIprocessCommand+0x9c>
 8cc:	23 c1       	rjmp	.+582    	; 0xb14 <SPIprocessCommand+0x2e2>
			lastState.lightState_2 = newLightState_2;
 8ce:	c0 e4       	ldi	r28, 0x40	; 64
 8d0:	d1 e0       	ldi	r29, 0x01	; 1
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT2_STATE_ADDR, lastState.lightState_2); // Store the Light2 state in EEPROM
 8d2:	89 83       	std	Y+1, r24	; 0x01
 8d4:	69 81       	ldd	r22, Y+1	; 0x01
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	90 e0       	ldi	r25, 0x00	; 0
			USART_Transmit(lastState.lightState_2 == 1 ? 'R' : 'S');
 8da:	eb d1       	rcall	.+982    	; 0xcb2 <eeprom_write_byte>
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	81 30       	cpi	r24, 0x01	; 1
 8e0:	11 f4       	brne	.+4      	; 0x8e6 <SPIprocessCommand+0xb4>
 8e2:	82 e5       	ldi	r24, 0x52	; 82
 8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <SPIprocessCommand+0xb6>
 8e6:	83 e5       	ldi	r24, 0x53	; 83
 8e8:	21 d1       	rcall	.+578    	; 0xb2c <USART_Transmit>
		}
	}
	
	else if (strcmp(command, "L3") == 0) {  //light 3
 8ea:	14 c1       	rjmp	.+552    	; 0xb14 <SPIprocessCommand+0x2e2>
 8ec:	69 e2       	ldi	r22, 0x29	; 41
 8ee:	71 e0       	ldi	r23, 0x01	; 1
 8f0:	ce 01       	movw	r24, r28
 8f2:	ce d1       	rcall	.+924    	; 0xc90 <strcmp>
 8f4:	89 2b       	or	r24, r25
 8f6:	19 f5       	brne	.+70     	; 0x93e <SPIprocessCommand+0x10c>
		PORTC ^= (1 << PC4);
 8f8:	95 b3       	in	r25, 0x15	; 21
 8fa:	80 e1       	ldi	r24, 0x10	; 16
 8fc:	89 27       	eor	r24, r25
 8fe:	85 bb       	out	0x15, r24	; 21
		PORTF ^= (1 << PF6);
 900:	e2 e6       	ldi	r30, 0x62	; 98
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	90 81       	ld	r25, Z
 906:	80 e4       	ldi	r24, 0x40	; 64
 908:	89 27       	eor	r24, r25
 90a:	80 83       	st	Z, r24
		uint8_t newLightState_3 = (lastState.lightState_3 == 0) ? 1 : 0;
 90c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <lastState+0x2>
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	91 11       	cpse	r25, r1
 914:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_3 != lastState.lightState_3){
 916:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <lastState+0x2>
 91a:	89 17       	cp	r24, r25
 91c:	09 f4       	brne	.+2      	; 0x920 <SPIprocessCommand+0xee>
			lastState.lightState_3 = newLightState_3;
 91e:	fa c0       	rjmp	.+500    	; 0xb14 <SPIprocessCommand+0x2e2>
 920:	c0 e4       	ldi	r28, 0x40	; 64
 922:	d1 e0       	ldi	r29, 0x01	; 1
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT3_STATE_ADDR, lastState.lightState_3); //Store the Light state 3 in EEPROM
 924:	8a 83       	std	Y+2, r24	; 0x02
 926:	6a 81       	ldd	r22, Y+2	; 0x02
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	90 e0       	ldi	r25, 0x00	; 0
			USART_Transmit(lastState.lightState_3 == 1 ? 'T' : 'U');
 92c:	c2 d1       	rcall	.+900    	; 0xcb2 <eeprom_write_byte>
 92e:	8a 81       	ldd	r24, Y+2	; 0x02
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	11 f4       	brne	.+4      	; 0x938 <SPIprocessCommand+0x106>
 934:	84 e5       	ldi	r24, 0x54	; 84
 936:	01 c0       	rjmp	.+2      	; 0x93a <SPIprocessCommand+0x108>
 938:	85 e5       	ldi	r24, 0x55	; 85
 93a:	f8 d0       	rcall	.+496    	; 0xb2c <USART_Transmit>
		}
	}
	
	else if (strcmp(command, "F0") == 0) {       // Fan ON state
 93c:	eb c0       	rjmp	.+470    	; 0xb14 <SPIprocessCommand+0x2e2>
 93e:	6c e2       	ldi	r22, 0x2C	; 44
 940:	71 e0       	ldi	r23, 0x01	; 1
 942:	ce 01       	movw	r24, r28
 944:	a5 d1       	rcall	.+842    	; 0xc90 <strcmp>
 946:	89 2b       	or	r24, r25
 948:	09 f0       	breq	.+2      	; 0x94c <SPIprocessCommand+0x11a>
 94a:	70 c0       	rjmp	.+224    	; 0xa2c <SPIprocessCommand+0x1fa>
		switch(lastState.lastF1State){
 94c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <lastState+0x3>
 950:	83 30       	cpi	r24, 0x03	; 3
 952:	c9 f0       	breq	.+50     	; 0x986 <SPIprocessCommand+0x154>
 954:	28 f4       	brcc	.+10     	; 0x960 <SPIprocessCommand+0x12e>
 956:	81 30       	cpi	r24, 0x01	; 1
 958:	41 f0       	breq	.+16     	; 0x96a <SPIprocessCommand+0x138>
 95a:	82 30       	cpi	r24, 0x02	; 2
 95c:	69 f0       	breq	.+26     	; 0x978 <SPIprocessCommand+0x146>
 95e:	28 c0       	rjmp	.+80     	; 0x9b0 <SPIprocessCommand+0x17e>
 960:	84 30       	cpi	r24, 0x04	; 4
 962:	c1 f0       	breq	.+48     	; 0x994 <SPIprocessCommand+0x162>
			case 1: as1(); USART_Transmit('A'); lastState.lastF1State = 1; break;
 964:	85 30       	cpi	r24, 0x05	; 5
 966:	e9 f0       	breq	.+58     	; 0x9a2 <SPIprocessCommand+0x170>
 968:	23 c0       	rjmp	.+70     	; 0x9b0 <SPIprocessCommand+0x17e>
 96a:	df db       	rcall	.-2114   	; 0x12a <as1>
 96c:	81 e4       	ldi	r24, 0x41	; 65
 96e:	de d0       	rcall	.+444    	; 0xb2c <USART_Transmit>
 970:	81 e0       	ldi	r24, 0x01	; 1
			case 2: as2(); USART_Transmit('C'); lastState.lastF1State = 2; break;
 972:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 976:	54 c0       	rjmp	.+168    	; 0xa20 <SPIprocessCommand+0x1ee>
 978:	09 dc       	rcall	.-2030   	; 0x18c <as2>
 97a:	83 e4       	ldi	r24, 0x43	; 67
 97c:	d7 d0       	rcall	.+430    	; 0xb2c <USART_Transmit>
 97e:	82 e0       	ldi	r24, 0x02	; 2
			case 3: as3(); USART_Transmit('D'); lastState.lastF1State = 3; break;
 980:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 984:	4d c0       	rjmp	.+154    	; 0xa20 <SPIprocessCommand+0x1ee>
 986:	33 dc       	rcall	.-1946   	; 0x1ee <as3>
 988:	84 e4       	ldi	r24, 0x44	; 68
 98a:	d0 d0       	rcall	.+416    	; 0xb2c <USART_Transmit>
 98c:	83 e0       	ldi	r24, 0x03	; 3
 98e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
			case 4: as4(); USART_Transmit('E'); lastState.lastF1State = 4; break;
 992:	46 c0       	rjmp	.+140    	; 0xa20 <SPIprocessCommand+0x1ee>
 994:	5d dc       	rcall	.-1862   	; 0x250 <as4>
 996:	85 e4       	ldi	r24, 0x45	; 69
 998:	c9 d0       	rcall	.+402    	; 0xb2c <USART_Transmit>
 99a:	84 e0       	ldi	r24, 0x04	; 4
 99c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 9a0:	3f c0       	rjmp	.+126    	; 0xa20 <SPIprocessCommand+0x1ee>
			case 5: as5(); USART_Transmit('F'); lastState.lastF1State = 5; break;
 9a2:	87 dc       	rcall	.-1778   	; 0x2b2 <as5>
 9a4:	86 e4       	ldi	r24, 0x46	; 70
 9a6:	c2 d0       	rcall	.+388    	; 0xb2c <USART_Transmit>
 9a8:	85 e0       	ldi	r24, 0x05	; 5
 9aa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 9ae:	38 c0       	rjmp	.+112    	; 0xa20 <SPIprocessCommand+0x1ee>
			default:
			switch(fan_speed){
 9b0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <fan_speed>
 9b4:	83 30       	cpi	r24, 0x03	; 3
 9b6:	c9 f0       	breq	.+50     	; 0x9ea <SPIprocessCommand+0x1b8>
 9b8:	28 f4       	brcc	.+10     	; 0x9c4 <SPIprocessCommand+0x192>
 9ba:	81 30       	cpi	r24, 0x01	; 1
 9bc:	41 f0       	breq	.+16     	; 0x9ce <SPIprocessCommand+0x19c>
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	69 f0       	breq	.+26     	; 0x9dc <SPIprocessCommand+0x1aa>
 9c2:	28 c0       	rjmp	.+80     	; 0xa14 <SPIprocessCommand+0x1e2>
 9c4:	84 30       	cpi	r24, 0x04	; 4
				case 1: as1(); USART_Transmit('A'); lastState.lastF1State = 1; break;
 9c6:	c1 f0       	breq	.+48     	; 0x9f8 <SPIprocessCommand+0x1c6>
 9c8:	85 30       	cpi	r24, 0x05	; 5
 9ca:	e9 f0       	breq	.+58     	; 0xa06 <SPIprocessCommand+0x1d4>
 9cc:	23 c0       	rjmp	.+70     	; 0xa14 <SPIprocessCommand+0x1e2>
 9ce:	ad db       	rcall	.-2214   	; 0x12a <as1>
 9d0:	81 e4       	ldi	r24, 0x41	; 65
 9d2:	ac d0       	rcall	.+344    	; 0xb2c <USART_Transmit>
				case 2: as2(); USART_Transmit('C'); lastState.lastF1State = 2; break;
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 9da:	22 c0       	rjmp	.+68     	; 0xa20 <SPIprocessCommand+0x1ee>
 9dc:	d7 db       	rcall	.-2130   	; 0x18c <as2>
 9de:	83 e4       	ldi	r24, 0x43	; 67
 9e0:	a5 d0       	rcall	.+330    	; 0xb2c <USART_Transmit>
				case 3: as3(); USART_Transmit('D'); lastState.lastF1State = 3; break;
 9e2:	82 e0       	ldi	r24, 0x02	; 2
 9e4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 9e8:	1b c0       	rjmp	.+54     	; 0xa20 <SPIprocessCommand+0x1ee>
 9ea:	01 dc       	rcall	.-2046   	; 0x1ee <as3>
 9ec:	84 e4       	ldi	r24, 0x44	; 68
 9ee:	9e d0       	rcall	.+316    	; 0xb2c <USART_Transmit>
 9f0:	83 e0       	ldi	r24, 0x03	; 3
				case 4: as4(); USART_Transmit('E'); lastState.lastF1State = 4; break;
 9f2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 9f6:	14 c0       	rjmp	.+40     	; 0xa20 <SPIprocessCommand+0x1ee>
 9f8:	2b dc       	rcall	.-1962   	; 0x250 <as4>
 9fa:	85 e4       	ldi	r24, 0x45	; 69
 9fc:	97 d0       	rcall	.+302    	; 0xb2c <USART_Transmit>
				case 5: as5(); USART_Transmit('F'); lastState.lastF1State = 5; break;
 9fe:	84 e0       	ldi	r24, 0x04	; 4
 a00:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 a04:	0d c0       	rjmp	.+26     	; 0xa20 <SPIprocessCommand+0x1ee>
 a06:	55 dc       	rcall	.-1878   	; 0x2b2 <as5>
 a08:	86 e4       	ldi	r24, 0x46	; 70
 a0a:	90 d0       	rcall	.+288    	; 0xb2c <USART_Transmit>
				default:as1(); USART_Transmit('A'); lastState.lastF1State = 1; break;
 a0c:	85 e0       	ldi	r24, 0x05	; 5
 a0e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 a12:	06 c0       	rjmp	.+12     	; 0xa20 <SPIprocessCommand+0x1ee>
 a14:	8a db       	rcall	.-2284   	; 0x12a <as1>
 a16:	81 e4       	ldi	r24, 0x41	; 65
			}
			break;
		}
		eeprom_write_byte((uint8_t*)EEPROM_FAN1_STATE_ADDR, lastState.lastF1State);
 a18:	89 d0       	rcall	.+274    	; 0xb2c <USART_Transmit>
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 a20:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <lastState+0x3>
	}
	
	else if (strcmp(command, "F1") == 0) {  // fan off state
 a24:	83 e0       	ldi	r24, 0x03	; 3
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	44 d1       	rcall	.+648    	; 0xcb2 <eeprom_write_byte>
 a2a:	74 c0       	rjmp	.+232    	; 0xb14 <SPIprocessCommand+0x2e2>
 a2c:	6f e2       	ldi	r22, 0x2F	; 47
		USART_Transmit('B');
 a2e:	71 e0       	ldi	r23, 0x01	; 1
 a30:	ce 01       	movw	r24, r28
		as0();
 a32:	2e d1       	rcall	.+604    	; 0xc90 <strcmp>
 a34:	89 2b       	or	r24, r25
		eeprom_write_byte((uint8_t*)EEPROM_FAN1_STATE_ADDR, 0);
 a36:	41 f4       	brne	.+16     	; 0xa48 <SPIprocessCommand+0x216>
 a38:	82 e4       	ldi	r24, 0x42	; 66
 a3a:	78 d0       	rcall	.+240    	; 0xb2c <USART_Transmit>
 a3c:	45 db       	rcall	.-2422   	; 0xc8 <as0>
	}
	
	else if (strcmp(command, "U1") == 0) {
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	83 e0       	ldi	r24, 0x03	; 3
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	36 d1       	rcall	.+620    	; 0xcb2 <eeprom_write_byte>
 a46:	66 c0       	rjmp	.+204    	; 0xb14 <SPIprocessCommand+0x2e2>
 a48:	62 e3       	ldi	r22, 0x32	; 50
		if((PORTD & (1 << PD4)) == 0) {
 a4a:	71 e0       	ldi	r23, 0x01	; 1
			USART_Transmit('A');
 a4c:	ce 01       	movw	r24, r28
 a4e:	20 d1       	rcall	.+576    	; 0xc90 <strcmp>
 a50:	89 2b       	or	r24, r25
			as1();
 a52:	91 f5       	brne	.+100    	; 0xab8 <SPIprocessCommand+0x286>
 a54:	94 99       	sbic	0x12, 4	; 18
			lastState.lastF1State = 1;
 a56:	07 c0       	rjmp	.+14     	; 0xa66 <SPIprocessCommand+0x234>
 a58:	81 e4       	ldi	r24, 0x41	; 65
 a5a:	68 d0       	rcall	.+208    	; 0xb2c <USART_Transmit>
		}
		else if ((PORTD & (1 << PD5)) == 0) {
 a5c:	66 db       	rcall	.-2356   	; 0x12a <as1>
 a5e:	81 e0       	ldi	r24, 0x01	; 1
			USART_Transmit('C');
 a60:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
			as2();
 a64:	23 c0       	rjmp	.+70     	; 0xaac <SPIprocessCommand+0x27a>
 a66:	95 99       	sbic	0x12, 5	; 18
			lastState.lastF1State = 2;
 a68:	07 c0       	rjmp	.+14     	; 0xa78 <SPIprocessCommand+0x246>
 a6a:	83 e4       	ldi	r24, 0x43	; 67
		}
		else if ((PORTD & (1 << PD6)) == 0) {
 a6c:	5f d0       	rcall	.+190    	; 0xb2c <USART_Transmit>
 a6e:	8e db       	rcall	.-2276   	; 0x18c <as2>
			USART_Transmit('D');
 a70:	82 e0       	ldi	r24, 0x02	; 2
 a72:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
			as3();
 a76:	1a c0       	rjmp	.+52     	; 0xaac <SPIprocessCommand+0x27a>
			lastState.lastF1State = 3;
 a78:	96 99       	sbic	0x12, 6	; 18
 a7a:	07 c0       	rjmp	.+14     	; 0xa8a <SPIprocessCommand+0x258>
 a7c:	84 e4       	ldi	r24, 0x44	; 68
		}
		else if ((PORTD & (1 << PD7)) == 0) {
 a7e:	56 d0       	rcall	.+172    	; 0xb2c <USART_Transmit>
 a80:	b6 db       	rcall	.-2196   	; 0x1ee <as3>
			USART_Transmit('E');
 a82:	83 e0       	ldi	r24, 0x03	; 3
 a84:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
			as4();
			lastState.lastF1State = 4;
 a88:	11 c0       	rjmp	.+34     	; 0xaac <SPIprocessCommand+0x27a>
 a8a:	97 99       	sbic	0x12, 7	; 18
 a8c:	07 c0       	rjmp	.+14     	; 0xa9c <SPIprocessCommand+0x26a>
 a8e:	85 e4       	ldi	r24, 0x45	; 69
		}
		else if ((PORTC & (1 << PC0)) == 0) {
 a90:	4d d0       	rcall	.+154    	; 0xb2c <USART_Transmit>
 a92:	de db       	rcall	.-2116   	; 0x250 <as4>
			USART_Transmit('F');
 a94:	84 e0       	ldi	r24, 0x04	; 4
			as5();
 a96:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
			lastState.lastF1State = 5;
 a9a:	08 c0       	rjmp	.+16     	; 0xaac <SPIprocessCommand+0x27a>
 a9c:	a8 99       	sbic	0x15, 0	; 21
 a9e:	06 c0       	rjmp	.+12     	; 0xaac <SPIprocessCommand+0x27a>
		}
		eeprom_write_byte((uint8_t*)EEPROM_FAN1_STATE_ADDR, lastState.lastF1State);
 aa0:	86 e4       	ldi	r24, 0x46	; 70
 aa2:	44 d0       	rcall	.+136    	; 0xb2c <USART_Transmit>
 aa4:	06 dc       	rcall	.-2036   	; 0x2b2 <as5>
 aa6:	85 e0       	ldi	r24, 0x05	; 5
 aa8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
	}
	
	
	else if (strcmp(command, "D1") == 0) {
 aac:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <lastState+0x3>
 ab0:	83 e0       	ldi	r24, 0x03	; 3
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	fe d0       	rcall	.+508    	; 0xcb2 <eeprom_write_byte>
 ab6:	2e c0       	rjmp	.+92     	; 0xb14 <SPIprocessCommand+0x2e2>
 ab8:	65 e3       	ldi	r22, 0x35	; 53
		if ((PORTC & (1 << PC0)) != 0) {
 aba:	71 e0       	ldi	r23, 0x01	; 1
 abc:	ce 01       	movw	r24, r28
			USART_Transmit('E');
 abe:	e8 d0       	rcall	.+464    	; 0xc90 <strcmp>
 ac0:	89 2b       	or	r24, r25
 ac2:	41 f5       	brne	.+80     	; 0xb14 <SPIprocessCommand+0x2e2>
			as4();
 ac4:	a8 9b       	sbis	0x15, 0	; 21
 ac6:	07 c0       	rjmp	.+14     	; 0xad6 <SPIprocessCommand+0x2a4>
			lastState.lastF1State = 4;
 ac8:	85 e4       	ldi	r24, 0x45	; 69
 aca:	30 d0       	rcall	.+96     	; 0xb2c <USART_Transmit>
 acc:	c1 db       	rcall	.-2174   	; 0x250 <as4>
 ace:	84 e0       	ldi	r24, 0x04	; 4
		}
		else if ((PORTD & (1 << PD7)) != 0) {
 ad0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
			USART_Transmit('D');
 ad4:	1a c0       	rjmp	.+52     	; 0xb0a <SPIprocessCommand+0x2d8>
 ad6:	97 9b       	sbis	0x12, 7	; 18
 ad8:	07 c0       	rjmp	.+14     	; 0xae8 <SPIprocessCommand+0x2b6>
			as3();
 ada:	84 e4       	ldi	r24, 0x44	; 68
 adc:	27 d0       	rcall	.+78     	; 0xb2c <USART_Transmit>
			lastState.lastF1State = 3;
 ade:	87 db       	rcall	.-2290   	; 0x1ee <as3>
 ae0:	83 e0       	ldi	r24, 0x03	; 3
 ae2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
		}
		else if ((PORTD & (1 << PD6)) != 0) {
 ae6:	11 c0       	rjmp	.+34     	; 0xb0a <SPIprocessCommand+0x2d8>
 ae8:	96 9b       	sbis	0x12, 6	; 18
			USART_Transmit('C');
 aea:	07 c0       	rjmp	.+14     	; 0xafa <SPIprocessCommand+0x2c8>
 aec:	83 e4       	ldi	r24, 0x43	; 67
 aee:	1e d0       	rcall	.+60     	; 0xb2c <USART_Transmit>
			as2();
 af0:	4d db       	rcall	.-2406   	; 0x18c <as2>
 af2:	82 e0       	ldi	r24, 0x02	; 2
			lastState.lastF1State = 2;
 af4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 af8:	08 c0       	rjmp	.+16     	; 0xb0a <SPIprocessCommand+0x2d8>
 afa:	95 9b       	sbis	0x12, 5	; 18
		}
		else if ((PORTD & (1 << PD5)) != 0) {
 afc:	06 c0       	rjmp	.+12     	; 0xb0a <SPIprocessCommand+0x2d8>
 afe:	81 e4       	ldi	r24, 0x41	; 65
			USART_Transmit('A');
 b00:	15 d0       	rcall	.+42     	; 0xb2c <USART_Transmit>
 b02:	13 db       	rcall	.-2522   	; 0x12a <as1>
 b04:	81 e0       	ldi	r24, 0x01	; 1
			as1();
 b06:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
			lastState.lastF1State = 1;
 b0a:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <lastState+0x3>
 b0e:	83 e0       	ldi	r24, 0x03	; 3
		}
		eeprom_write_byte((uint8_t*)EEPROM_FAN1_STATE_ADDR, lastState.lastF1State);
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	cf d0       	rcall	.+414    	; 0xcb2 <eeprom_write_byte>
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	08 95       	ret

00000b1a <USART_Init>:

#include "uart.h"

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 b1a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 b1e:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 b20:	88 e9       	ldi	r24, 0x98	; 152
 b22:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 b24:	8e e0       	ldi	r24, 0x0E	; 14
 b26:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 b2a:	08 95       	ret

00000b2c <USART_Transmit>:
}

void USART_Transmit(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
 b2c:	5d 9b       	sbis	0x0b, 5	; 11
 b2e:	fe cf       	rjmp	.-4      	; 0xb2c <USART_Transmit>
	UDR0 = data;
 b30:	8c b9       	out	0x0c, r24	; 12
 b32:	08 95       	ret

00000b34 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
 b34:	5f 9b       	sbis	0x0b, 7	; 11
 b36:	fe cf       	rjmp	.-4      	; 0xb34 <USART_Receive>
	return UDR0;
 b38:	8c b1       	in	r24, 0x0c	; 12
 b3a:	08 95       	ret

00000b3c <UARTprocessCommand>:
 *  Author: kjeya
 */ 

#include "uartDataProcess.h"

void UARTprocessCommand(unsigned char receivedData){
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	c8 2f       	mov	r28, r24
	if (receivedData == 'L') {
 b42:	8c 34       	cpi	r24, 0x4C	; 76
 b44:	71 f4       	brne	.+28     	; 0xb62 <UARTprocessCommand+0x26>
		receivedData = USART_Receive();
 b46:	f6 df       	rcall	.-20     	; 0xb34 <USART_Receive>
 b48:	c8 2f       	mov	r28, r24
		if (receivedData == '1') {	    // light1 ON
 b4a:	81 33       	cpi	r24, 0x31	; 49
			light1_ON();
 b4c:	11 f4       	brne	.+4      	; 0xb52 <UARTprocessCommand+0x16>
 b4e:	e2 db       	rcall	.-2108   	; 0x314 <light1_ON>
 b50:	03 c0       	rjmp	.+6      	; 0xb58 <UARTprocessCommand+0x1c>
		}
		else if (receivedData == '0') {   //light1 OFF
 b52:	80 33       	cpi	r24, 0x30	; 48
			light1_OFF();
 b54:	09 f4       	brne	.+2      	; 0xb58 <UARTprocessCommand+0x1c>
 b56:	ea db       	rcall	.-2092   	; 0x32c <light1_OFF>
		}
		eeprom_write_byte((uint8_t*)EEPROM_LIGHT1_STATE_ADDR, lastState.lightState_1); // Store the Light1 state in EEPROM
 b58:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <lastState>
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if (receivedData == 'M') {
 b60:	a8 d0       	rcall	.+336    	; 0xcb2 <eeprom_write_byte>
 b62:	cd 34       	cpi	r28, 0x4D	; 77
		receivedData = USART_Receive();
 b64:	71 f4       	brne	.+28     	; 0xb82 <UARTprocessCommand+0x46>
 b66:	e6 df       	rcall	.-52     	; 0xb34 <USART_Receive>
		if (receivedData == '1') {        // light2 ON
 b68:	c8 2f       	mov	r28, r24
			light2_ON();
 b6a:	81 33       	cpi	r24, 0x31	; 49
 b6c:	11 f4       	brne	.+4      	; 0xb72 <UARTprocessCommand+0x36>
 b6e:	e9 db       	rcall	.-2094   	; 0x342 <light2_ON>
		}
		else if (receivedData == '0') {       //light2 OFF
 b70:	03 c0       	rjmp	.+6      	; 0xb78 <UARTprocessCommand+0x3c>
			light2_OFF();
 b72:	80 33       	cpi	r24, 0x30	; 48
 b74:	09 f4       	brne	.+2      	; 0xb78 <UARTprocessCommand+0x3c>
		}
		eeprom_write_byte((uint8_t*)EEPROM_LIGHT2_STATE_ADDR, lastState.lightState_2); // Store the Light2 state in EEPROM
 b76:	f1 db       	rcall	.-2078   	; 0x35a <light2_OFF>
 b78:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <lastState+0x1>
 b7c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if (receivedData == 'N') {
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	98 d0       	rcall	.+304    	; 0xcb2 <eeprom_write_byte>
		
		receivedData = USART_Receive();
 b82:	ce 34       	cpi	r28, 0x4E	; 78
 b84:	71 f4       	brne	.+28     	; 0xba2 <UARTprocessCommand+0x66>
		if (receivedData == '1') {      //light3 ON
 b86:	d6 df       	rcall	.-84     	; 0xb34 <USART_Receive>
 b88:	c8 2f       	mov	r28, r24
			light3_ON();
 b8a:	81 33       	cpi	r24, 0x31	; 49
 b8c:	11 f4       	brne	.+4      	; 0xb92 <UARTprocessCommand+0x56>
		}
		else if (receivedData == '0') {     //light3 OFF
 b8e:	f0 db       	rcall	.-2080   	; 0x370 <light3_ON>
			light3_OFF();
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <UARTprocessCommand+0x5c>
 b92:	80 33       	cpi	r24, 0x30	; 48
		}
		eeprom_write_byte((uint8_t*)EEPROM_LIGHT3_STATE_ADDR, lastState.lightState_3); // Store the Light state 3 in EEPROM
 b94:	09 f4       	brne	.+2      	; 0xb98 <UARTprocessCommand+0x5c>
 b96:	f8 db       	rcall	.-2064   	; 0x388 <light3_OFF>
 b98:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <lastState+0x2>
 b9c:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	if (receivedData == 'F') {
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	88 d0       	rcall	.+272    	; 0xcb2 <eeprom_write_byte>
		receivedData = USART_Receive();
 ba2:	c6 34       	cpi	r28, 0x46	; 70
 ba4:	09 f0       	breq	.+2      	; 0xba8 <UARTprocessCommand+0x6c>
		if (receivedData == '1') {     // fan1 ON
 ba6:	43 c0       	rjmp	.+134    	; 0xc2e <UARTprocessCommand+0xf2>
 ba8:	c5 df       	rcall	.-118    	; 0xb34 <USART_Receive>
			as1();
 baa:	c8 2f       	mov	r28, r24
			lastState.lastF1State = 1;
 bac:	81 33       	cpi	r24, 0x31	; 49
 bae:	a9 f5       	brne	.+106    	; 0xc1a <UARTprocessCommand+0xde>
 bb0:	bc da       	rcall	.-2696   	; 0x12a <as1>
			fan_speed = 1;
 bb2:	81 e0       	ldi	r24, 0x01	; 1
 bb4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
			receivedData = USART_Receive();
 bb8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
			if (receivedData == 'U') {
 bbc:	bb df       	rcall	.-138    	; 0xb34 <USART_Receive>
				receivedData = USART_Receive();      //fan1 speed increment and decrement
 bbe:	c8 2f       	mov	r28, r24
 bc0:	85 35       	cpi	r24, 0x55	; 85
 bc2:	81 f5       	brne	.+96     	; 0xc24 <UARTprocessCommand+0xe8>
				if (receivedData == '2') {
 bc4:	b7 df       	rcall	.-146    	; 0xb34 <USART_Receive>
 bc6:	c8 2f       	mov	r28, r24
					as2();
 bc8:	82 33       	cpi	r24, 0x32	; 50
 bca:	39 f4       	brne	.+14     	; 0xbda <UARTprocessCommand+0x9e>
					lastState.lastF1State = 2;
 bcc:	df da       	rcall	.-2626   	; 0x18c <as2>
 bce:	82 e0       	ldi	r24, 0x02	; 2
					fan_speed = 2;
 bd0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 bd4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
				}
				else if (receivedData == '3') {
 bd8:	1a c0       	rjmp	.+52     	; 0xc0e <UARTprocessCommand+0xd2>
					as3();
 bda:	83 33       	cpi	r24, 0x33	; 51
					lastState.lastF1State = 3;
 bdc:	39 f4       	brne	.+14     	; 0xbec <UARTprocessCommand+0xb0>
 bde:	07 db       	rcall	.-2546   	; 0x1ee <as3>
 be0:	83 e0       	ldi	r24, 0x03	; 3
					fan_speed = 3;
 be2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 be6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
				}
				else if (receivedData == '4') {
 bea:	11 c0       	rjmp	.+34     	; 0xc0e <UARTprocessCommand+0xd2>
					as4();
 bec:	84 33       	cpi	r24, 0x34	; 52
					lastState.lastF1State = 4;
 bee:	39 f4       	brne	.+14     	; 0xbfe <UARTprocessCommand+0xc2>
 bf0:	2f db       	rcall	.-2466   	; 0x250 <as4>
 bf2:	84 e0       	ldi	r24, 0x04	; 4
					fan_speed = 4;
 bf4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
				}
				else if (receivedData == '5') {
 bf8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
					as5();
 bfc:	08 c0       	rjmp	.+16     	; 0xc0e <UARTprocessCommand+0xd2>
 bfe:	85 33       	cpi	r24, 0x35	; 53
					lastState.lastF1State = 5;
 c00:	31 f4       	brne	.+12     	; 0xc0e <UARTprocessCommand+0xd2>
 c02:	57 db       	rcall	.-2386   	; 0x2b2 <as5>
					fan_speed = 5;
 c04:	85 e0       	ldi	r24, 0x05	; 5
				}
				eeprom_write_byte((uint8_t*)EEPROM_FAN1_STATE_ADDR, lastState.lastF1State);
 c06:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lastState+0x3>
 c0a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <fan_speed>
 c0e:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <lastState+0x3>
			}
		}
		
		else if (receivedData == '0') {     // fan1 OFF
 c12:	83 e0       	ldi	r24, 0x03	; 3
			as0();
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	4d d0       	rcall	.+154    	; 0xcb2 <eeprom_write_byte>
			lastState.lastF1State = 0;
 c18:	05 c0       	rjmp	.+10     	; 0xc24 <UARTprocessCommand+0xe8>
		}
		eeprom_write_byte((uint8_t*)EEPROM_FAN1_STATE_ADDR, lastState.lastF1State);
 c1a:	80 33       	cpi	r24, 0x30	; 48
 c1c:	19 f4       	brne	.+6      	; 0xc24 <UARTprocessCommand+0xe8>
 c1e:	54 da       	rcall	.-2904   	; 0xc8 <as0>
 c20:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <lastState+0x3>
	}

	if(receivedData == 'Z'){
 c24:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <lastState+0x3>
		receivedData = USART_Receive();
 c28:	83 e0       	ldi	r24, 0x03	; 3
		if(receivedData == '1'){
 c2a:	90 e0       	ldi	r25, 0x00	; 0
			handle_All_ON();
 c2c:	42 d0       	rcall	.+132    	; 0xcb2 <eeprom_write_byte>
 c2e:	ca 35       	cpi	r28, 0x5A	; 90
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT1_STATE_ADDR, lastState.lightState_1);
 c30:	61 f5       	brne	.+88     	; 0xc8a <UARTprocessCommand+0x14e>
 c32:	80 df       	rcall	.-256    	; 0xb34 <USART_Receive>
 c34:	81 33       	cpi	r24, 0x31	; 49
 c36:	a1 f4       	brne	.+40     	; 0xc60 <UARTprocessCommand+0x124>
 c38:	71 dd       	rcall	.-1310   	; 0x71c <handle_All_ON>
 c3a:	c0 e4       	ldi	r28, 0x40	; 64
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT2_STATE_ADDR, lastState.lightState_2);
 c3c:	d1 e0       	ldi	r29, 0x01	; 1
 c3e:	68 81       	ld	r22, Y
 c40:	80 e0       	ldi	r24, 0x00	; 0
 c42:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT3_STATE_ADDR, lastState.lightState_3);
 c44:	36 d0       	rcall	.+108    	; 0xcb2 <eeprom_write_byte>
 c46:	69 81       	ldd	r22, Y+1	; 0x01
 c48:	81 e0       	ldi	r24, 0x01	; 1
 c4a:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_write_byte((uint8_t*)EEPROM_FAN1_STATE_ADDR, lastState.lastF1State);
 c4c:	32 d0       	rcall	.+100    	; 0xcb2 <eeprom_write_byte>
 c4e:	6a 81       	ldd	r22, Y+2	; 0x02
 c50:	82 e0       	ldi	r24, 0x02	; 2
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	2e d0       	rcall	.+92     	; 0xcb2 <eeprom_write_byte>
 c56:	6b 81       	ldd	r22, Y+3	; 0x03
		}
		else if(receivedData == '0'){
 c58:	83 e0       	ldi	r24, 0x03	; 3
 c5a:	90 e0       	ldi	r25, 0x00	; 0
			handle_All_OFF();
 c5c:	2a d0       	rcall	.+84     	; 0xcb2 <eeprom_write_byte>
 c5e:	15 c0       	rjmp	.+42     	; 0xc8a <UARTprocessCommand+0x14e>
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT1_STATE_ADDR, lastState.lightState_1);
 c60:	80 33       	cpi	r24, 0x30	; 48
 c62:	99 f4       	brne	.+38     	; 0xc8a <UARTprocessCommand+0x14e>
 c64:	df dd       	rcall	.-1090   	; 0x824 <handle_All_OFF>
 c66:	c0 e4       	ldi	r28, 0x40	; 64
 c68:	d1 e0       	ldi	r29, 0x01	; 1
 c6a:	68 81       	ld	r22, Y
 c6c:	80 e0       	ldi	r24, 0x00	; 0
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT2_STATE_ADDR, lastState.lightState_2);
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	20 d0       	rcall	.+64     	; 0xcb2 <eeprom_write_byte>
 c72:	69 81       	ldd	r22, Y+1	; 0x01
 c74:	81 e0       	ldi	r24, 0x01	; 1
 c76:	90 e0       	ldi	r25, 0x00	; 0
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT3_STATE_ADDR, lastState.lightState_3);
 c78:	1c d0       	rcall	.+56     	; 0xcb2 <eeprom_write_byte>
 c7a:	6a 81       	ldd	r22, Y+2	; 0x02
 c7c:	82 e0       	ldi	r24, 0x02	; 2
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	18 d0       	rcall	.+48     	; 0xcb2 <eeprom_write_byte>
			eeprom_write_byte((uint8_t*)EEPROM_FAN1_STATE_ADDR, 0);
 c82:	60 e0       	ldi	r22, 0x00	; 0
 c84:	83 e0       	ldi	r24, 0x03	; 3
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	14 d0       	rcall	.+40     	; 0xcb2 <eeprom_write_byte>
 c8a:	df 91       	pop	r29
		}
	}
 c8c:	cf 91       	pop	r28
 c8e:	08 95       	ret

00000c90 <strcmp>:
 c90:	fb 01       	movw	r30, r22
 c92:	dc 01       	movw	r26, r24
 c94:	8d 91       	ld	r24, X+
 c96:	01 90       	ld	r0, Z+
 c98:	80 19       	sub	r24, r0
 c9a:	01 10       	cpse	r0, r1
 c9c:	d9 f3       	breq	.-10     	; 0xc94 <strcmp+0x4>
 c9e:	99 0b       	sbc	r25, r25
 ca0:	08 95       	ret

00000ca2 <eeprom_read_byte>:
 ca2:	e1 99       	sbic	0x1c, 1	; 28
 ca4:	fe cf       	rjmp	.-4      	; 0xca2 <eeprom_read_byte>
 ca6:	9f bb       	out	0x1f, r25	; 31
 ca8:	8e bb       	out	0x1e, r24	; 30
 caa:	e0 9a       	sbi	0x1c, 0	; 28
 cac:	99 27       	eor	r25, r25
 cae:	8d b3       	in	r24, 0x1d	; 29
 cb0:	08 95       	ret

00000cb2 <eeprom_write_byte>:
 cb2:	26 2f       	mov	r18, r22

00000cb4 <eeprom_write_r18>:
 cb4:	e1 99       	sbic	0x1c, 1	; 28
 cb6:	fe cf       	rjmp	.-4      	; 0xcb4 <eeprom_write_r18>
 cb8:	9f bb       	out	0x1f, r25	; 31
 cba:	8e bb       	out	0x1e, r24	; 30
 cbc:	2d bb       	out	0x1d, r18	; 29
 cbe:	0f b6       	in	r0, 0x3f	; 63
 cc0:	f8 94       	cli
 cc2:	e2 9a       	sbi	0x1c, 2	; 28
 cc4:	e1 9a       	sbi	0x1c, 1	; 28
 cc6:	0f be       	out	0x3f, r0	; 63
 cc8:	01 96       	adiw	r24, 0x01	; 1
 cca:	08 95       	ret

00000ccc <_exit>:
 ccc:	f8 94       	cli

00000cce <__stop_program>:
 cce:	ff cf       	rjmp	.-2      	; 0xcce <__stop_program>
