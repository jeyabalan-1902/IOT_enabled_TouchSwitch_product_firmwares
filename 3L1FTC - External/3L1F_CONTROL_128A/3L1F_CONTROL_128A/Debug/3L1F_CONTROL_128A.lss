
3L1F_CONTROL_128A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000dac  00000e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800136  00800136  00000e76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002205  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e17  00000000  00000000  000032ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001400  00000000  00000000  00004104  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  00005504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bb  00000000  00000000  000059a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093a  00000000  00000000  0000615b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00006a95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c2       	rjmp	.+1130   	; 0x49c <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c2       	rjmp	.+1140   	; 0x4ba <__vector_17>
  46:	00 00       	nop
  48:	8a c2       	rjmp	.+1300   	; 0x55e <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 33       	cpi	r26, 0x36	; 54
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e3       	ldi	r26, 0x36	; 54
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 34       	cpi	r26, 0x44	; 68
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8a d3       	rcall	.+1812   	; 0x7d8 <main>
  c4:	71 c6       	rjmp	.+3298   	; 0xda8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <eeprom_write>:


#include "eeprom.h"


void eeprom_write(uint16_t address, uint8_t data) {
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	d8 2f       	mov	r29, r24
  d0:	19 2f       	mov	r17, r25
  d2:	c6 2f       	mov	r28, r22
	i2c_start();
  d4:	4e d1       	rcall	.+668    	; 0x372 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
  d6:	80 ea       	ldi	r24, 0xA0	; 160
  d8:	5c d1       	rcall	.+696    	; 0x392 <i2c_write>
	i2c_write((address >> 8) & 0xFF);
  da:	81 2f       	mov	r24, r17
  dc:	5a d1       	rcall	.+692    	; 0x392 <i2c_write>
	i2c_write(address & 0xFF);
  de:	8d 2f       	mov	r24, r29
	i2c_write(data);
  e0:	58 d1       	rcall	.+688    	; 0x392 <i2c_write>
  e2:	8c 2f       	mov	r24, r28
  e4:	56 d1       	rcall	.+684    	; 0x392 <i2c_write>
	i2c_stop();
  e6:	4d d1       	rcall	.+666    	; 0x382 <i2c_stop>
  e8:	df 91       	pop	r29
}
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	08 95       	ret

000000f0 <eeprom_read>:
  f0:	cf 93       	push	r28

uint8_t eeprom_read(uint16_t address) {
  f2:	df 93       	push	r29
  f4:	c8 2f       	mov	r28, r24
  f6:	d9 2f       	mov	r29, r25
	uint8_t data;
	i2c_start();
  f8:	3c d1       	rcall	.+632    	; 0x372 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 0);
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	4a d1       	rcall	.+660    	; 0x392 <i2c_write>
	i2c_write((address >> 8) & 0xFF);
  fe:	8d 2f       	mov	r24, r29
 100:	48 d1       	rcall	.+656    	; 0x392 <i2c_write>
	i2c_write(address & 0xFF);
 102:	8c 2f       	mov	r24, r28
 104:	46 d1       	rcall	.+652    	; 0x392 <i2c_write>
	i2c_start();
 106:	35 d1       	rcall	.+618    	; 0x372 <i2c_start>
	i2c_write((EEPROM_ADDR << 1) | 1);
 108:	81 ea       	ldi	r24, 0xA1	; 161
 10a:	43 d1       	rcall	.+646    	; 0x392 <i2c_write>
 10c:	4c d1       	rcall	.+664    	; 0x3a6 <i2c_read_nack>
	data = i2c_read_nack();
 10e:	c8 2f       	mov	r28, r24
 110:	38 d1       	rcall	.+624    	; 0x382 <i2c_stop>
 112:	8c 2f       	mov	r24, r28
	i2c_stop();
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
	return data;
 118:	08 95       	ret

0000011a <as0>:
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	85 b3       	in	r24, 0x15	; 21

#include "fan_control.h"

void as0() {                     // Fan Speed 0
	
	PORTC &= ~(1 << PC2);     //Fan On Led
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	85 bb       	out	0x15, r24	; 21
	
	PORTD &= ~(1 << PD4);
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8f 7e       	andi	r24, 0xEF	; 239
 128:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD5);
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD6);     // Led Pins
 130:	82 b3       	in	r24, 0x12	; 18
 132:	8f 7b       	andi	r24, 0xBF	; 191
 134:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD7);
 136:	82 b3       	in	r24, 0x12	; 18
 138:	8f 77       	andi	r24, 0x7F	; 127
 13a:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	85 bb       	out	0x15, r24	; 21

	PORTF &= ~(1 << PF0);     //Relay Pins
 142:	c2 e6       	ldi	r28, 0x62	; 98
 144:	d0 e0       	ldi	r29, 0x00	; 0
 146:	88 81       	ld	r24, Y
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	88 83       	st	Y, r24
	custom_delay_ms(200);
 14c:	88 ec       	ldi	r24, 0xC8	; 200
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	2e d2       	rcall	.+1116   	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF1);
 152:	88 81       	ld	r24, Y
 154:	8d 7f       	andi	r24, 0xFD	; 253
 156:	88 83       	st	Y, r24
	custom_delay_ms(200);
 158:	88 ec       	ldi	r24, 0xC8	; 200
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	28 d2       	rcall	.+1104   	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF2);
 15e:	88 81       	ld	r24, Y
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	88 83       	st	Y, r24
	custom_delay_ms(200);
 164:	88 ec       	ldi	r24, 0xC8	; 200
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	22 d2       	rcall	.+1092   	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 16a:	88 81       	ld	r24, Y
 16c:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 16e:	88 83       	st	Y, r24
 170:	88 ec       	ldi	r24, 0xC8	; 200
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	1c d2       	rcall	.+1080   	; 0x5ae <custom_delay_ms>
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <as1>:

void as1() {         // Fan speed 1
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29

	PORTC |= (1 << PC2);   //Fan On Led
 180:	85 b3       	in	r24, 0x15	; 21
 182:	84 60       	ori	r24, 0x04	; 4
 184:	85 bb       	out	0x15, r24	; 21

	PORTD |= (1 << PD4);
 186:	82 b3       	in	r24, 0x12	; 18
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD5);
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	8f 7d       	andi	r24, 0xDF	; 223
 190:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD6);     // Led Pins
 192:	82 b3       	in	r24, 0x12	; 18
 194:	8f 7b       	andi	r24, 0xBF	; 191
 196:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD7);
 198:	82 b3       	in	r24, 0x12	; 18
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	85 bb       	out	0x15, r24	; 21
	//relay Pins
	PORTF &= ~ (1 << PF0);
 1a4:	c2 e6       	ldi	r28, 0x62	; 98
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	88 81       	ld	r24, Y
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	88 83       	st	Y, r24
	custom_delay_ms(200);
 1ae:	88 ec       	ldi	r24, 0xC8	; 200
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	fd d1       	rcall	.+1018   	; 0x5ae <custom_delay_ms>
	PORTF |= (1 << PF1);   //2.2k
 1b4:	88 81       	ld	r24, Y
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	88 83       	st	Y, r24
	custom_delay_ms(200);
 1ba:	88 ec       	ldi	r24, 0xC8	; 200
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	f7 d1       	rcall	.+1006   	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF2);
 1c0:	88 81       	ld	r24, Y
 1c2:	8b 7f       	andi	r24, 0xFB	; 251
 1c4:	88 83       	st	Y, r24
	custom_delay_ms(200);
 1c6:	88 ec       	ldi	r24, 0xC8	; 200
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	f1 d1       	rcall	.+994    	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 1cc:	88 81       	ld	r24, Y
 1ce:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 1d0:	88 83       	st	Y, r24
 1d2:	88 ec       	ldi	r24, 0xC8	; 200
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	eb d1       	rcall	.+982    	; 0x5ae <custom_delay_ms>
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <as2>:

void as2() {   // fan Speed 2
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29

	PORTC |= (1 << PC2); //Fan on led
 1e2:	85 b3       	in	r24, 0x15	; 21
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= (1 << PD4);
 1e8:	82 b3       	in	r24, 0x12	; 18
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD5);
 1ee:	82 b3       	in	r24, 0x12	; 18
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD6);     // Led Pins
 1f4:	82 b3       	in	r24, 0x12	; 18
 1f6:	8f 7b       	andi	r24, 0xBF	; 191
 1f8:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD7);
 1fa:	82 b3       	in	r24, 0x12	; 18
 1fc:	8f 77       	andi	r24, 0x7F	; 127
 1fe:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
 200:	85 b3       	in	r24, 0x15	; 21
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	85 bb       	out	0x15, r24	; 21

	PORTF |=  (1 << PF0);     //Relay Pins
 206:	c2 e6       	ldi	r28, 0x62	; 98
 208:	d0 e0       	ldi	r29, 0x00	; 0
 20a:	88 81       	ld	r24, Y
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	88 83       	st	Y, r24
	custom_delay_ms(200);
 210:	88 ec       	ldi	r24, 0xC8	; 200
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	cc d1       	rcall	.+920    	; 0x5ae <custom_delay_ms>
	PORTF |= (1 << PF1);
 216:	88 81       	ld	r24, Y
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	88 83       	st	Y, r24
	custom_delay_ms(200);
 21c:	88 ec       	ldi	r24, 0xC8	; 200
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	c6 d1       	rcall	.+908    	; 0x5ae <custom_delay_ms>
	PORTF &= ~ (1 << PF2);     //3.3k
 222:	88 81       	ld	r24, Y
 224:	8b 7f       	andi	r24, 0xFB	; 251
 226:	88 83       	st	Y, r24
	custom_delay_ms(200);
 228:	88 ec       	ldi	r24, 0xC8	; 200
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	c0 d1       	rcall	.+896    	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 22e:	88 81       	ld	r24, Y
 230:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 232:	88 83       	st	Y, r24
 234:	88 ec       	ldi	r24, 0xC8	; 200
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ba d1       	rcall	.+884    	; 0x5ae <custom_delay_ms>
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <as3>:

void as3() {   //Fan speed 3
 240:	cf 93       	push	r28
 242:	df 93       	push	r29

	PORTC |= (1 << PC2); //fan on led
 244:	85 b3       	in	r24, 0x15	; 21
 246:	84 60       	ori	r24, 0x04	; 4
 248:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= (1 << PD4);
 24a:	82 b3       	in	r24, 0x12	; 18
 24c:	80 61       	ori	r24, 0x10	; 16
 24e:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD5);
 250:	82 b3       	in	r24, 0x12	; 18
 252:	80 62       	ori	r24, 0x20	; 32
 254:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD6);     // Led Pins
 256:	82 b3       	in	r24, 0x12	; 18
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << PD7);
 25c:	82 b3       	in	r24, 0x12	; 18
 25e:	8f 77       	andi	r24, 0x7F	; 127
 260:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
 262:	85 b3       	in	r24, 0x15	; 21
 264:	8e 7f       	andi	r24, 0xFE	; 254
 266:	85 bb       	out	0x15, r24	; 21

	PORTF |= (1 << PF0);     //Relay Pins
 268:	c2 e6       	ldi	r28, 0x62	; 98
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	88 81       	ld	r24, Y
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	88 83       	st	Y, r24
	custom_delay_ms(200);
 272:	88 ec       	ldi	r24, 0xC8	; 200
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9b d1       	rcall	.+822    	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF1);
 278:	88 81       	ld	r24, Y
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	88 83       	st	Y, r24
	custom_delay_ms(200);
 27e:	88 ec       	ldi	r24, 0xC8	; 200
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	95 d1       	rcall	.+810    	; 0x5ae <custom_delay_ms>
	PORTF |= (1 << PF2);    //4.3k
 284:	88 81       	ld	r24, Y
 286:	84 60       	ori	r24, 0x04	; 4
 288:	88 83       	st	Y, r24
	custom_delay_ms(200);
 28a:	88 ec       	ldi	r24, 0xC8	; 200
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	8f d1       	rcall	.+798    	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 290:	88 81       	ld	r24, Y
 292:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 294:	88 83       	st	Y, r24
 296:	88 ec       	ldi	r24, 0xC8	; 200
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	89 d1       	rcall	.+786    	; 0x5ae <custom_delay_ms>
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <as4>:

void as4() {     //Fan speed 4
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
	
	PORTC |= (1 << PC2); //fan on led
 2a6:	85 b3       	in	r24, 0x15	; 21
 2a8:	84 60       	ori	r24, 0x04	; 4
 2aa:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= (1 << PD4);
 2ac:	82 b3       	in	r24, 0x12	; 18
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD5);
 2b2:	82 b3       	in	r24, 0x12	; 18
 2b4:	80 62       	ori	r24, 0x20	; 32
 2b6:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD6);     // Led Pins
 2b8:	82 b3       	in	r24, 0x12	; 18
 2ba:	80 64       	ori	r24, 0x40	; 64
 2bc:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD7);
 2be:	82 b3       	in	r24, 0x12	; 18
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1 << PC0);
 2c4:	85 b3       	in	r24, 0x15	; 21
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	85 bb       	out	0x15, r24	; 21

	PORTF &= ~(1 << PF0);     //Relay Pins
 2ca:	c2 e6       	ldi	r28, 0x62	; 98
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	88 81       	ld	r24, Y
 2d0:	8e 7f       	andi	r24, 0xFE	; 254
 2d2:	88 83       	st	Y, r24
	custom_delay_ms(200);
 2d4:	88 ec       	ldi	r24, 0xC8	; 200
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	6a d1       	rcall	.+724    	; 0x5ae <custom_delay_ms>
	PORTF |= (1 << PF1);
 2da:	88 81       	ld	r24, Y
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	88 83       	st	Y, r24
	custom_delay_ms(200);
 2e0:	88 ec       	ldi	r24, 0xC8	; 200
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	64 d1       	rcall	.+712    	; 0x5ae <custom_delay_ms>
	PORTF |= (1 << PF2);      //5.5k
 2e6:	88 81       	ld	r24, Y
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	88 83       	st	Y, r24
	custom_delay_ms(200);
 2ec:	88 ec       	ldi	r24, 0xC8	; 200
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	5e d1       	rcall	.+700    	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF3);
 2f2:	88 81       	ld	r24, Y
 2f4:	87 7f       	andi	r24, 0xF7	; 247
	custom_delay_ms(200);
 2f6:	88 83       	st	Y, r24
 2f8:	88 ec       	ldi	r24, 0xC8	; 200
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	58 d1       	rcall	.+688    	; 0x5ae <custom_delay_ms>
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <as5>:

void as5() {       // fan speed 5
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
	
	PORTC |= (1 << PC2);  // fan on led
 308:	85 b3       	in	r24, 0x15	; 21
 30a:	84 60       	ori	r24, 0x04	; 4
 30c:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= (1 << PD4);
 30e:	82 b3       	in	r24, 0x12	; 18
 310:	80 61       	ori	r24, 0x10	; 16
 312:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD5);
 314:	82 b3       	in	r24, 0x12	; 18
 316:	80 62       	ori	r24, 0x20	; 32
 318:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD6);     // Led Pins
 31a:	82 b3       	in	r24, 0x12	; 18
 31c:	80 64       	ori	r24, 0x40	; 64
 31e:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD7);
 320:	82 b3       	in	r24, 0x12	; 18
 322:	80 68       	ori	r24, 0x80	; 128
 324:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1 << PC0);
 326:	85 b3       	in	r24, 0x15	; 21
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	85 bb       	out	0x15, r24	; 21
	

	PORTF &= ~(1 << PF0);     //Relay Pins
 32c:	c2 e6       	ldi	r28, 0x62	; 98
 32e:	d0 e0       	ldi	r29, 0x00	; 0
 330:	88 81       	ld	r24, Y
 332:	8e 7f       	andi	r24, 0xFE	; 254
 334:	88 83       	st	Y, r24
	custom_delay_ms(200);
 336:	88 ec       	ldi	r24, 0xC8	; 200
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	39 d1       	rcall	.+626    	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF1);
 33c:	88 81       	ld	r24, Y
 33e:	8d 7f       	andi	r24, 0xFD	; 253
 340:	88 83       	st	Y, r24
	custom_delay_ms(200);
 342:	88 ec       	ldi	r24, 0xC8	; 200
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	33 d1       	rcall	.+614    	; 0x5ae <custom_delay_ms>
	PORTF &= ~(1 << PF2);
 348:	88 81       	ld	r24, Y
 34a:	8b 7f       	andi	r24, 0xFB	; 251
 34c:	88 83       	st	Y, r24
	custom_delay_ms(200);
 34e:	88 ec       	ldi	r24, 0xC8	; 200
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	2d d1       	rcall	.+602    	; 0x5ae <custom_delay_ms>
	PORTF |= (1 << PF3);       //direct
 354:	88 81       	ld	r24, Y
 356:	88 60       	ori	r24, 0x08	; 8
	custom_delay_ms(200);
 358:	88 83       	st	Y, r24
 35a:	88 ec       	ldi	r24, 0xC8	; 200
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	27 d1       	rcall	.+590    	; 0x5ae <custom_delay_ms>
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <i2c_init>:

uint8_t i2c_read_ack(void) {
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
	while (!(TWCR & (1<<TWINT)));
	return TWDR;
}
 366:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 36a:	88 e4       	ldi	r24, 0x48	; 72
 36c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 370:	08 95       	ret

00000372 <i2c_start>:
 372:	84 ea       	ldi	r24, 0xA4	; 164
 374:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 378:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 37c:	88 23       	and	r24, r24
 37e:	e4 f7       	brge	.-8      	; 0x378 <i2c_start+0x6>
 380:	08 95       	ret

00000382 <i2c_stop>:
 382:	84 e9       	ldi	r24, 0x94	; 148
 384:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 388:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 38c:	84 fd       	sbrc	r24, 4
 38e:	fc cf       	rjmp	.-8      	; 0x388 <i2c_stop+0x6>
 390:	08 95       	ret

00000392 <i2c_write>:
 392:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 396:	84 e8       	ldi	r24, 0x84	; 132
 398:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 39c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3a0:	88 23       	and	r24, r24
 3a2:	e4 f7       	brge	.-8      	; 0x39c <i2c_write+0xa>
 3a4:	08 95       	ret

000003a6 <i2c_read_nack>:

uint8_t i2c_read_nack(void) {
	TWCR = (1<<TWEN) | (1<<TWINT);
 3a6:	84 e8       	ldi	r24, 0x84	; 132
 3a8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
 3ac:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3b0:	88 23       	and	r24, r24
 3b2:	e4 f7       	brge	.-8      	; 0x3ac <i2c_read_nack+0x6>
	return TWDR;
 3b4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 3b8:	08 95       	ret

000003ba <light1_ON>:


#include "lights.h"

void light1_ON(){
	PORTC |= (1 << PC1);
 3ba:	85 b3       	in	r24, 0x15	; 21
 3bc:	82 60       	ori	r24, 0x02	; 2
 3be:	85 bb       	out	0x15, r24	; 21
	PORTF |= (1 << PF4);
 3c0:	e2 e6       	ldi	r30, 0x62	; 98
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	80 61       	ori	r24, 0x10	; 16
 3c8:	80 83       	st	Z, r24
	laststate.lightState_1 = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <laststate>
 3d0:	08 95       	ret

000003d2 <light1_OFF>:
}

void light1_OFF(){
	PORTC &= ~(1 << PC1);
 3d2:	85 b3       	in	r24, 0x15	; 21
 3d4:	8d 7f       	andi	r24, 0xFD	; 253
 3d6:	85 bb       	out	0x15, r24	; 21
	PORTF &= ~(1 << PF4);
 3d8:	e2 e6       	ldi	r30, 0x62	; 98
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	8f 7e       	andi	r24, 0xEF	; 239
 3e0:	80 83       	st	Z, r24
	laststate.lightState_1 = 0;
 3e2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <laststate>
 3e6:	08 95       	ret

000003e8 <light2_ON>:
}

void light2_ON(){
	PORTC |= (1 << PC3);
 3e8:	85 b3       	in	r24, 0x15	; 21
 3ea:	88 60       	ori	r24, 0x08	; 8
 3ec:	85 bb       	out	0x15, r24	; 21
	PORTF |= (1 << PF5);
 3ee:	e2 e6       	ldi	r30, 0x62	; 98
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	80 62       	ori	r24, 0x20	; 32
 3f6:	80 83       	st	Z, r24
	laststate.lightState_2 = 1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <laststate+0x1>
 3fe:	08 95       	ret

00000400 <light2_OFF>:
}
void light2_OFF(){
	PORTC &= ~(1 << PC3);
 400:	85 b3       	in	r24, 0x15	; 21
 402:	87 7f       	andi	r24, 0xF7	; 247
 404:	85 bb       	out	0x15, r24	; 21
	PORTF &= ~(1 << PF5);
 406:	e2 e6       	ldi	r30, 0x62	; 98
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	8f 7d       	andi	r24, 0xDF	; 223
 40e:	80 83       	st	Z, r24
	laststate.lightState_2 = 0;
 410:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <laststate+0x1>
 414:	08 95       	ret

00000416 <light3_ON>:
}

void light3_ON(){
	PORTC |= (1 << PC4);
 416:	85 b3       	in	r24, 0x15	; 21
 418:	80 61       	ori	r24, 0x10	; 16
 41a:	85 bb       	out	0x15, r24	; 21
	PORTF |= (1 << PF6);
 41c:	e2 e6       	ldi	r30, 0x62	; 98
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	80 64       	ori	r24, 0x40	; 64
 424:	80 83       	st	Z, r24
	laststate.lightState_3 = 1;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <laststate+0x2>
 42c:	08 95       	ret

0000042e <light3_OFF>:
}

void light3_OFF(){
	PORTC &= ~(1 << PC4);
 42e:	85 b3       	in	r24, 0x15	; 21
 430:	8f 7e       	andi	r24, 0xEF	; 239
 432:	85 bb       	out	0x15, r24	; 21
	PORTF &= ~(1 << PF6);
 434:	e2 e6       	ldi	r30, 0x62	; 98
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	8f 7b       	andi	r24, 0xBF	; 191
 43c:	80 83       	st	Z, r24
	laststate.lightState_3 = 0;
 43e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <laststate+0x2>
 442:	08 95       	ret

00000444 <calculateCRC>:
    while (1) 
    {
    }
}

uint8_t calculateCRC(uint8_t *data, size_t length) {
 444:	dc 01       	movw	r26, r24
	uint8_t crc = INIT_CRC;
	for (size_t i = 0; i < length; i++) {
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	50 e0       	ldi	r21, 0x00	; 0
    {
    }
}

uint8_t calculateCRC(uint8_t *data, size_t length) {
	uint8_t crc = INIT_CRC;
 44a:	80 e0       	ldi	r24, 0x00	; 0
	for (size_t i = 0; i < length; i++) {
 44c:	15 c0       	rjmp	.+42     	; 0x478 <calculateCRC+0x34>
		crc ^= data[i];
 44e:	fd 01       	movw	r30, r26
 450:	e4 0f       	add	r30, r20
 452:	f5 1f       	adc	r31, r21
 454:	90 81       	ld	r25, Z
 456:	89 27       	eor	r24, r25
		for (uint8_t j = 0; j < 8; j++) {
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	0a c0       	rjmp	.+20     	; 0x470 <calculateCRC+0x2c>
			if (crc & 0x80) {
 45c:	88 23       	and	r24, r24
 45e:	34 f4       	brge	.+12     	; 0x46c <calculateCRC+0x28>
				crc = (crc << 1) ^ POLYNOMIAL;
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	97 e0       	ldi	r25, 0x07	; 7
 468:	89 27       	eor	r24, r25
 46a:	01 c0       	rjmp	.+2      	; 0x46e <calculateCRC+0x2a>
				} else {
				crc <<= 1;
 46c:	88 0f       	add	r24, r24

uint8_t calculateCRC(uint8_t *data, size_t length) {
	uint8_t crc = INIT_CRC;
	for (size_t i = 0; i < length; i++) {
		crc ^= data[i];
		for (uint8_t j = 0; j < 8; j++) {
 46e:	2f 5f       	subi	r18, 0xFF	; 255
 470:	28 30       	cpi	r18, 0x08	; 8
 472:	a0 f3       	brcs	.-24     	; 0x45c <calculateCRC+0x18>
    }
}

uint8_t calculateCRC(uint8_t *data, size_t length) {
	uint8_t crc = INIT_CRC;
	for (size_t i = 0; i < length; i++) {
 474:	4f 5f       	subi	r20, 0xFF	; 255
 476:	5f 4f       	sbci	r21, 0xFF	; 255
 478:	46 17       	cp	r20, r22
 47a:	57 07       	cpc	r21, r23
 47c:	40 f3       	brcs	.-48     	; 0x44e <calculateCRC+0xa>
				crc <<= 1;
			}
		}
	}
	return crc;
}
 47e:	08 95       	ret

00000480 <timer1_init>:

void timer1_init() {
	TCCR1B |= (1 << WGM12);
 480:	8e b5       	in	r24, 0x2e	; 46
 482:	88 60       	ori	r24, 0x08	; 8
 484:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 3624;
 486:	88 e2       	ldi	r24, 0x28	; 40
 488:	9e e0       	ldi	r25, 0x0E	; 14
 48a:	9b bd       	out	0x2b, r25	; 43
 48c:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);
 48e:	87 b7       	in	r24, 0x37	; 55
 490:	80 61       	ori	r24, 0x10	; 16
 492:	87 bf       	out	0x37, r24	; 55
	TCCR1B |= (1 << CS12) | (1 << CS10);
 494:	8e b5       	in	r24, 0x2e	; 46
 496:	85 60       	ori	r24, 0x05	; 5
 498:	8e bd       	out	0x2e, r24	; 46
 49a:	08 95       	ret

0000049c <__vector_12>:
}

ISR(TIMER1_COMPA_vect) {
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	8f 93       	push	r24
	timer_flag = 1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timer_flag>
}
 4ae:	8f 91       	pop	r24
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__vector_17>:

ISR(SPI_STC_vect) {
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	0b b6       	in	r0, 0x3b	; 59
 4c6:	0f 92       	push	r0
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
	uint8_t receivedSPIData = SPDR;
 4e0:	9f b1       	in	r25, 0x0f	; 15
	static char receivedBytes[2];
	static uint8_t receivedCRC = 0;
	static uint8_t byteIndex = 0;

	if (byteIndex < 2) {
 4e2:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <byteIndex.1996>
 4e6:	82 30       	cpi	r24, 0x02	; 2
 4e8:	48 f4       	brcc	.+18     	; 0x4fc <__vector_17+0x42>
		receivedBytes[byteIndex] = receivedSPIData;
 4ea:	e8 2f       	mov	r30, r24
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	e7 5c       	subi	r30, 0xC7	; 199
 4f0:	fe 4f       	sbci	r31, 0xFE	; 254
 4f2:	90 83       	st	Z, r25
		byteIndex++;
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <byteIndex.1996>
 4fa:	07 c0       	rjmp	.+14     	; 0x50a <__vector_17+0x50>
		} else if (byteIndex == 2) {
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	29 f4       	brne	.+10     	; 0x50a <__vector_17+0x50>
		receivedCRC = receivedSPIData;
 500:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <receivedCRC.1995>
		byteIndex++;
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <byteIndex.1996>
	}

	if (byteIndex == 3) {
 50a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <byteIndex.1996>
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	81 f4       	brne	.+32     	; 0x532 <__vector_17+0x78>
		uint8_t calculatedCRC = calculateCRC((uint8_t *)receivedBytes, 2);
 512:	62 e0       	ldi	r22, 0x02	; 2
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	89 e3       	ldi	r24, 0x39	; 57
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	94 df       	rcall	.-216    	; 0x444 <calculateCRC>
		if (calculatedCRC == receivedCRC) {
 51c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <receivedCRC.1995>
 520:	89 13       	cpse	r24, r25
 522:	05 c0       	rjmp	.+10     	; 0x52e <__vector_17+0x74>
			receivedBytes[2] = '\0';
 524:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <byteIndex.1996>
			SPIprocessCommand(receivedBytes);
 528:	89 e3       	ldi	r24, 0x39	; 57
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	e5 d1       	rcall	.+970    	; 0x8f8 <SPIprocessCommand>
		}
		byteIndex = 0;
 52e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <byteIndex.1996>
	}
	SPSR |= (1 << SPIF);
 532:	8e b1       	in	r24, 0x0e	; 14
 534:	80 68       	ori	r24, 0x80	; 128
 536:	8e b9       	out	0x0e, r24	; 14
}
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0b be       	out	0x3b, r0	; 59
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_18>:

ISR(USART0_RX_vect){
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	0b b6       	in	r0, 0x3b	; 59
 56a:	0f 92       	push	r0
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	unsigned char receivedData = UDR0;
 584:	8c b1       	in	r24, 0x0c	; 12
	UARTprocessCommand(receivedData);
 586:	4c d3       	rcall	.+1688   	; 0xc20 <UARTprocessCommand>
}
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0b be       	out	0x3b, r0	; 59
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <custom_delay_ms>:

void custom_delay_ms(uint16_t ms) {
 5ae:	ac 01       	movw	r20, r24
	static uint16_t counter = 0;
	if (timer_flag) {
 5b0:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <timer_flag>
 5b4:	99 23       	and	r25, r25
 5b6:	99 f0       	breq	.+38     	; 0x5de <custom_delay_ms+0x30>
		timer_flag = 0;
 5b8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timer_flag>
		counter++;
 5bc:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
 5c0:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
 5c4:	2f 5f       	subi	r18, 0xFF	; 255
 5c6:	3f 4f       	sbci	r19, 0xFF	; 255
 5c8:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__data_end+0x1>
 5cc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
		if (counter >= ms) {
 5d0:	24 17       	cp	r18, r20
 5d2:	35 07       	cpc	r19, r21
 5d4:	20 f0       	brcs	.+8      	; 0x5de <custom_delay_ms+0x30>
			counter = 0;
 5d6:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
 5da:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
 5de:	08 95       	ret

000005e0 <SPI_init_slave>:
		}
	}
}

void SPI_init_slave() {
	DDRB |= (1 << DDB4);
 5e0:	87 b3       	in	r24, 0x17	; 23
 5e2:	80 61       	ori	r24, 0x10	; 16
 5e4:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1 << SPE);
 5e6:	8d b1       	in	r24, 0x0d	; 13
 5e8:	80 64       	ori	r24, 0x40	; 64
 5ea:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1 << SPIE);
 5ec:	8d b1       	in	r24, 0x0d	; 13
 5ee:	80 68       	ori	r24, 0x80	; 128
 5f0:	8d b9       	out	0x0d, r24	; 13
 5f2:	08 95       	ret

000005f4 <setup>:
}


void setup(void){
	sei(); // Enable global interrupts
 5f4:	78 94       	sei
	i2c_init();
 5f6:	b7 de       	rcall	.-658    	; 0x366 <i2c_init>
	SPI_init_slave();
 5f8:	f3 df       	rcall	.-26     	; 0x5e0 <SPI_init_slave>
	timer1_init();
 5fa:	42 df       	rcall	.-380    	; 0x480 <timer1_init>
	USART_Init(MYUBRR);
 5fc:	87 e6       	ldi	r24, 0x67	; 103
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	fe d2       	rcall	.+1532   	; 0xbfe <USART_Init>
 602:	81 b3       	in	r24, 0x11	; 17
	DDRD|=(1<<7)|(1<<5)|(1<<6)|(1<<4);
 604:	80 6f       	ori	r24, 0xF0	; 240
 606:	81 bb       	out	0x11, r24	; 17
 608:	e1 e6       	ldi	r30, 0x61	; 97
	DDRF|=(1<<4)|(1<<5)|(1<<6)|(1<<3)|(1<<2)|(1<<1)|(1<<0);
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	8f 67       	ori	r24, 0x7F	; 127
 610:	80 83       	st	Z, r24
 612:	84 b3       	in	r24, 0x14	; 20
	DDRC|=(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0)|(1<<6)|(1<<7);
 614:	8f 6d       	ori	r24, 0xDF	; 223
 616:	84 bb       	out	0x14, r24	; 20
 618:	08 95       	ret

0000061a <readLastStatesFromEEPROM>:
 61a:	ef 92       	push	r14
}

void readLastStatesFromEEPROM(void){
 61c:	ff 92       	push	r15
 61e:	1f 93       	push	r17
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	cd b7       	in	r28, 0x3d	; 61
 626:	de b7       	in	r29, 0x3e	; 62
 628:	28 97       	sbiw	r28, 0x08	; 8
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
	uint16_t addresses[] = {light1_address, light2_address, light3_address, fan1_address};
 634:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <light1_address>
 638:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <light1_address+0x1>
 63c:	9a 83       	std	Y+2, r25	; 0x02
 63e:	89 83       	std	Y+1, r24	; 0x01
 640:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light2_address>
 644:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light2_address+0x1>
 648:	9c 83       	std	Y+4, r25	; 0x04
 64a:	8b 83       	std	Y+3, r24	; 0x03
 64c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light3_address>
 650:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light3_address+0x1>
 654:	9e 83       	std	Y+6, r25	; 0x06
 656:	8d 83       	std	Y+5, r24	; 0x05
 658:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 65c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 660:	98 87       	std	Y+8, r25	; 0x08
 662:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t *state_ptr = (uint8_t *)&laststate;
	for (uint8_t i = 0; i < sizeof(laststate); i++) {
 664:	10 e0       	ldi	r17, 0x00	; 0
 666:	14 c0       	rjmp	.+40     	; 0x690 <readLastStatesFromEEPROM+0x76>
		state_ptr[i] = eeprom_read(addresses[i]);
 668:	81 2f       	mov	r24, r17
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	9c 01       	movw	r18, r24
 66e:	20 5c       	subi	r18, 0xC0	; 192
 670:	3e 4f       	sbci	r19, 0xFE	; 254
 672:	79 01       	movw	r14, r18
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	e1 e0       	ldi	r30, 0x01	; 1
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	ec 0f       	add	r30, r28
 67e:	fd 1f       	adc	r31, r29
 680:	e8 0f       	add	r30, r24
 682:	f9 1f       	adc	r31, r25
 684:	80 81       	ld	r24, Z
 686:	91 81       	ldd	r25, Z+1	; 0x01
 688:	33 dd       	rcall	.-1434   	; 0xf0 <eeprom_read>
 68a:	f7 01       	movw	r30, r14
 68c:	80 83       	st	Z, r24
}

void readLastStatesFromEEPROM(void){
	uint16_t addresses[] = {light1_address, light2_address, light3_address, fan1_address};
	uint8_t *state_ptr = (uint8_t *)&laststate;
	for (uint8_t i = 0; i < sizeof(laststate); i++) {
 68e:	1f 5f       	subi	r17, 0xFF	; 255
 690:	14 30       	cpi	r17, 0x04	; 4
 692:	50 f3       	brcs	.-44     	; 0x668 <readLastStatesFromEEPROM+0x4e>
		state_ptr[i] = eeprom_read(addresses[i]);
	}
}
 694:	28 96       	adiw	r28, 0x08	; 8
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	f8 94       	cli
 69a:	de bf       	out	0x3e, r29	; 62
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	cd bf       	out	0x3d, r28	; 61
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	1f 91       	pop	r17
 6a6:	ff 90       	pop	r15
 6a8:	ef 90       	pop	r14
 6aa:	08 95       	ret

000006ac <retainLightStates>:

void retainLightStates(void){
 6ac:	ef 92       	push	r14
 6ae:	ff 92       	push	r15
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
 6bc:	68 97       	sbiw	r28, 0x18	; 24
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	f8 94       	cli
 6c2:	de bf       	out	0x3e, r29	; 62
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	cd bf       	out	0x3d, r28	; 61
	pin_map_t lightMapping[3][2] = {
 6c8:	82 e1       	ldi	r24, 0x12	; 18
 6ca:	e6 e0       	ldi	r30, 0x06	; 6
 6cc:	f1 e0       	ldi	r31, 0x01	; 1
 6ce:	de 01       	movw	r26, r28
 6d0:	11 96       	adiw	r26, 0x01	; 1
 6d2:	01 90       	ld	r0, Z+
 6d4:	0d 92       	st	X+, r0
 6d6:	8a 95       	dec	r24
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <retainLightStates+0x26>
		{{&PORTC, PC1}, {&PORTF, PF4}},  // light1state
		{{&PORTC, PC3}, {&PORTF, PF5}},  // light2state
		{{&PORTC, PC4}, {&PORTF, PF6}}  // light3state
	};

	volatile uint8_t *lightStates[3] = { &laststate.lightState_1, &laststate.lightState_2, &laststate.lightState_3};
 6da:	86 e0       	ldi	r24, 0x06	; 6
 6dc:	e8 e1       	ldi	r30, 0x18	; 24
 6de:	f1 e0       	ldi	r31, 0x01	; 1
 6e0:	de 01       	movw	r26, r28
 6e2:	53 96       	adiw	r26, 0x13	; 19
 6e4:	01 90       	ld	r0, Z+
 6e6:	0d 92       	st	X+, r0
 6e8:	8a 95       	dec	r24
 6ea:	e1 f7       	brne	.-8      	; 0x6e4 <retainLightStates+0x38>

	for(uint8_t i = 0; i < 3; i++) {
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	46 c0       	rjmp	.+140    	; 0x77c <retainLightStates+0xd0>
		if(*lightStates[i]) {
 6f0:	82 2f       	mov	r24, r18
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	fc 01       	movw	r30, r24
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	41 e0       	ldi	r20, 0x01	; 1
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	4c 0f       	add	r20, r28
 700:	5d 1f       	adc	r21, r29
 702:	e4 0f       	add	r30, r20
 704:	f5 1f       	adc	r31, r21
 706:	02 88       	ldd	r0, Z+18	; 0x12
 708:	f3 89       	ldd	r31, Z+19	; 0x13
 70a:	e0 2d       	mov	r30, r0
 70c:	30 81       	ld	r19, Z
 70e:	33 23       	and	r19, r19
 710:	a1 f1       	breq	.+104    	; 0x77a <retainLightStates+0xce>
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
 712:	7c 01       	movw	r14, r24
 714:	ee 0c       	add	r14, r14
 716:	ff 1c       	adc	r15, r15
 718:	d7 01       	movw	r26, r14
 71a:	a8 0f       	add	r26, r24
 71c:	b9 1f       	adc	r27, r25
 71e:	aa 0f       	add	r26, r26
 720:	bb 1f       	adc	r27, r27
 722:	a4 0f       	add	r26, r20
 724:	b5 1f       	adc	r27, r21
 726:	0d 91       	ld	r16, X+
 728:	1c 91       	ld	r17, X
 72a:	11 97       	sbiw	r26, 0x01	; 1
 72c:	f8 01       	movw	r30, r16
 72e:	30 81       	ld	r19, Z
 730:	41 e0       	ldi	r20, 0x01	; 1
 732:	50 e0       	ldi	r21, 0x00	; 0
 734:	ba 01       	movw	r22, r20
 736:	12 96       	adiw	r26, 0x02	; 2
 738:	0c 90       	ld	r0, X
 73a:	12 97       	sbiw	r26, 0x02	; 2
 73c:	02 c0       	rjmp	.+4      	; 0x742 <retainLightStates+0x96>
 73e:	66 0f       	add	r22, r22
 740:	77 1f       	adc	r23, r23
 742:	0a 94       	dec	r0
 744:	e2 f7       	brpl	.-8      	; 0x73e <retainLightStates+0x92>
 746:	63 27       	eor	r22, r19
 748:	60 83       	st	Z, r22
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
 74a:	13 96       	adiw	r26, 0x03	; 3
 74c:	0d 90       	ld	r0, X+
 74e:	bc 91       	ld	r27, X
 750:	a0 2d       	mov	r26, r0
 752:	3c 91       	ld	r19, X
 754:	f7 01       	movw	r30, r14
 756:	e8 0f       	add	r30, r24
 758:	f9 1f       	adc	r31, r25
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	8c 0f       	add	r24, r28
 764:	9d 1f       	adc	r25, r29
 766:	e8 0f       	add	r30, r24
 768:	f9 1f       	adc	r31, r25
 76a:	05 80       	ldd	r0, Z+5	; 0x05
 76c:	02 c0       	rjmp	.+4      	; 0x772 <retainLightStates+0xc6>
 76e:	44 0f       	add	r20, r20
 770:	55 1f       	adc	r21, r21
 772:	0a 94       	dec	r0
 774:	e2 f7       	brpl	.-8      	; 0x76e <retainLightStates+0xc2>
 776:	43 27       	eor	r20, r19
 778:	4c 93       	st	X, r20
		{{&PORTC, PC4}, {&PORTF, PF6}}  // light3state
	};

	volatile uint8_t *lightStates[3] = { &laststate.lightState_1, &laststate.lightState_2, &laststate.lightState_3};

	for(uint8_t i = 0; i < 3; i++) {
 77a:	2f 5f       	subi	r18, 0xFF	; 255
 77c:	23 30       	cpi	r18, 0x03	; 3
 77e:	08 f4       	brcc	.+2      	; 0x782 <retainLightStates+0xd6>
 780:	b7 cf       	rjmp	.-146    	; 0x6f0 <retainLightStates+0x44>
		if(*lightStates[i]) {
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
		}
	}
}
 782:	68 96       	adiw	r28, 0x18	; 24
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	f8 94       	cli
 788:	de bf       	out	0x3e, r29	; 62
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	cd bf       	out	0x3d, r28	; 61
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	1f 91       	pop	r17
 794:	0f 91       	pop	r16
 796:	ff 90       	pop	r15
 798:	ef 90       	pop	r14
 79a:	08 95       	ret

0000079c <retainFanState>:

void retainFanState(void){
	switch(laststate.lastF1State){
 79c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <laststate+0x3>
 7a0:	82 30       	cpi	r24, 0x02	; 2
 7a2:	81 f0       	breq	.+32     	; 0x7c4 <retainFanState+0x28>
 7a4:	28 f4       	brcc	.+10     	; 0x7b0 <retainFanState+0x14>
 7a6:	88 23       	and	r24, r24
 7a8:	49 f0       	breq	.+18     	; 0x7bc <retainFanState+0x20>
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	49 f0       	breq	.+18     	; 0x7c0 <retainFanState+0x24>
 7ae:	12 c0       	rjmp	.+36     	; 0x7d4 <retainFanState+0x38>
 7b0:	84 30       	cpi	r24, 0x04	; 4
 7b2:	61 f0       	breq	.+24     	; 0x7cc <retainFanState+0x30>
 7b4:	48 f0       	brcs	.+18     	; 0x7c8 <retainFanState+0x2c>
 7b6:	85 30       	cpi	r24, 0x05	; 5
 7b8:	59 f0       	breq	.+22     	; 0x7d0 <retainFanState+0x34>
 7ba:	0c c0       	rjmp	.+24     	; 0x7d4 <retainFanState+0x38>
		case 0: as0(); break;
 7bc:	ae cc       	rjmp	.-1700   	; 0x11a <as0>
 7be:	08 95       	ret
		case 1: as1(); break;
 7c0:	dd cc       	rjmp	.-1606   	; 0x17c <as1>
 7c2:	08 95       	ret
		case 2: as2(); break;
 7c4:	0c cd       	rjmp	.-1512   	; 0x1de <as2>
 7c6:	08 95       	ret
		case 3: as3(); break;
 7c8:	3b cd       	rjmp	.-1418   	; 0x240 <as3>
 7ca:	08 95       	ret
		case 4: as4(); break;
 7cc:	6a cd       	rjmp	.-1324   	; 0x2a2 <as4>
 7ce:	08 95       	ret
		case 5: as5(); break;
 7d0:	99 cd       	rjmp	.-1230   	; 0x304 <as5>
 7d2:	08 95       	ret
 7d4:	a2 cc       	rjmp	.-1724   	; 0x11a <as0>
		default:as0(); break;
 7d6:	08 95       	ret

000007d8 <main>:
 7d8:	0d df       	rcall	.-486    	; 0x5f4 <setup>
 7da:	1f df       	rcall	.-450    	; 0x61a <readLastStatesFromEEPROM>

int main(void)
{
    setup();
    readLastStatesFromEEPROM();
    retainLightStates();
 7dc:	67 df       	rcall	.-306    	; 0x6ac <retainLightStates>
 7de:	de df       	rcall	.-68     	; 0x79c <retainFanState>
    retainFanState();
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <main+0x8>

000007e2 <handle_All_ON>:
 7e2:	eb dd       	rcall	.-1066   	; 0x3ba <light1_ON>
 7e4:	01 de       	rcall	.-1022   	; 0x3e8 <light2_ON>
}

void handle_All_ON() {
	light1_ON();
	light2_ON();
	light3_ON();
 7e6:	17 de       	rcall	.-978    	; 0x416 <light3_ON>
 7e8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <laststate+0x3>
	switch(laststate.lastF1State){
 7ec:	83 30       	cpi	r24, 0x03	; 3
 7ee:	e9 f0       	breq	.+58     	; 0x82a <handle_All_ON+0x48>
 7f0:	28 f4       	brcc	.+10     	; 0x7fc <handle_All_ON+0x1a>
 7f2:	81 30       	cpi	r24, 0x01	; 1
 7f4:	41 f0       	breq	.+16     	; 0x806 <handle_All_ON+0x24>
 7f6:	82 30       	cpi	r24, 0x02	; 2
 7f8:	79 f0       	breq	.+30     	; 0x818 <handle_All_ON+0x36>
 7fa:	32 c0       	rjmp	.+100    	; 0x860 <handle_All_ON+0x7e>
 7fc:	84 30       	cpi	r24, 0x04	; 4
 7fe:	f1 f0       	breq	.+60     	; 0x83c <handle_All_ON+0x5a>
 800:	85 30       	cpi	r24, 0x05	; 5
 802:	29 f1       	breq	.+74     	; 0x84e <handle_All_ON+0x6c>
 804:	2d c0       	rjmp	.+90     	; 0x860 <handle_All_ON+0x7e>
		case 1: as1(); USART_Transmit('A'); laststate.lastF1State = 1; fan1_speed = 1; break;
 806:	ba dc       	rcall	.-1676   	; 0x17c <as1>
 808:	81 e4       	ldi	r24, 0x41	; 65
 80a:	02 d2       	rcall	.+1028   	; 0xc10 <USART_Transmit>
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 812:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
 816:	08 95       	ret
		case 2: as2(); USART_Transmit('C'); laststate.lastF1State = 2; fan1_speed = 2; break;
 818:	e2 dc       	rcall	.-1596   	; 0x1de <as2>
 81a:	83 e4       	ldi	r24, 0x43	; 67
 81c:	f9 d1       	rcall	.+1010   	; 0xc10 <USART_Transmit>
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 824:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
 828:	08 95       	ret
		case 3: as3(); USART_Transmit('D'); laststate.lastF1State = 3; fan1_speed = 3; break;
 82a:	0a dd       	rcall	.-1516   	; 0x240 <as3>
 82c:	84 e4       	ldi	r24, 0x44	; 68
 82e:	f0 d1       	rcall	.+992    	; 0xc10 <USART_Transmit>
 830:	83 e0       	ldi	r24, 0x03	; 3
 832:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 836:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
 83a:	08 95       	ret
		case 4: as4(); USART_Transmit('E'); laststate.lastF1State = 4; fan1_speed = 4; break;
 83c:	32 dd       	rcall	.-1436   	; 0x2a2 <as4>
 83e:	85 e4       	ldi	r24, 0x45	; 69
 840:	e7 d1       	rcall	.+974    	; 0xc10 <USART_Transmit>
 842:	84 e0       	ldi	r24, 0x04	; 4
 844:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 848:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
 84c:	08 95       	ret
		case 5: as5(); USART_Transmit('F'); laststate.lastF1State = 5; fan1_speed = 5; break;
 84e:	5a dd       	rcall	.-1356   	; 0x304 <as5>
 850:	86 e4       	ldi	r24, 0x46	; 70
 852:	de d1       	rcall	.+956    	; 0xc10 <USART_Transmit>
 854:	85 e0       	ldi	r24, 0x05	; 5
 856:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 85a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
 85e:	08 95       	ret
 860:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <fan1_speed>
		default:
		switch(fan1_speed){
 864:	83 30       	cpi	r24, 0x03	; 3
 866:	e9 f0       	breq	.+58     	; 0x8a2 <handle_All_ON+0xc0>
 868:	28 f4       	brcc	.+10     	; 0x874 <handle_All_ON+0x92>
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	41 f0       	breq	.+16     	; 0x87e <handle_All_ON+0x9c>
 86e:	82 30       	cpi	r24, 0x02	; 2
 870:	79 f0       	breq	.+30     	; 0x890 <handle_All_ON+0xae>
 872:	32 c0       	rjmp	.+100    	; 0x8d8 <handle_All_ON+0xf6>
 874:	84 30       	cpi	r24, 0x04	; 4
 876:	f1 f0       	breq	.+60     	; 0x8b4 <handle_All_ON+0xd2>
 878:	85 30       	cpi	r24, 0x05	; 5
 87a:	29 f1       	breq	.+74     	; 0x8c6 <handle_All_ON+0xe4>
			case 1: as1(); USART_Transmit('A'); laststate.lastF1State = 1; fan1_speed = 1; break;
 87c:	2d c0       	rjmp	.+90     	; 0x8d8 <handle_All_ON+0xf6>
 87e:	7e dc       	rcall	.-1796   	; 0x17c <as1>
 880:	81 e4       	ldi	r24, 0x41	; 65
 882:	c6 d1       	rcall	.+908    	; 0xc10 <USART_Transmit>
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 88a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
			case 2: as2(); USART_Transmit('C'); laststate.lastF1State = 2; fan1_speed = 2; break;
 88e:	08 95       	ret
 890:	a6 dc       	rcall	.-1716   	; 0x1de <as2>
 892:	83 e4       	ldi	r24, 0x43	; 67
 894:	bd d1       	rcall	.+890    	; 0xc10 <USART_Transmit>
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 89c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
			case 3: as3(); USART_Transmit('D'); laststate.lastF1State = 3; fan1_speed = 3; break;
 8a0:	08 95       	ret
 8a2:	ce dc       	rcall	.-1636   	; 0x240 <as3>
 8a4:	84 e4       	ldi	r24, 0x44	; 68
 8a6:	b4 d1       	rcall	.+872    	; 0xc10 <USART_Transmit>
 8a8:	83 e0       	ldi	r24, 0x03	; 3
 8aa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 8ae:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
			case 4: as4(); USART_Transmit('E'); laststate.lastF1State = 4; fan1_speed = 4; break;
 8b2:	08 95       	ret
 8b4:	f6 dc       	rcall	.-1556   	; 0x2a2 <as4>
 8b6:	85 e4       	ldi	r24, 0x45	; 69
 8b8:	ab d1       	rcall	.+854    	; 0xc10 <USART_Transmit>
 8ba:	84 e0       	ldi	r24, 0x04	; 4
 8bc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 8c0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
 8c4:	08 95       	ret
			case 5: as5(); USART_Transmit('F'); laststate.lastF1State = 5; fan1_speed = 5; break;
 8c6:	1e dd       	rcall	.-1476   	; 0x304 <as5>
 8c8:	86 e4       	ldi	r24, 0x46	; 70
 8ca:	a2 d1       	rcall	.+836    	; 0xc10 <USART_Transmit>
 8cc:	85 e0       	ldi	r24, 0x05	; 5
 8ce:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 8d2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
 8d6:	08 95       	ret
 8d8:	51 dc       	rcall	.-1886   	; 0x17c <as1>
 8da:	81 e4       	ldi	r24, 0x41	; 65
			default:as1(); USART_Transmit('A'); laststate.lastF1State = 1; fan1_speed = 1; break;
 8dc:	99 d1       	rcall	.+818    	; 0xc10 <USART_Transmit>
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 8e4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
 8e8:	08 95       	ret

000008ea <handle_All_OFF>:
 8ea:	73 dd       	rcall	.-1306   	; 0x3d2 <light1_OFF>
 8ec:	89 dd       	rcall	.-1262   	; 0x400 <light2_OFF>
 8ee:	9f dd       	rcall	.-1218   	; 0x42e <light3_OFF>
 8f0:	14 dc       	rcall	.-2008   	; 0x11a <as0>

void handle_All_OFF() {
	light1_OFF();
	light2_OFF();
	light3_OFF();
	as0();
 8f2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <laststate+0x3>
	laststate.lastF1State = 0;
 8f6:	08 95       	ret

000008f8 <SPIprocessCommand>:
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
 */ 

#include "spiDataProcess.h"
const char* command;

void SPIprocessCommand(const char* command) {
 8fc:	ec 01       	movw	r28, r24
	
	if (strcmp(command, "H1") == 0) {        //Network Reset
 8fe:	6e e1       	ldi	r22, 0x1E	; 30
 900:	71 e0       	ldi	r23, 0x01	; 1
 902:	49 d2       	rcall	.+1170   	; 0xd96 <strcmp>
 904:	89 2b       	or	r24, r25
 906:	19 f4       	brne	.+6      	; 0x90e <SPIprocessCommand+0x16>
		USART_Transmit('G');
 908:	87 e4       	ldi	r24, 0x47	; 71
 90a:	82 d1       	rcall	.+772    	; 0xc10 <USART_Transmit>
 90c:	75 c1       	rjmp	.+746    	; 0xbf8 <SPIprocessCommand+0x300>
	
	/*else if(strcmp(command, "R1") == 0){     // ESP restart
		USART_Transmit('x');
	}*/
	
	else if (strcmp(command, "L1") == 0) {
 90e:	61 e2       	ldi	r22, 0x21	; 33
 910:	71 e0       	ldi	r23, 0x01	; 1
 912:	ce 01       	movw	r24, r28
 914:	40 d2       	rcall	.+1152   	; 0xd96 <strcmp>
 916:	89 2b       	or	r24, r25
 918:	29 f5       	brne	.+74     	; 0x964 <SPIprocessCommand+0x6c>
		PORTC ^= (1 << PC1);               //LIGHT 1
 91a:	95 b3       	in	r25, 0x15	; 21
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	89 27       	eor	r24, r25
 920:	85 bb       	out	0x15, r24	; 21
		PORTF ^= (1 << PF4);
 922:	e2 e6       	ldi	r30, 0x62	; 98
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	90 81       	ld	r25, Z
 928:	80 e1       	ldi	r24, 0x10	; 16
 92a:	89 27       	eor	r24, r25
 92c:	80 83       	st	Z, r24
		uint8_t newLightState_1 = (laststate.lightState_1 == 0) ? 1 : 0;
 92e:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <laststate>
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	91 11       	cpse	r25, r1
 936:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_1 != laststate.lightState_1) {
 938:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <laststate>
 93c:	89 17       	cp	r24, r25
 93e:	09 f4       	brne	.+2      	; 0x942 <SPIprocessCommand+0x4a>
 940:	5b c1       	rjmp	.+694    	; 0xbf8 <SPIprocessCommand+0x300>
			laststate.lightState_1 = newLightState_1;
 942:	c0 e4       	ldi	r28, 0x40	; 64
 944:	d1 e0       	ldi	r29, 0x01	; 1
 946:	88 83       	st	Y, r24
			eeprom_write(light1_address, laststate.lightState_1);                
 948:	68 81       	ld	r22, Y
 94a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <light1_address>
 94e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <light1_address+0x1>
 952:	ba db       	rcall	.-2188   	; 0xc8 <eeprom_write>
			USART_Transmit(laststate.lightState_1 == 1 ? 'P' : 'Q');
 954:	88 81       	ld	r24, Y
 956:	81 30       	cpi	r24, 0x01	; 1
 958:	11 f4       	brne	.+4      	; 0x95e <SPIprocessCommand+0x66>
 95a:	80 e5       	ldi	r24, 0x50	; 80
 95c:	01 c0       	rjmp	.+2      	; 0x960 <SPIprocessCommand+0x68>
 95e:	81 e5       	ldi	r24, 0x51	; 81
 960:	57 d1       	rcall	.+686    	; 0xc10 <USART_Transmit>
		}
	}

	else if (strcmp(command, "L2") == 0) {    //light 2
 962:	4a c1       	rjmp	.+660    	; 0xbf8 <SPIprocessCommand+0x300>
 964:	64 e2       	ldi	r22, 0x24	; 36
 966:	71 e0       	ldi	r23, 0x01	; 1
 968:	ce 01       	movw	r24, r28
 96a:	15 d2       	rcall	.+1066   	; 0xd96 <strcmp>
 96c:	89 2b       	or	r24, r25
 96e:	29 f5       	brne	.+74     	; 0x9ba <SPIprocessCommand+0xc2>
		PORTC ^= (1 << PC3);
 970:	95 b3       	in	r25, 0x15	; 21
 972:	88 e0       	ldi	r24, 0x08	; 8
 974:	89 27       	eor	r24, r25
 976:	85 bb       	out	0x15, r24	; 21
		PORTF ^= (1 << PF5);
 978:	e2 e6       	ldi	r30, 0x62	; 98
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	90 81       	ld	r25, Z
 97e:	80 e2       	ldi	r24, 0x20	; 32
 980:	89 27       	eor	r24, r25
 982:	80 83       	st	Z, r24
		uint8_t newLightState_2 = (laststate.lightState_2 == 0) ? 1 : 0;
 984:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <laststate+0x1>
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	91 11       	cpse	r25, r1
 98c:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_2 != laststate.lightState_2){
 98e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <laststate+0x1>
 992:	89 17       	cp	r24, r25
 994:	09 f4       	brne	.+2      	; 0x998 <SPIprocessCommand+0xa0>
 996:	30 c1       	rjmp	.+608    	; 0xbf8 <SPIprocessCommand+0x300>
			laststate.lightState_2 = newLightState_2;
 998:	c0 e4       	ldi	r28, 0x40	; 64
 99a:	d1 e0       	ldi	r29, 0x01	; 1
			eeprom_write(light2_address, laststate.lightState_2);                
 99c:	89 83       	std	Y+1, r24	; 0x01
 99e:	69 81       	ldd	r22, Y+1	; 0x01
 9a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light2_address>
 9a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light2_address+0x1>
			USART_Transmit(laststate.lightState_2 == 1 ? 'R' : 'S');
 9a8:	8f db       	rcall	.-2274   	; 0xc8 <eeprom_write>
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	81 30       	cpi	r24, 0x01	; 1
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <SPIprocessCommand+0xbc>
 9b0:	82 e5       	ldi	r24, 0x52	; 82
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <SPIprocessCommand+0xbe>
 9b4:	83 e5       	ldi	r24, 0x53	; 83
 9b6:	2c d1       	rcall	.+600    	; 0xc10 <USART_Transmit>
		}
	}
	
	
	else if (strcmp(command, "L3") == 0) {  //light 3
 9b8:	1f c1       	rjmp	.+574    	; 0xbf8 <SPIprocessCommand+0x300>
 9ba:	67 e2       	ldi	r22, 0x27	; 39
 9bc:	71 e0       	ldi	r23, 0x01	; 1
 9be:	ce 01       	movw	r24, r28
 9c0:	ea d1       	rcall	.+980    	; 0xd96 <strcmp>
 9c2:	89 2b       	or	r24, r25
 9c4:	29 f5       	brne	.+74     	; 0xa10 <SPIprocessCommand+0x118>
		PORTC ^= (1 << PC4);
 9c6:	95 b3       	in	r25, 0x15	; 21
 9c8:	80 e1       	ldi	r24, 0x10	; 16
 9ca:	89 27       	eor	r24, r25
 9cc:	85 bb       	out	0x15, r24	; 21
		PORTF ^= (1 << PF6);
 9ce:	e2 e6       	ldi	r30, 0x62	; 98
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	90 81       	ld	r25, Z
 9d4:	80 e4       	ldi	r24, 0x40	; 64
 9d6:	89 27       	eor	r24, r25
 9d8:	80 83       	st	Z, r24
		uint8_t newLightState_3 = (laststate.lightState_3 == 0) ? 1 : 0;
 9da:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <laststate+0x2>
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	91 11       	cpse	r25, r1
 9e2:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_3 != laststate.lightState_3){
 9e4:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <laststate+0x2>
 9e8:	89 17       	cp	r24, r25
 9ea:	09 f4       	brne	.+2      	; 0x9ee <SPIprocessCommand+0xf6>
			laststate.lightState_3 = newLightState_3;
 9ec:	05 c1       	rjmp	.+522    	; 0xbf8 <SPIprocessCommand+0x300>
 9ee:	c0 e4       	ldi	r28, 0x40	; 64
 9f0:	d1 e0       	ldi	r29, 0x01	; 1
			eeprom_write(light3_address, laststate.lightState_3);                  
 9f2:	8a 83       	std	Y+2, r24	; 0x02
 9f4:	6a 81       	ldd	r22, Y+2	; 0x02
 9f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light3_address>
 9fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light3_address+0x1>
			USART_Transmit(laststate.lightState_3 == 1 ? 'T' : 'U');
 9fe:	64 db       	rcall	.-2360   	; 0xc8 <eeprom_write>
 a00:	8a 81       	ldd	r24, Y+2	; 0x02
 a02:	81 30       	cpi	r24, 0x01	; 1
 a04:	11 f4       	brne	.+4      	; 0xa0a <SPIprocessCommand+0x112>
 a06:	84 e5       	ldi	r24, 0x54	; 84
 a08:	01 c0       	rjmp	.+2      	; 0xa0c <SPIprocessCommand+0x114>
 a0a:	85 e5       	ldi	r24, 0x55	; 85
 a0c:	01 d1       	rcall	.+514    	; 0xc10 <USART_Transmit>
		}
	}
	
	else if (strcmp(command, "F0") == 0) {                                  // Fan1 ON state
 a0e:	f4 c0       	rjmp	.+488    	; 0xbf8 <SPIprocessCommand+0x300>
 a10:	6a e2       	ldi	r22, 0x2A	; 42
 a12:	71 e0       	ldi	r23, 0x01	; 1
 a14:	ce 01       	movw	r24, r28
 a16:	bf d1       	rcall	.+894    	; 0xd96 <strcmp>
 a18:	89 2b       	or	r24, r25
 a1a:	09 f0       	breq	.+2      	; 0xa1e <SPIprocessCommand+0x126>
 a1c:	72 c0       	rjmp	.+228    	; 0xb02 <SPIprocessCommand+0x20a>
		switch(laststate.lastF1State){
 a1e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <laststate+0x3>
 a22:	83 30       	cpi	r24, 0x03	; 3
 a24:	c9 f0       	breq	.+50     	; 0xa58 <SPIprocessCommand+0x160>
 a26:	28 f4       	brcc	.+10     	; 0xa32 <SPIprocessCommand+0x13a>
 a28:	81 30       	cpi	r24, 0x01	; 1
 a2a:	41 f0       	breq	.+16     	; 0xa3c <SPIprocessCommand+0x144>
 a2c:	82 30       	cpi	r24, 0x02	; 2
 a2e:	69 f0       	breq	.+26     	; 0xa4a <SPIprocessCommand+0x152>
 a30:	28 c0       	rjmp	.+80     	; 0xa82 <SPIprocessCommand+0x18a>
 a32:	84 30       	cpi	r24, 0x04	; 4
 a34:	c1 f0       	breq	.+48     	; 0xa66 <SPIprocessCommand+0x16e>
			case 1: as1(); USART_Transmit('A'); laststate.lastF1State = 1; break;
 a36:	85 30       	cpi	r24, 0x05	; 5
 a38:	e9 f0       	breq	.+58     	; 0xa74 <SPIprocessCommand+0x17c>
 a3a:	23 c0       	rjmp	.+70     	; 0xa82 <SPIprocessCommand+0x18a>
 a3c:	9f db       	rcall	.-2242   	; 0x17c <as1>
 a3e:	81 e4       	ldi	r24, 0x41	; 65
 a40:	e7 d0       	rcall	.+462    	; 0xc10 <USART_Transmit>
 a42:	81 e0       	ldi	r24, 0x01	; 1
			case 2: as2(); USART_Transmit('C'); laststate.lastF1State = 2; break;
 a44:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 a48:	54 c0       	rjmp	.+168    	; 0xaf2 <SPIprocessCommand+0x1fa>
 a4a:	c9 db       	rcall	.-2158   	; 0x1de <as2>
 a4c:	83 e4       	ldi	r24, 0x43	; 67
 a4e:	e0 d0       	rcall	.+448    	; 0xc10 <USART_Transmit>
 a50:	82 e0       	ldi	r24, 0x02	; 2
			case 3: as3(); USART_Transmit('D'); laststate.lastF1State = 3; break;
 a52:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 a56:	4d c0       	rjmp	.+154    	; 0xaf2 <SPIprocessCommand+0x1fa>
 a58:	f3 db       	rcall	.-2074   	; 0x240 <as3>
 a5a:	84 e4       	ldi	r24, 0x44	; 68
 a5c:	d9 d0       	rcall	.+434    	; 0xc10 <USART_Transmit>
 a5e:	83 e0       	ldi	r24, 0x03	; 3
 a60:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
			case 4: as4(); USART_Transmit('E'); laststate.lastF1State = 4; break;
 a64:	46 c0       	rjmp	.+140    	; 0xaf2 <SPIprocessCommand+0x1fa>
 a66:	1d dc       	rcall	.-1990   	; 0x2a2 <as4>
 a68:	85 e4       	ldi	r24, 0x45	; 69
 a6a:	d2 d0       	rcall	.+420    	; 0xc10 <USART_Transmit>
 a6c:	84 e0       	ldi	r24, 0x04	; 4
 a6e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 a72:	3f c0       	rjmp	.+126    	; 0xaf2 <SPIprocessCommand+0x1fa>
			case 5: as5(); USART_Transmit('F'); laststate.lastF1State = 5; break;
 a74:	47 dc       	rcall	.-1906   	; 0x304 <as5>
 a76:	86 e4       	ldi	r24, 0x46	; 70
 a78:	cb d0       	rcall	.+406    	; 0xc10 <USART_Transmit>
 a7a:	85 e0       	ldi	r24, 0x05	; 5
 a7c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 a80:	38 c0       	rjmp	.+112    	; 0xaf2 <SPIprocessCommand+0x1fa>
			default: 
			switch(fan1_speed){
 a82:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <fan1_speed>
 a86:	83 30       	cpi	r24, 0x03	; 3
 a88:	c9 f0       	breq	.+50     	; 0xabc <SPIprocessCommand+0x1c4>
 a8a:	28 f4       	brcc	.+10     	; 0xa96 <SPIprocessCommand+0x19e>
 a8c:	81 30       	cpi	r24, 0x01	; 1
 a8e:	41 f0       	breq	.+16     	; 0xaa0 <SPIprocessCommand+0x1a8>
 a90:	82 30       	cpi	r24, 0x02	; 2
 a92:	69 f0       	breq	.+26     	; 0xaae <SPIprocessCommand+0x1b6>
 a94:	28 c0       	rjmp	.+80     	; 0xae6 <SPIprocessCommand+0x1ee>
 a96:	84 30       	cpi	r24, 0x04	; 4
				case 1: as1(); USART_Transmit('A'); laststate.lastF1State = 1; break;
 a98:	c1 f0       	breq	.+48     	; 0xaca <SPIprocessCommand+0x1d2>
 a9a:	85 30       	cpi	r24, 0x05	; 5
 a9c:	e9 f0       	breq	.+58     	; 0xad8 <SPIprocessCommand+0x1e0>
 a9e:	23 c0       	rjmp	.+70     	; 0xae6 <SPIprocessCommand+0x1ee>
 aa0:	6d db       	rcall	.-2342   	; 0x17c <as1>
 aa2:	81 e4       	ldi	r24, 0x41	; 65
 aa4:	b5 d0       	rcall	.+362    	; 0xc10 <USART_Transmit>
				case 2: as2(); USART_Transmit('C'); laststate.lastF1State = 2; break;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 aac:	22 c0       	rjmp	.+68     	; 0xaf2 <SPIprocessCommand+0x1fa>
 aae:	97 db       	rcall	.-2258   	; 0x1de <as2>
 ab0:	83 e4       	ldi	r24, 0x43	; 67
 ab2:	ae d0       	rcall	.+348    	; 0xc10 <USART_Transmit>
				case 3: as3(); USART_Transmit('D'); laststate.lastF1State = 3; break;
 ab4:	82 e0       	ldi	r24, 0x02	; 2
 ab6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 aba:	1b c0       	rjmp	.+54     	; 0xaf2 <SPIprocessCommand+0x1fa>
 abc:	c1 db       	rcall	.-2174   	; 0x240 <as3>
 abe:	84 e4       	ldi	r24, 0x44	; 68
 ac0:	a7 d0       	rcall	.+334    	; 0xc10 <USART_Transmit>
 ac2:	83 e0       	ldi	r24, 0x03	; 3
				case 4: as4(); USART_Transmit('E'); laststate.lastF1State = 4; break;
 ac4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 ac8:	14 c0       	rjmp	.+40     	; 0xaf2 <SPIprocessCommand+0x1fa>
 aca:	eb db       	rcall	.-2090   	; 0x2a2 <as4>
 acc:	85 e4       	ldi	r24, 0x45	; 69
 ace:	a0 d0       	rcall	.+320    	; 0xc10 <USART_Transmit>
 ad0:	84 e0       	ldi	r24, 0x04	; 4
				case 5: as5(); USART_Transmit('F'); laststate.lastF1State = 5; break;
 ad2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 ad6:	0d c0       	rjmp	.+26     	; 0xaf2 <SPIprocessCommand+0x1fa>
 ad8:	15 dc       	rcall	.-2006   	; 0x304 <as5>
 ada:	86 e4       	ldi	r24, 0x46	; 70
 adc:	99 d0       	rcall	.+306    	; 0xc10 <USART_Transmit>
 ade:	85 e0       	ldi	r24, 0x05	; 5
 ae0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
				default:as1(); USART_Transmit('A'); laststate.lastF1State = 1; break;
 ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <SPIprocessCommand+0x1fa>
 ae6:	4a db       	rcall	.-2412   	; 0x17c <as1>
 ae8:	81 e4       	ldi	r24, 0x41	; 65
 aea:	92 d0       	rcall	.+292    	; 0xc10 <USART_Transmit>
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
			}
			break;
		}
		eeprom_write(fan1_address, laststate.lastF1State);
 af2:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <laststate+0x3>
 af6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 afa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	}
	
	else if (strcmp(command, "F1") == 0) {                                    // fan1 off state
 afe:	e4 da       	rcall	.-2616   	; 0xc8 <eeprom_write>
 b00:	7b c0       	rjmp	.+246    	; 0xbf8 <SPIprocessCommand+0x300>
 b02:	6d e2       	ldi	r22, 0x2D	; 45
 b04:	71 e0       	ldi	r23, 0x01	; 1
 b06:	ce 01       	movw	r24, r28
		USART_Transmit('B');
 b08:	46 d1       	rcall	.+652    	; 0xd96 <strcmp>
 b0a:	89 2b       	or	r24, r25
		as0();
 b0c:	51 f4       	brne	.+20     	; 0xb22 <SPIprocessCommand+0x22a>
		eeprom_write(fan1_address, 0);
 b0e:	82 e4       	ldi	r24, 0x42	; 66
 b10:	7f d0       	rcall	.+254    	; 0xc10 <USART_Transmit>
 b12:	03 db       	rcall	.-2554   	; 0x11a <as0>
 b14:	60 e0       	ldi	r22, 0x00	; 0
 b16:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 b1a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	}
	
	else if (strcmp(command, "U1") == 0) {                                   //fan increment
 b1e:	d4 da       	rcall	.-2648   	; 0xc8 <eeprom_write>
 b20:	6b c0       	rjmp	.+214    	; 0xbf8 <SPIprocessCommand+0x300>
 b22:	60 e3       	ldi	r22, 0x30	; 48
 b24:	71 e0       	ldi	r23, 0x01	; 1
 b26:	ce 01       	movw	r24, r28
 b28:	36 d1       	rcall	.+620    	; 0xd96 <strcmp>
		if((PORTD & (1 << PD4)) == 0) {
 b2a:	89 2b       	or	r24, r25
			USART_Transmit('A');
 b2c:	09 f0       	breq	.+2      	; 0xb30 <SPIprocessCommand+0x238>
 b2e:	34 c0       	rjmp	.+104    	; 0xb98 <SPIprocessCommand+0x2a0>
 b30:	94 99       	sbic	0x12, 4	; 18
			as1();
 b32:	07 c0       	rjmp	.+14     	; 0xb42 <SPIprocessCommand+0x24a>
 b34:	81 e4       	ldi	r24, 0x41	; 65
			laststate.lastF1State = 1;
 b36:	6c d0       	rcall	.+216    	; 0xc10 <USART_Transmit>
 b38:	21 db       	rcall	.-2494   	; 0x17c <as1>
 b3a:	81 e0       	ldi	r24, 0x01	; 1
		}
		else if ((PORTD & (1 << PD5)) == 0) {
 b3c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
			USART_Transmit('C');
 b40:	23 c0       	rjmp	.+70     	; 0xb88 <SPIprocessCommand+0x290>
 b42:	95 99       	sbic	0x12, 5	; 18
			as2();
 b44:	07 c0       	rjmp	.+14     	; 0xb54 <SPIprocessCommand+0x25c>
 b46:	83 e4       	ldi	r24, 0x43	; 67
			laststate.lastF1State = 2;
 b48:	63 d0       	rcall	.+198    	; 0xc10 <USART_Transmit>
 b4a:	49 db       	rcall	.-2414   	; 0x1de <as2>
 b4c:	82 e0       	ldi	r24, 0x02	; 2
		}
		else if ((PORTD & (1 << PD6)) == 0) {
 b4e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
			USART_Transmit('D');
 b52:	1a c0       	rjmp	.+52     	; 0xb88 <SPIprocessCommand+0x290>
 b54:	96 99       	sbic	0x12, 6	; 18
			as3();
 b56:	07 c0       	rjmp	.+14     	; 0xb66 <SPIprocessCommand+0x26e>
 b58:	84 e4       	ldi	r24, 0x44	; 68
			laststate.lastF1State = 3;
 b5a:	5a d0       	rcall	.+180    	; 0xc10 <USART_Transmit>
 b5c:	71 db       	rcall	.-2334   	; 0x240 <as3>
		}
		else if ((PORTD & (1 << PD7)) == 0) {
 b5e:	83 e0       	ldi	r24, 0x03	; 3
 b60:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
			USART_Transmit('E');
 b64:	11 c0       	rjmp	.+34     	; 0xb88 <SPIprocessCommand+0x290>
 b66:	97 99       	sbic	0x12, 7	; 18
			as4();
 b68:	07 c0       	rjmp	.+14     	; 0xb78 <SPIprocessCommand+0x280>
			laststate.lastF1State = 4;
 b6a:	85 e4       	ldi	r24, 0x45	; 69
 b6c:	51 d0       	rcall	.+162    	; 0xc10 <USART_Transmit>
 b6e:	99 db       	rcall	.-2254   	; 0x2a2 <as4>
		}
		else if ((PORTC & (1 << PC0)) == 0) {
 b70:	84 e0       	ldi	r24, 0x04	; 4
 b72:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
			USART_Transmit('F');
 b76:	08 c0       	rjmp	.+16     	; 0xb88 <SPIprocessCommand+0x290>
			as5();
 b78:	a8 99       	sbic	0x15, 0	; 21
			laststate.lastF1State = 5;
 b7a:	06 c0       	rjmp	.+12     	; 0xb88 <SPIprocessCommand+0x290>
 b7c:	86 e4       	ldi	r24, 0x46	; 70
 b7e:	48 d0       	rcall	.+144    	; 0xc10 <USART_Transmit>
		}
		eeprom_write(fan1_address, laststate.lastF1State);
 b80:	c1 db       	rcall	.-2174   	; 0x304 <as5>
 b82:	85 e0       	ldi	r24, 0x05	; 5
 b84:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 b88:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <laststate+0x3>
 b8c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	
	else if (strcmp(command, "D1") == 0) {                               // fan1 decrement
 b90:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b94:	99 da       	rcall	.-2766   	; 0xc8 <eeprom_write>
 b96:	30 c0       	rjmp	.+96     	; 0xbf8 <SPIprocessCommand+0x300>
 b98:	63 e3       	ldi	r22, 0x33	; 51
 b9a:	71 e0       	ldi	r23, 0x01	; 1
 b9c:	ce 01       	movw	r24, r28
		if ((PORTC & (1 << PC0)) != 0) {
 b9e:	fb d0       	rcall	.+502    	; 0xd96 <strcmp>
 ba0:	89 2b       	or	r24, r25
			USART_Transmit('E');
 ba2:	51 f5       	brne	.+84     	; 0xbf8 <SPIprocessCommand+0x300>
 ba4:	a8 9b       	sbis	0x15, 0	; 21
 ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <SPIprocessCommand+0x2be>
			as4();
 ba8:	85 e4       	ldi	r24, 0x45	; 69
 baa:	32 d0       	rcall	.+100    	; 0xc10 <USART_Transmit>
			laststate.lastF1State = 4;
 bac:	7a db       	rcall	.-2316   	; 0x2a2 <as4>
 bae:	84 e0       	ldi	r24, 0x04	; 4
 bb0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
		}
		else if ((PORTD & (1 << PD7)) != 0) {
 bb4:	1a c0       	rjmp	.+52     	; 0xbea <SPIprocessCommand+0x2f2>
 bb6:	97 9b       	sbis	0x12, 7	; 18
			USART_Transmit('D');
 bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <SPIprocessCommand+0x2d0>
 bba:	84 e4       	ldi	r24, 0x44	; 68
 bbc:	29 d0       	rcall	.+82     	; 0xc10 <USART_Transmit>
			as3();
 bbe:	40 db       	rcall	.-2432   	; 0x240 <as3>
 bc0:	83 e0       	ldi	r24, 0x03	; 3
			laststate.lastF1State = 3;
 bc2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 bc6:	11 c0       	rjmp	.+34     	; 0xbea <SPIprocessCommand+0x2f2>
 bc8:	96 9b       	sbis	0x12, 6	; 18
		}
		else if ((PORTD & (1 << PD6)) != 0) {
 bca:	07 c0       	rjmp	.+14     	; 0xbda <SPIprocessCommand+0x2e2>
 bcc:	83 e4       	ldi	r24, 0x43	; 67
			USART_Transmit('C');
 bce:	20 d0       	rcall	.+64     	; 0xc10 <USART_Transmit>
 bd0:	06 db       	rcall	.-2548   	; 0x1de <as2>
 bd2:	82 e0       	ldi	r24, 0x02	; 2
			as2();
 bd4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
			laststate.lastF1State = 2;
 bd8:	08 c0       	rjmp	.+16     	; 0xbea <SPIprocessCommand+0x2f2>
 bda:	95 9b       	sbis	0x12, 5	; 18
 bdc:	06 c0       	rjmp	.+12     	; 0xbea <SPIprocessCommand+0x2f2>
 bde:	81 e4       	ldi	r24, 0x41	; 65
		}
		else if ((PORTD & (1 << PD5)) != 0) {
 be0:	17 d0       	rcall	.+46     	; 0xc10 <USART_Transmit>
 be2:	cc da       	rcall	.-2664   	; 0x17c <as1>
			USART_Transmit('A');
 be4:	81 e0       	ldi	r24, 0x01	; 1
 be6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
			as1();
 bea:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <laststate+0x3>
			laststate.lastF1State = 1;
 bee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 bf2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		}
		eeprom_write(fan1_address, laststate.lastF1State);
 bf6:	68 da       	rcall	.-2864   	; 0xc8 <eeprom_write>
 bf8:	df 91       	pop	r29
 bfa:	cf 91       	pop	r28
 bfc:	08 95       	ret

00000bfe <USART_Init>:
#include "uart.h"


void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 bfe:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 c02:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 c04:	88 e9       	ldi	r24, 0x98	; 152
 c06:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 c08:	8e e0       	ldi	r24, 0x0E	; 14
 c0a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 c0e:	08 95       	ret

00000c10 <USART_Transmit>:
}

void USART_Transmit(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
 c10:	5d 9b       	sbis	0x0b, 5	; 11
 c12:	fe cf       	rjmp	.-4      	; 0xc10 <USART_Transmit>
	UDR0 = data;
 c14:	8c b9       	out	0x0c, r24	; 12
 c16:	08 95       	ret

00000c18 <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
 c18:	5f 9b       	sbis	0x0b, 7	; 11
 c1a:	fe cf       	rjmp	.-4      	; 0xc18 <USART_Receive>
	return UDR0;
 c1c:	8c b1       	in	r24, 0x0c	; 12
 c1e:	08 95       	ret

00000c20 <UARTprocessCommand>:
 *  Author: kjeyabalan
 */ 

#include "uartDataProcess.h"

void UARTprocessCommand(unsigned char receivedData){
 c20:	cf 93       	push	r28
 c22:	df 93       	push	r29
	if (receivedData == 'L') {
 c24:	8c 34       	cpi	r24, 0x4C	; 76
 c26:	81 f4       	brne	.+32     	; 0xc48 <UARTprocessCommand+0x28>
		receivedData = USART_Receive();
 c28:	f7 df       	rcall	.-18     	; 0xc18 <USART_Receive>
		if (receivedData == '1') {	    // light1 ON
 c2a:	81 33       	cpi	r24, 0x31	; 49
			light1_ON();
 c2c:	11 f4       	brne	.+4      	; 0xc32 <UARTprocessCommand+0x12>
 c2e:	c5 db       	rcall	.-2166   	; 0x3ba <light1_ON>
 c30:	03 c0       	rjmp	.+6      	; 0xc38 <UARTprocessCommand+0x18>
		}
		else if (receivedData == '0') {   //light1 OFF
 c32:	80 33       	cpi	r24, 0x30	; 48
			light1_OFF();
 c34:	09 f4       	brne	.+2      	; 0xc38 <UARTprocessCommand+0x18>
 c36:	cd db       	rcall	.-2150   	; 0x3d2 <light1_OFF>
		}
		eeprom_write(light1_address, laststate.lightState_1);
 c38:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <laststate>
 c3c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <light1_address>
 c40:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <light1_address+0x1>
 c44:	41 da       	rcall	.-2942   	; 0xc8 <eeprom_write>
	}
	
	else if (receivedData == 'M') {
 c46:	a4 c0       	rjmp	.+328    	; 0xd90 <UARTprocessCommand+0x170>
		receivedData = USART_Receive();
 c48:	8d 34       	cpi	r24, 0x4D	; 77
 c4a:	81 f4       	brne	.+32     	; 0xc6c <UARTprocessCommand+0x4c>
		if (receivedData == '1') {        // light2 ON
 c4c:	e5 df       	rcall	.-54     	; 0xc18 <USART_Receive>
			light2_ON();
 c4e:	81 33       	cpi	r24, 0x31	; 49
 c50:	11 f4       	brne	.+4      	; 0xc56 <UARTprocessCommand+0x36>
 c52:	ca db       	rcall	.-2156   	; 0x3e8 <light2_ON>
		}
		else if (receivedData == '0') {       //light2 OFF
 c54:	03 c0       	rjmp	.+6      	; 0xc5c <UARTprocessCommand+0x3c>
 c56:	80 33       	cpi	r24, 0x30	; 48
			light2_OFF();
 c58:	09 f4       	brne	.+2      	; 0xc5c <UARTprocessCommand+0x3c>
		}
		eeprom_write(light2_address, laststate.lightState_2);
 c5a:	d2 db       	rcall	.-2140   	; 0x400 <light2_OFF>
 c5c:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <laststate+0x1>
 c60:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light2_address>
 c64:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light2_address+0x1>
	}
	
	else if (receivedData == 'N') {
 c68:	2f da       	rcall	.-2978   	; 0xc8 <eeprom_write>
		receivedData = USART_Receive();
 c6a:	92 c0       	rjmp	.+292    	; 0xd90 <UARTprocessCommand+0x170>
 c6c:	8e 34       	cpi	r24, 0x4E	; 78
		if (receivedData == '1') {      //light3 ON
 c6e:	81 f4       	brne	.+32     	; 0xc90 <UARTprocessCommand+0x70>
 c70:	d3 df       	rcall	.-90     	; 0xc18 <USART_Receive>
			light3_ON();
 c72:	81 33       	cpi	r24, 0x31	; 49
 c74:	11 f4       	brne	.+4      	; 0xc7a <UARTprocessCommand+0x5a>
		}
		else if (receivedData == '0') {     //light3 OFF
 c76:	cf db       	rcall	.-2146   	; 0x416 <light3_ON>
 c78:	03 c0       	rjmp	.+6      	; 0xc80 <UARTprocessCommand+0x60>
			light3_OFF();
 c7a:	80 33       	cpi	r24, 0x30	; 48
 c7c:	09 f4       	brne	.+2      	; 0xc80 <UARTprocessCommand+0x60>
		}
		eeprom_write(light3_address, laststate.lightState_3);
 c7e:	d7 db       	rcall	.-2130   	; 0x42e <light3_OFF>
 c80:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <laststate+0x2>
 c84:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light3_address>
 c88:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light3_address+0x1>
	}
	else if (receivedData == 'F') {
 c8c:	1d da       	rcall	.-3014   	; 0xc8 <eeprom_write>
 c8e:	80 c0       	rjmp	.+256    	; 0xd90 <UARTprocessCommand+0x170>
		receivedData = USART_Receive();
 c90:	86 34       	cpi	r24, 0x46	; 70
		if (receivedData == '1') {     // fan1 ON
 c92:	09 f0       	breq	.+2      	; 0xc96 <UARTprocessCommand+0x76>
			as1();
 c94:	3e c0       	rjmp	.+124    	; 0xd12 <UARTprocessCommand+0xf2>
 c96:	c0 df       	rcall	.-128    	; 0xc18 <USART_Receive>
			laststate.lastF1State = 1;
 c98:	81 33       	cpi	r24, 0x31	; 49
 c9a:	71 f5       	brne	.+92     	; 0xcf8 <UARTprocessCommand+0xd8>
 c9c:	6f da       	rcall	.-2850   	; 0x17c <as1>
			fan1_speed = 1;
 c9e:	81 e0       	ldi	r24, 0x01	; 1
 ca0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
			receivedData = USART_Receive();
			if (receivedData == 'U') {
 ca4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
				receivedData = USART_Receive();      //fan1 speed increment and decrement
 ca8:	b7 df       	rcall	.-146    	; 0xc18 <USART_Receive>
 caa:	85 35       	cpi	r24, 0x55	; 85
				if (receivedData == '2') {
 cac:	51 f5       	brne	.+84     	; 0xd02 <UARTprocessCommand+0xe2>
 cae:	b4 df       	rcall	.-152    	; 0xc18 <USART_Receive>
					as2();
 cb0:	82 33       	cpi	r24, 0x32	; 50
 cb2:	39 f4       	brne	.+14     	; 0xcc2 <UARTprocessCommand+0xa2>
					laststate.lastF1State = 2;
 cb4:	94 da       	rcall	.-2776   	; 0x1de <as2>
 cb6:	82 e0       	ldi	r24, 0x02	; 2
					fan1_speed = 2;
 cb8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 cbc:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
				}
				else if (receivedData == '3') {
 cc0:	20 c0       	rjmp	.+64     	; 0xd02 <UARTprocessCommand+0xe2>
					as3();
 cc2:	83 33       	cpi	r24, 0x33	; 51
					laststate.lastF1State = 3;
 cc4:	39 f4       	brne	.+14     	; 0xcd4 <UARTprocessCommand+0xb4>
 cc6:	bc da       	rcall	.-2696   	; 0x240 <as3>
 cc8:	83 e0       	ldi	r24, 0x03	; 3
					fan1_speed = 3;
 cca:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 cce:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
				}
				else if (receivedData == '4') {
 cd2:	17 c0       	rjmp	.+46     	; 0xd02 <UARTprocessCommand+0xe2>
					as4();
 cd4:	84 33       	cpi	r24, 0x34	; 52
					laststate.lastF1State = 4;
 cd6:	39 f4       	brne	.+14     	; 0xce6 <UARTprocessCommand+0xc6>
 cd8:	e4 da       	rcall	.-2616   	; 0x2a2 <as4>
 cda:	84 e0       	ldi	r24, 0x04	; 4
					fan1_speed = 4;
 cdc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
 ce0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
				}
				else if (receivedData == '5') {
					as5();
 ce4:	0e c0       	rjmp	.+28     	; 0xd02 <UARTprocessCommand+0xe2>
 ce6:	85 33       	cpi	r24, 0x35	; 53
					laststate.lastF1State = 5;
 ce8:	61 f4       	brne	.+24     	; 0xd02 <UARTprocessCommand+0xe2>
 cea:	0c db       	rcall	.-2536   	; 0x304 <as5>
					fan1_speed = 5;
 cec:	85 e0       	ldi	r24, 0x05	; 5
 cee:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <laststate+0x3>
				}
			}
		}
		else if (receivedData == '0') {     // fan1 OFF
 cf2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <fan1_speed>
			as0();
 cf6:	05 c0       	rjmp	.+10     	; 0xd02 <UARTprocessCommand+0xe2>
			laststate.lastF1State = 0;
 cf8:	80 33       	cpi	r24, 0x30	; 48
 cfa:	19 f4       	brne	.+6      	; 0xd02 <UARTprocessCommand+0xe2>
		}
		eeprom_write(fan1_address, laststate.lastF1State);
 cfc:	0e da       	rcall	.-3044   	; 0x11a <as0>
 cfe:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <laststate+0x3>
 d02:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <laststate+0x3>
 d06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

	else if(receivedData == 'Z'){
 d0a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d0e:	dc d9       	rcall	.-3144   	; 0xc8 <eeprom_write>
		receivedData = USART_Receive();
 d10:	3f c0       	rjmp	.+126    	; 0xd90 <UARTprocessCommand+0x170>
		if(receivedData == '1'){
 d12:	8a 35       	cpi	r24, 0x5A	; 90
 d14:	09 f0       	breq	.+2      	; 0xd18 <UARTprocessCommand+0xf8>
			handle_All_ON();
 d16:	3c c0       	rjmp	.+120    	; 0xd90 <UARTprocessCommand+0x170>
 d18:	7f df       	rcall	.-258    	; 0xc18 <USART_Receive>
			eeprom_write(light1_address, laststate.lightState_1);
 d1a:	81 33       	cpi	r24, 0x31	; 49
 d1c:	e1 f4       	brne	.+56     	; 0xd56 <UARTprocessCommand+0x136>
 d1e:	61 dd       	rcall	.-1342   	; 0x7e2 <handle_All_ON>
 d20:	c0 e4       	ldi	r28, 0x40	; 64
 d22:	d1 e0       	ldi	r29, 0x01	; 1
 d24:	68 81       	ld	r22, Y
 d26:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <light1_address>
			eeprom_write(light2_address, laststate.lightState_2);
 d2a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <light1_address+0x1>
 d2e:	cc d9       	rcall	.-3176   	; 0xc8 <eeprom_write>
 d30:	69 81       	ldd	r22, Y+1	; 0x01
 d32:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light2_address>
			eeprom_write(light3_address, laststate.lightState_3);
 d36:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light2_address+0x1>
 d3a:	c6 d9       	rcall	.-3188   	; 0xc8 <eeprom_write>
 d3c:	6a 81       	ldd	r22, Y+2	; 0x02
 d3e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light3_address>
			eeprom_write(fan1_address, laststate.lastF1State);
 d42:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light3_address+0x1>
 d46:	c0 d9       	rcall	.-3200   	; 0xc8 <eeprom_write>
 d48:	6b 81       	ldd	r22, Y+3	; 0x03
 d4a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			
		}
		else if(receivedData == '0'){
 d4e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			handle_All_OFF();
 d52:	ba d9       	rcall	.-3212   	; 0xc8 <eeprom_write>
			eeprom_write(light1_address, laststate.lightState_1);
 d54:	1d c0       	rjmp	.+58     	; 0xd90 <UARTprocessCommand+0x170>
 d56:	80 33       	cpi	r24, 0x30	; 48
 d58:	d9 f4       	brne	.+54     	; 0xd90 <UARTprocessCommand+0x170>
 d5a:	c7 dd       	rcall	.-1138   	; 0x8ea <handle_All_OFF>
 d5c:	c0 e4       	ldi	r28, 0x40	; 64
 d5e:	d1 e0       	ldi	r29, 0x01	; 1
 d60:	68 81       	ld	r22, Y
 d62:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <light1_address>
			eeprom_write(light2_address, laststate.lightState_2);
 d66:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <light1_address+0x1>
 d6a:	ae d9       	rcall	.-3236   	; 0xc8 <eeprom_write>
 d6c:	69 81       	ldd	r22, Y+1	; 0x01
 d6e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light2_address>
 d72:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <light2_address+0x1>
			eeprom_write(light3_address, laststate.lightState_3);
 d76:	a8 d9       	rcall	.-3248   	; 0xc8 <eeprom_write>
 d78:	6a 81       	ldd	r22, Y+2	; 0x02
 d7a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <light3_address>
 d7e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <light3_address+0x1>
			eeprom_write(fan1_address, laststate.lastF1State);
 d82:	a2 d9       	rcall	.-3260   	; 0xc8 <eeprom_write>
 d84:	6b 81       	ldd	r22, Y+3	; 0x03
 d86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d8a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 d8e:	9c d9       	rcall	.-3272   	; 0xc8 <eeprom_write>
	
	/*else if(receivedData == 'x'){
		wdt_enable(WDTO_15MS);
		while (1);
	}*/
 d90:	df 91       	pop	r29
 d92:	cf 91       	pop	r28
 d94:	08 95       	ret

00000d96 <strcmp>:
 d96:	fb 01       	movw	r30, r22
 d98:	dc 01       	movw	r26, r24
 d9a:	8d 91       	ld	r24, X+
 d9c:	01 90       	ld	r0, Z+
 d9e:	80 19       	sub	r24, r0
 da0:	01 10       	cpse	r0, r1
 da2:	d9 f3       	breq	.-10     	; 0xd9a <strcmp+0x4>
 da4:	99 0b       	sbc	r25, r25
 da6:	08 95       	ret

00000da8 <_exit>:
 da8:	f8 94       	cli

00000daa <__stop_program>:
 daa:	ff cf       	rjmp	.-2      	; 0xdaa <__stop_program>
