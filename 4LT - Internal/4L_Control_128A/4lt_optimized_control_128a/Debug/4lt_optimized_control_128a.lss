
4lt_optimized_control_128a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000007d2  00000866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800138  00800138  0000089e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000910  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001630  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdd  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d98  00000000  00000000  00002c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00003a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000703  00000000  00000000  00003d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a1  00000000  00000000  0000443f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c0       	rjmp	.+502    	; 0x228 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	23 c1       	rjmp	.+582    	; 0x28c <__vector_17>
  46:	00 00       	nop
  48:	73 c1       	rjmp	.+742    	; 0x330 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 33       	cpi	r26, 0x38	; 56
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e3       	ldi	r26, 0x38	; 56
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 34       	cpi	r26, 0x43	; 67
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	56 d2       	rcall	.+1196   	; 0x570 <main>
  c4:	84 c3       	rjmp	.+1800   	; 0x7ce <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <light1_ON>:


#include "lights.h"

void light1_ON(){
	PORTD |= (1 << PD6);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF3);
  ce:	e2 e6       	ldi	r30, 0x62	; 98
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
	lastState.lightState_1 = 1;
  d8:	ef e3       	ldi	r30, 0x3F	; 63
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 83       	st	Z, r24
	eeprom_write_byte((uint8_t*)EEPROM_LIGHT1_STATE_ADDR, lastState.lightState_1);
  e0:	60 81       	ld	r22, Z
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	66 c3       	rjmp	.+1740   	; 0x7b4 <eeprom_write_byte>
  e8:	08 95       	ret

000000ea <light1_OFF>:
}

void light1_OFF(){
	PORTD &= ~(1 << PD6);
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	8f 7b       	andi	r24, 0xBF	; 191
  ee:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF3);
  f0:	e2 e6       	ldi	r30, 0x62	; 98
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	87 7f       	andi	r24, 0xF7	; 247
  f8:	80 83       	st	Z, r24
	lastState.lightState_1 = 0;
  fa:	ef e3       	ldi	r30, 0x3F	; 63
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	10 82       	st	Z, r1
	eeprom_write_byte((uint8_t*)EEPROM_LIGHT1_STATE_ADDR, lastState.lightState_1);
 100:	60 81       	ld	r22, Z
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	56 c3       	rjmp	.+1708   	; 0x7b4 <eeprom_write_byte>
 108:	08 95       	ret

0000010a <light2_ON>:
}

void light2_ON(){
	PORTD |= (1 << PD5);
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF4);
 110:	e2 e6       	ldi	r30, 0x62	; 98
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 61       	ori	r24, 0x10	; 16
 118:	80 83       	st	Z, r24
	lastState.lightState_2 = 1;
 11a:	ef e3       	ldi	r30, 0x3F	; 63
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	81 83       	std	Z+1, r24	; 0x01
	eeprom_write_byte((uint8_t*)EEPROM_LIGHT2_STATE_ADDR, lastState.lightState_2);
 122:	61 81       	ldd	r22, Z+1	; 0x01
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	45 c3       	rjmp	.+1674   	; 0x7b4 <eeprom_write_byte>
 12a:	08 95       	ret

0000012c <light2_OFF>:
}

void light2_OFF(){
	PORTD &= ~(1 << PD5);
 12c:	82 b3       	in	r24, 0x12	; 18
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF4);
 132:	e2 e6       	ldi	r30, 0x62	; 98
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	8f 7e       	andi	r24, 0xEF	; 239
 13a:	80 83       	st	Z, r24
	lastState.lightState_2 = 0;
 13c:	ef e3       	ldi	r30, 0x3F	; 63
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	11 82       	std	Z+1, r1	; 0x01
	eeprom_write_byte((uint8_t*)EEPROM_LIGHT2_STATE_ADDR, lastState.lightState_2);
 142:	61 81       	ldd	r22, Z+1	; 0x01
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	35 c3       	rjmp	.+1642   	; 0x7b4 <eeprom_write_byte>
 14a:	08 95       	ret

0000014c <light3_ON>:
}

void light3_ON(){
	PORTD |= (1 << PD7);
 14c:	82 b3       	in	r24, 0x12	; 18
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF5);
 152:	e2 e6       	ldi	r30, 0x62	; 98
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 62       	ori	r24, 0x20	; 32
 15a:	80 83       	st	Z, r24
	lastState.lightState_3 = 1;
 15c:	ef e3       	ldi	r30, 0x3F	; 63
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	82 83       	std	Z+2, r24	; 0x02
	eeprom_write_byte((uint8_t*)EEPROM_LIGHT3_STATE_ADDR, lastState.lightState_3);
 164:	62 81       	ldd	r22, Z+2	; 0x02
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	24 c3       	rjmp	.+1608   	; 0x7b4 <eeprom_write_byte>
 16c:	08 95       	ret

0000016e <light3_OFF>:
}

void light3_OFF(){
	PORTD &= ~(1 << PD7);
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	8f 77       	andi	r24, 0x7F	; 127
 172:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF5);
 174:	e2 e6       	ldi	r30, 0x62	; 98
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	8f 7d       	andi	r24, 0xDF	; 223
 17c:	80 83       	st	Z, r24
	lastState.lightState_3 = 0;
 17e:	ef e3       	ldi	r30, 0x3F	; 63
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	12 82       	std	Z+2, r1	; 0x02
	eeprom_write_byte((uint8_t*)EEPROM_LIGHT3_STATE_ADDR, lastState.lightState_3);
 184:	62 81       	ldd	r22, Z+2	; 0x02
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	14 c3       	rjmp	.+1576   	; 0x7b4 <eeprom_write_byte>
 18c:	08 95       	ret

0000018e <light4_ON>:
}

void light4_ON(){
	PORTD |= (1 << PD4);
 18e:	82 b3       	in	r24, 0x12	; 18
 190:	80 61       	ori	r24, 0x10	; 16
 192:	82 bb       	out	0x12, r24	; 18
	PORTF |= (1 << PF6);
 194:	e2 e6       	ldi	r30, 0x62	; 98
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	80 83       	st	Z, r24
	lastState.lightState_4 = 1;
 19e:	ef e3       	ldi	r30, 0x3F	; 63
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	83 83       	std	Z+3, r24	; 0x03
	eeprom_write_byte((uint8_t*)EEPROM_LIGHT4_STATE_ADDR, lastState.lightState_4);
 1a6:	63 81       	ldd	r22, Z+3	; 0x03
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	03 c3       	rjmp	.+1542   	; 0x7b4 <eeprom_write_byte>
 1ae:	08 95       	ret

000001b0 <light4_OFF>:
}

void light4_OFF(){
	PORTD &= ~(1 << PD4);
 1b0:	82 b3       	in	r24, 0x12	; 18
 1b2:	8f 7e       	andi	r24, 0xEF	; 239
 1b4:	82 bb       	out	0x12, r24	; 18
	PORTF &= ~(1 << PF6);
 1b6:	e2 e6       	ldi	r30, 0x62	; 98
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 7b       	andi	r24, 0xBF	; 191
 1be:	80 83       	st	Z, r24
	lastState.lightState_4 = 0;
 1c0:	ef e3       	ldi	r30, 0x3F	; 63
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	13 82       	std	Z+3, r1	; 0x03
	eeprom_write_byte((uint8_t*)EEPROM_LIGHT4_STATE_ADDR, lastState.lightState_4);
 1c6:	63 81       	ldd	r22, Z+3	; 0x03
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	f3 c2       	rjmp	.+1510   	; 0x7b4 <eeprom_write_byte>
 1ce:	08 95       	ret

000001d0 <calculateCRC>:
	while (1) {
	}
	return 0;
}

uint8_t calculateCRC(uint8_t *data, size_t length) {
 1d0:	dc 01       	movw	r26, r24
	uint8_t crc = INIT_CRC;
	for (size_t i = 0; i < length; i++) {
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
	}
	return 0;
}

uint8_t calculateCRC(uint8_t *data, size_t length) {
	uint8_t crc = INIT_CRC;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
	for (size_t i = 0; i < length; i++) {
 1d8:	15 c0       	rjmp	.+42     	; 0x204 <calculateCRC+0x34>
		crc ^= data[i];
 1da:	fd 01       	movw	r30, r26
 1dc:	e4 0f       	add	r30, r20
 1de:	f5 1f       	adc	r31, r21
 1e0:	90 81       	ld	r25, Z
 1e2:	89 27       	eor	r24, r25
		for (uint8_t j = 0; j < 8; j++) {
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	0a c0       	rjmp	.+20     	; 0x1fc <calculateCRC+0x2c>
			if (crc & 0x80) {
 1e8:	88 23       	and	r24, r24
 1ea:	34 f4       	brge	.+12     	; 0x1f8 <calculateCRC+0x28>
				crc = (crc << 1) ^ POLYNOMIAL;
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	97 e0       	ldi	r25, 0x07	; 7
 1f4:	89 27       	eor	r24, r25
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <calculateCRC+0x2a>
				} else {
				crc <<= 1;
 1f8:	88 0f       	add	r24, r24

uint8_t calculateCRC(uint8_t *data, size_t length) {
	uint8_t crc = INIT_CRC;
	for (size_t i = 0; i < length; i++) {
		crc ^= data[i];
		for (uint8_t j = 0; j < 8; j++) {
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	28 30       	cpi	r18, 0x08	; 8
 1fe:	a0 f3       	brcs	.-24     	; 0x1e8 <calculateCRC+0x18>
	return 0;
}

uint8_t calculateCRC(uint8_t *data, size_t length) {
	uint8_t crc = INIT_CRC;
	for (size_t i = 0; i < length; i++) {
 200:	4f 5f       	subi	r20, 0xFF	; 255
 202:	5f 4f       	sbci	r21, 0xFF	; 255
 204:	46 17       	cp	r20, r22
 206:	57 07       	cpc	r21, r23
 208:	40 f3       	brcs	.-48     	; 0x1da <calculateCRC+0xa>
				crc <<= 1;
			}
		}
	}
	return crc;
}
 20a:	08 95       	ret

0000020c <timer1_init>:

void timer1_init() {
	TCCR1B |= (1 << WGM12);
 20c:	8e b5       	in	r24, 0x2e	; 46
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 3624;
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	9e e0       	ldi	r25, 0x0E	; 14
 216:	9b bd       	out	0x2b, r25	; 43
 218:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);
 21a:	87 b7       	in	r24, 0x37	; 55
 21c:	80 61       	ori	r24, 0x10	; 16
 21e:	87 bf       	out	0x37, r24	; 55
	TCCR1B |= (1 << CS12) | (1 << CS10);
 220:	8e b5       	in	r24, 0x2e	; 46
 222:	85 60       	ori	r24, 0x05	; 5
 224:	8e bd       	out	0x2e, r24	; 46
 226:	08 95       	ret

00000228 <__vector_12>:
}

ISR(TIMER1_COMPA_vect) {
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
	timer_flag = 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <timer_flag>
}
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <custom_delay_ms>:

void custom_delay_ms(uint16_t ms) {
 246:	ac 01       	movw	r20, r24
	static uint16_t counter = 0;
	if (timer_flag) {
 248:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <timer_flag>
 24c:	99 23       	and	r25, r25
 24e:	99 f0       	breq	.+38     	; 0x276 <custom_delay_ms+0x30>
		timer_flag = 0;
 250:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <timer_flag>
		counter++;
 254:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <counter.1979>
 258:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <counter.1979+0x1>
 25c:	2f 5f       	subi	r18, 0xFF	; 255
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
 260:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <counter.1979+0x1>
 264:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <counter.1979>
		if (counter >= ms) {
 268:	24 17       	cp	r18, r20
 26a:	35 07       	cpc	r19, r21
 26c:	20 f0       	brcs	.+8      	; 0x276 <custom_delay_ms+0x30>
			counter = 0;                       // Reset the counter
 26e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <counter.1979+0x1>
 272:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <counter.1979>
 276:	08 95       	ret

00000278 <SPI_init_slave>:
		}
	}
}

void SPI_init_slave() {
	DDRB |= (1 << DDB4);
 278:	87 b3       	in	r24, 0x17	; 23
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1 << SPE);
 27e:	8d b1       	in	r24, 0x0d	; 13
 280:	80 64       	ori	r24, 0x40	; 64
 282:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1 << SPIE);                       // Enable SPI interrupt
 284:	8d b1       	in	r24, 0x0d	; 13
 286:	80 68       	ori	r24, 0x80	; 128
 288:	8d b9       	out	0x0d, r24	; 13
 28a:	08 95       	ret

0000028c <__vector_17>:
}

ISR(SPI_STC_vect) {
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	0b b6       	in	r0, 0x3b	; 59
 298:	0f 92       	push	r0
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
	uint8_t receivedSPIData = SPDR;
 2b2:	9f b1       	in	r25, 0x0f	; 15
	static char receivedBytes[2];
	static uint8_t receivedCRC = 0;
	static uint8_t byteIndex = 0;

	if (byteIndex < 2) {
 2b4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <byteIndex.1990>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	48 f4       	brcc	.+18     	; 0x2ce <__vector_17+0x42>
		receivedBytes[byteIndex] = receivedSPIData;
 2bc:	e8 2f       	mov	r30, r24
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	e7 5c       	subi	r30, 0xC7	; 199
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	90 83       	st	Z, r25
		byteIndex++;
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <byteIndex.1990>
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <__vector_17+0x50>
		} else if (byteIndex == 2) {
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	29 f4       	brne	.+10     	; 0x2dc <__vector_17+0x50>
		receivedCRC = receivedSPIData;
 2d2:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <__data_end>
		byteIndex++;
 2d6:	8f 5f       	subi	r24, 0xFF	; 255
 2d8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <byteIndex.1990>
	}

	if (byteIndex == 3) {
 2dc:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <byteIndex.1990>
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	81 f4       	brne	.+32     	; 0x304 <__vector_17+0x78>
		uint8_t calculatedCRC = calculateCRC((uint8_t *)receivedBytes, 2);
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	89 e3       	ldi	r24, 0x39	; 57
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	71 df       	rcall	.-286    	; 0x1d0 <calculateCRC>
		if (calculatedCRC == receivedCRC) {
 2ee:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <__data_end>
 2f2:	89 13       	cpse	r24, r25
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <__vector_17+0x74>
			receivedBytes[2] = '\0';
 2f6:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <byteIndex.1990>
			SPIprocessCommand(receivedBytes);
 2fa:	89 e3       	ldi	r24, 0x39	; 57
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	47 d1       	rcall	.+654    	; 0x58e <SPIprocessCommand>
		}
		byteIndex = 0;
 300:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <byteIndex.1990>
	}
	SPSR |= (1 << SPIF);
 304:	8e b1       	in	r24, 0x0e	; 14
 306:	80 68       	ori	r24, 0x80	; 128
 308:	8e b9       	out	0x0e, r24	; 14
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0b be       	out	0x3b, r0	; 59
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_18>:

ISR(USART0_RX_vect){
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	0b b6       	in	r0, 0x3b	; 59
 33c:	0f 92       	push	r0
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
	unsigned char receivedData = UDR0;
 356:	8c b1       	in	r24, 0x0c	; 12
	UARTprocessCommand(receivedData);
 358:	dc d1       	rcall	.+952    	; 0x712 <UARTprocessCommand>
}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0b be       	out	0x3b, r0	; 59
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <setup>:

void setup(void){
	SPI_init_slave();
 380:	7b df       	rcall	.-266    	; 0x278 <SPI_init_slave>
	timer1_init();
 382:	44 df       	rcall	.-376    	; 0x20c <timer1_init>
 384:	87 e6       	ldi	r24, 0x67	; 103
	USART_Init(MYUBRR);
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	b0 d1       	rcall	.+864    	; 0x6ea <USART_Init>
 38a:	81 b3       	in	r24, 0x11	; 17

	DDRD|=(1<<7)|(1<<5)|(1<<6)|(1<<4);
 38c:	80 6f       	ori	r24, 0xF0	; 240
 38e:	81 bb       	out	0x11, r24	; 17
 390:	e1 e6       	ldi	r30, 0x61	; 97
	DDRF|=(1<<4)|(1<<5)|(1<<6)|(1<<3)|(1<<2)|(1<<1)|(1<<0);
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	8f 67       	ori	r24, 0x7F	; 127
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <readStatesFromEEPROM>:
 39c:	ef 92       	push	r14
}

void readStatesFromEEPROM(void){
 39e:	ff 92       	push	r15
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	28 97       	sbiw	r28, 0x08	; 8
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
	uint16_t addresses[] = {EEPROM_LIGHT1_STATE_ADDR, EEPROM_LIGHT2_STATE_ADDR, EEPROM_LIGHT3_STATE_ADDR, EEPROM_LIGHT4_STATE_ADDR};
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	e0 e0       	ldi	r30, 0x00	; 0
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	de 01       	movw	r26, r28
 3be:	11 96       	adiw	r26, 0x01	; 1
 3c0:	01 90       	ld	r0, Z+
 3c2:	0d 92       	st	X+, r0
 3c4:	8a 95       	dec	r24
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <readStatesFromEEPROM+0x24>
	uint8_t *state_ptr = (uint8_t *)&lastState;
	for (uint8_t i = 0; i < sizeof(lastState); i++) {
 3c8:	10 e0       	ldi	r17, 0x00	; 0
 3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <readStatesFromEEPROM+0x58>
		state_ptr[i] = eeprom_read_byte((uint8_t*) addresses[i]);
 3cc:	81 2f       	mov	r24, r17
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	9c 01       	movw	r18, r24
 3d2:	21 5c       	subi	r18, 0xC1	; 193
 3d4:	3e 4f       	sbci	r19, 0xFE	; 254
 3d6:	79 01       	movw	r14, r18
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	e1 e0       	ldi	r30, 0x01	; 1
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	ec 0f       	add	r30, r28
 3e2:	fd 1f       	adc	r31, r29
 3e4:	e8 0f       	add	r30, r24
 3e6:	f9 1f       	adc	r31, r25
 3e8:	80 81       	ld	r24, Z
 3ea:	91 81       	ldd	r25, Z+1	; 0x01
 3ec:	db d1       	rcall	.+950    	; 0x7a4 <eeprom_read_byte>
 3ee:	f7 01       	movw	r30, r14
 3f0:	80 83       	st	Z, r24
}

void readStatesFromEEPROM(void){
	uint16_t addresses[] = {EEPROM_LIGHT1_STATE_ADDR, EEPROM_LIGHT2_STATE_ADDR, EEPROM_LIGHT3_STATE_ADDR, EEPROM_LIGHT4_STATE_ADDR};
	uint8_t *state_ptr = (uint8_t *)&lastState;
	for (uint8_t i = 0; i < sizeof(lastState); i++) {
 3f2:	1f 5f       	subi	r17, 0xFF	; 255
 3f4:	14 30       	cpi	r17, 0x04	; 4
 3f6:	50 f3       	brcs	.-44     	; 0x3cc <readStatesFromEEPROM+0x30>
		state_ptr[i] = eeprom_read_byte((uint8_t*) addresses[i]);
	}
}
 3f8:	28 96       	adiw	r28, 0x08	; 8
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	08 95       	ret

00000410 <retainLightStates>:

void retainLightStates(void){
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	a0 97       	sbiw	r28, 0x20	; 32
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	de bf       	out	0x3e, r29	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	cd bf       	out	0x3d, r28	; 61
	pin_map_t lightMapping[4][2] = {
 42c:	88 e1       	ldi	r24, 0x18	; 24
 42e:	e8 e0       	ldi	r30, 0x08	; 8
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	de 01       	movw	r26, r28
 434:	11 96       	adiw	r26, 0x01	; 1
 436:	01 90       	ld	r0, Z+
 438:	0d 92       	st	X+, r0
 43a:	8a 95       	dec	r24
 43c:	e1 f7       	brne	.-8      	; 0x436 <retainLightStates+0x26>
		{{&PORTD, PD5}, {&PORTF, PF4}},  // light2state
		{{&PORTD, PD7}, {&PORTF, PF5}},  // light3state
		{{&PORTD, PD4}, {&PORTF, PF6}}   // light4state
	};

	uint8_t *lightStates[4] = {&lastState.lightState_1, &lastState.lightState_2, &lastState.lightState_3, &lastState.lightState_4};
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	e0 e2       	ldi	r30, 0x20	; 32
 442:	f1 e0       	ldi	r31, 0x01	; 1
 444:	de 01       	movw	r26, r28
 446:	59 96       	adiw	r26, 0x19	; 25
 448:	01 90       	ld	r0, Z+
 44a:	0d 92       	st	X+, r0
 44c:	8a 95       	dec	r24
 44e:	e1 f7       	brne	.-8      	; 0x448 <retainLightStates+0x38>

	for(uint8_t i = 0; i < 4; i++) {
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	46 c0       	rjmp	.+140    	; 0x4e0 <retainLightStates+0xd0>
		if(*lightStates[i]) {
 454:	82 2f       	mov	r24, r18
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	fc 01       	movw	r30, r24
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	4c 0f       	add	r20, r28
 464:	5d 1f       	adc	r21, r29
 466:	e4 0f       	add	r30, r20
 468:	f5 1f       	adc	r31, r21
 46a:	00 8c       	ldd	r0, Z+24	; 0x18
 46c:	f1 8d       	ldd	r31, Z+25	; 0x19
 46e:	e0 2d       	mov	r30, r0
 470:	30 81       	ld	r19, Z
 472:	33 23       	and	r19, r19
 474:	a1 f1       	breq	.+104    	; 0x4de <retainLightStates+0xce>
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
 476:	7c 01       	movw	r14, r24
 478:	ee 0c       	add	r14, r14
 47a:	ff 1c       	adc	r15, r15
 47c:	d7 01       	movw	r26, r14
 47e:	a8 0f       	add	r26, r24
 480:	b9 1f       	adc	r27, r25
 482:	aa 0f       	add	r26, r26
 484:	bb 1f       	adc	r27, r27
 486:	a4 0f       	add	r26, r20
 488:	b5 1f       	adc	r27, r21
 48a:	0d 91       	ld	r16, X+
 48c:	1c 91       	ld	r17, X
 48e:	11 97       	sbiw	r26, 0x01	; 1
 490:	f8 01       	movw	r30, r16
 492:	30 81       	ld	r19, Z
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	ba 01       	movw	r22, r20
 49a:	12 96       	adiw	r26, 0x02	; 2
 49c:	0c 90       	ld	r0, X
 49e:	12 97       	sbiw	r26, 0x02	; 2
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <retainLightStates+0x96>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <retainLightStates+0x92>
 4aa:	63 27       	eor	r22, r19
 4ac:	60 83       	st	Z, r22
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
 4ae:	13 96       	adiw	r26, 0x03	; 3
 4b0:	0d 90       	ld	r0, X+
 4b2:	bc 91       	ld	r27, X
 4b4:	a0 2d       	mov	r26, r0
 4b6:	3c 91       	ld	r19, X
 4b8:	f7 01       	movw	r30, r14
 4ba:	e8 0f       	add	r30, r24
 4bc:	f9 1f       	adc	r31, r25
 4be:	ee 0f       	add	r30, r30
 4c0:	ff 1f       	adc	r31, r31
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	8c 0f       	add	r24, r28
 4c8:	9d 1f       	adc	r25, r29
 4ca:	e8 0f       	add	r30, r24
 4cc:	f9 1f       	adc	r31, r25
 4ce:	05 80       	ldd	r0, Z+5	; 0x05
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <retainLightStates+0xc6>
 4d2:	44 0f       	add	r20, r20
 4d4:	55 1f       	adc	r21, r21
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <retainLightStates+0xc2>
 4da:	43 27       	eor	r20, r19
 4dc:	4c 93       	st	X, r20
		{{&PORTD, PD4}, {&PORTF, PF6}}   // light4state
	};

	uint8_t *lightStates[4] = {&lastState.lightState_1, &lastState.lightState_2, &lastState.lightState_3, &lastState.lightState_4};

	for(uint8_t i = 0; i < 4; i++) {
 4de:	2f 5f       	subi	r18, 0xFF	; 255
 4e0:	24 30       	cpi	r18, 0x04	; 4
 4e2:	08 f4       	brcc	.+2      	; 0x4e6 <retainLightStates+0xd6>
 4e4:	b7 cf       	rjmp	.-146    	; 0x454 <retainLightStates+0x44>
		if(*lightStates[i]) {
			*lightMapping[i][0].port ^= (1 << lightMapping[i][0].pin);
			*lightMapping[i][1].port ^= (1 << lightMapping[i][1].pin);
		}
	}
}
 4e6:	a0 96       	adiw	r28, 0x20	; 32
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	08 95       	ret

00000500 <clearEEPROM>:

void clearEEPROM(void){
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	28 97       	sbiw	r28, 0x08	; 8
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
	uint16_t addresses[] = {EEPROM_LIGHT1_STATE_ADDR, EEPROM_LIGHT2_STATE_ADDR, EEPROM_LIGHT3_STATE_ADDR, EEPROM_LIGHT4_STATE_ADDR};
 516:	88 e0       	ldi	r24, 0x08	; 8
 518:	e0 e0       	ldi	r30, 0x00	; 0
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	de 01       	movw	r26, r28
 51e:	11 96       	adiw	r26, 0x01	; 1
 520:	01 90       	ld	r0, Z+
 522:	0d 92       	st	X+, r0
 524:	8a 95       	dec	r24
 526:	e1 f7       	brne	.-8      	; 0x520 <clearEEPROM+0x20>
	uint8_t *state_ptr = (uint8_t *)&lastState;
	for (uint8_t i = 0; i < sizeof(lastState); i++) {
 528:	10 e0       	ldi	r17, 0x00	; 0
 52a:	16 c0       	rjmp	.+44     	; 0x558 <clearEEPROM+0x58>
		if (state_ptr[i] == 0xFF) {
 52c:	e1 2f       	mov	r30, r17
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	e1 5c       	subi	r30, 0xC1	; 193
 532:	fe 4f       	sbci	r31, 0xFE	; 254
 534:	80 81       	ld	r24, Z
 536:	8f 3f       	cpi	r24, 0xFF	; 255
 538:	71 f4       	brne	.+28     	; 0x556 <clearEEPROM+0x56>
			eeprom_write_byte((uint8_t*) addresses[i], 0x00);
 53a:	e1 2f       	mov	r30, r17
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	8c 0f       	add	r24, r28
 548:	9d 1f       	adc	r25, r29
 54a:	e8 0f       	add	r30, r24
 54c:	f9 1f       	adc	r31, r25
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	91 81       	ldd	r25, Z+1	; 0x01
 554:	2f d1       	rcall	.+606    	; 0x7b4 <eeprom_write_byte>
}

void clearEEPROM(void){
	uint16_t addresses[] = {EEPROM_LIGHT1_STATE_ADDR, EEPROM_LIGHT2_STATE_ADDR, EEPROM_LIGHT3_STATE_ADDR, EEPROM_LIGHT4_STATE_ADDR};
	uint8_t *state_ptr = (uint8_t *)&lastState;
	for (uint8_t i = 0; i < sizeof(lastState); i++) {
 556:	1f 5f       	subi	r17, 0xFF	; 255
 558:	14 30       	cpi	r17, 0x04	; 4
 55a:	40 f3       	brcs	.-48     	; 0x52c <clearEEPROM+0x2c>
		if (state_ptr[i] == 0xFF) {
			eeprom_write_byte((uint8_t*) addresses[i], 0x00);
		}
	}
}
 55c:	28 96       	adiw	r28, 0x08	; 8
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	08 95       	ret

00000570 <main>:
volatile states lastState = {0};
volatile uint8_t timer_flag = 0;


int main(void) {
	setup();
 570:	07 df       	rcall	.-498    	; 0x380 <setup>
	custom_delay_ms(100);
 572:	84 e6       	ldi	r24, 0x64	; 100
 574:	90 e0       	ldi	r25, 0x00	; 0
	readStatesFromEEPROM();
 576:	67 de       	rcall	.-818    	; 0x246 <custom_delay_ms>
	custom_delay_ms(100);
 578:	11 df       	rcall	.-478    	; 0x39c <readStatesFromEEPROM>
 57a:	84 e6       	ldi	r24, 0x64	; 100
 57c:	90 e0       	ldi	r25, 0x00	; 0
	retainLightStates();
 57e:	63 de       	rcall	.-826    	; 0x246 <custom_delay_ms>
	custom_delay_ms(100);
 580:	47 df       	rcall	.-370    	; 0x410 <retainLightStates>
 582:	84 e6       	ldi	r24, 0x64	; 100
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	5f de       	rcall	.-834    	; 0x246 <custom_delay_ms>
	clearEEPROM();
 588:	bb df       	rcall	.-138    	; 0x500 <clearEEPROM>
 58a:	78 94       	sei
	sei();                             // Enable global interrupts
 58c:	ff cf       	rjmp	.-2      	; 0x58c <main+0x1c>

0000058e <SPIprocessCommand>:
 58e:	cf 93       	push	r28
 *  Author: kjeya
 */ 

#include "spiDataProcess.h"

void SPIprocessCommand(const char* command) {                                         //SPI Received Data
 590:	df 93       	push	r29
 592:	ec 01       	movw	r28, r24
	if (strcmp(command, "L1") == 0) {
 594:	68 e2       	ldi	r22, 0x28	; 40
 596:	71 e0       	ldi	r23, 0x01	; 1
 598:	fc d0       	rcall	.+504    	; 0x792 <strcmp>
 59a:	89 2b       	or	r24, r25
 59c:	19 f5       	brne	.+70     	; 0x5e4 <SPIprocessCommand+0x56>
		PORTD ^= (1 << PD6);
 59e:	92 b3       	in	r25, 0x12	; 18
 5a0:	80 e4       	ldi	r24, 0x40	; 64
 5a2:	89 27       	eor	r24, r25
 5a4:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF3);
 5a6:	e2 e6       	ldi	r30, 0x62	; 98
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	90 81       	ld	r25, Z
 5ac:	88 e0       	ldi	r24, 0x08	; 8
 5ae:	89 27       	eor	r24, r25
 5b0:	80 83       	st	Z, r24
		uint8_t newLightState_1 = (lastState.lightState_1 == 0) ? 1 : 0;
 5b2:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <lastState>
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	91 11       	cpse	r25, r1
 5ba:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_1 != lastState.lightState_1) {
 5bc:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <lastState>
 5c0:	89 17       	cp	r24, r25
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <SPIprocessCommand+0x38>
 5c4:	8f c0       	rjmp	.+286    	; 0x6e4 <SPIprocessCommand+0x156>
			lastState.lightState_1 = newLightState_1;
 5c6:	cf e3       	ldi	r28, 0x3F	; 63
 5c8:	d1 e0       	ldi	r29, 0x01	; 1
 5ca:	88 83       	st	Y, r24
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT1_STATE_ADDR, lastState.lightState_1);                 // Store the Light state 1 in EEPROM
 5cc:	68 81       	ld	r22, Y
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	f0 d0       	rcall	.+480    	; 0x7b4 <eeprom_write_byte>
			USART_Transmit(lastState.lightState_1 == 1 ? 'A' : 'B');
 5d4:	88 81       	ld	r24, Y
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	11 f4       	brne	.+4      	; 0x5de <SPIprocessCommand+0x50>
 5da:	81 e4       	ldi	r24, 0x41	; 65
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <SPIprocessCommand+0x52>
 5de:	82 e4       	ldi	r24, 0x42	; 66
 5e0:	90 d0       	rcall	.+288    	; 0x702 <USART_Transmit>
 5e2:	80 c0       	rjmp	.+256    	; 0x6e4 <SPIprocessCommand+0x156>
		}
	}
	else if (strcmp(command, "H1") == 0) {                                            //hard reset
 5e4:	6b e2       	ldi	r22, 0x2B	; 43
 5e6:	71 e0       	ldi	r23, 0x01	; 1
 5e8:	ce 01       	movw	r24, r28
 5ea:	d3 d0       	rcall	.+422    	; 0x792 <strcmp>
 5ec:	89 2b       	or	r24, r25
		USART_Transmit('R');
 5ee:	19 f4       	brne	.+6      	; 0x5f6 <SPIprocessCommand+0x68>
 5f0:	82 e5       	ldi	r24, 0x52	; 82
 5f2:	87 d0       	rcall	.+270    	; 0x702 <USART_Transmit>
	}
	else if (strcmp(command, "L2") == 0) {
 5f4:	77 c0       	rjmp	.+238    	; 0x6e4 <SPIprocessCommand+0x156>
 5f6:	6e e2       	ldi	r22, 0x2E	; 46
 5f8:	71 e0       	ldi	r23, 0x01	; 1
 5fa:	ce 01       	movw	r24, r28
 5fc:	ca d0       	rcall	.+404    	; 0x792 <strcmp>
 5fe:	89 2b       	or	r24, r25
 600:	19 f5       	brne	.+70     	; 0x648 <SPIprocessCommand+0xba>
		PORTD ^= (1 << PD5);
 602:	92 b3       	in	r25, 0x12	; 18
 604:	80 e2       	ldi	r24, 0x20	; 32
 606:	89 27       	eor	r24, r25
 608:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF4);
 60a:	e2 e6       	ldi	r30, 0x62	; 98
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	90 81       	ld	r25, Z
 610:	80 e1       	ldi	r24, 0x10	; 16
 612:	89 27       	eor	r24, r25
 614:	80 83       	st	Z, r24
		uint8_t newLightState_2 = (lastState.lightState_2 == 0) ? 1 : 0;
 616:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <lastState+0x1>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	91 11       	cpse	r25, r1
 61e:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_2 != lastState.lightState_2){
 620:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <lastState+0x1>
 624:	89 17       	cp	r24, r25
 626:	09 f4       	brne	.+2      	; 0x62a <SPIprocessCommand+0x9c>
 628:	5d c0       	rjmp	.+186    	; 0x6e4 <SPIprocessCommand+0x156>
			lastState.lightState_2 = newLightState_2;
 62a:	cf e3       	ldi	r28, 0x3F	; 63
 62c:	d1 e0       	ldi	r29, 0x01	; 1
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT2_STATE_ADDR, lastState.lightState_2);                 // Store the Light state 2 in EEPROM
 62e:	89 83       	std	Y+1, r24	; 0x01
 630:	69 81       	ldd	r22, Y+1	; 0x01
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
			USART_Transmit(lastState.lightState_2 == 1 ? 'C' : 'D');
 636:	be d0       	rcall	.+380    	; 0x7b4 <eeprom_write_byte>
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	11 f4       	brne	.+4      	; 0x642 <SPIprocessCommand+0xb4>
 63e:	83 e4       	ldi	r24, 0x43	; 67
 640:	01 c0       	rjmp	.+2      	; 0x644 <SPIprocessCommand+0xb6>
 642:	84 e4       	ldi	r24, 0x44	; 68
 644:	5e d0       	rcall	.+188    	; 0x702 <USART_Transmit>
		}
	}
	else if (strcmp(command, "L3") == 0) {
 646:	4e c0       	rjmp	.+156    	; 0x6e4 <SPIprocessCommand+0x156>
 648:	61 e3       	ldi	r22, 0x31	; 49
 64a:	71 e0       	ldi	r23, 0x01	; 1
 64c:	ce 01       	movw	r24, r28
 64e:	a1 d0       	rcall	.+322    	; 0x792 <strcmp>
 650:	89 2b       	or	r24, r25
 652:	09 f5       	brne	.+66     	; 0x696 <SPIprocessCommand+0x108>
		PORTD ^= (1 << PD7);
 654:	82 b3       	in	r24, 0x12	; 18
 656:	80 58       	subi	r24, 0x80	; 128
 658:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF5);
 65a:	e2 e6       	ldi	r30, 0x62	; 98
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	90 81       	ld	r25, Z
 660:	80 e2       	ldi	r24, 0x20	; 32
 662:	89 27       	eor	r24, r25
 664:	80 83       	st	Z, r24
		uint8_t newLightState_3 = (lastState.lightState_3 == 0) ? 1 : 0;
 666:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <lastState+0x2>
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	91 11       	cpse	r25, r1
 66e:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_3 != lastState.lightState_3){
 670:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <lastState+0x2>
 674:	89 17       	cp	r24, r25
			lastState.lightState_3 = newLightState_3;
 676:	b1 f1       	breq	.+108    	; 0x6e4 <SPIprocessCommand+0x156>
 678:	cf e3       	ldi	r28, 0x3F	; 63
 67a:	d1 e0       	ldi	r29, 0x01	; 1
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT3_STATE_ADDR, lastState.lightState_3);                  //Store the Light state 3 in EEPROM
 67c:	8a 83       	std	Y+2, r24	; 0x02
 67e:	6a 81       	ldd	r22, Y+2	; 0x02
 680:	82 e0       	ldi	r24, 0x02	; 2
 682:	90 e0       	ldi	r25, 0x00	; 0
			USART_Transmit(lastState.lightState_3 == 1 ? 'E' : 'F');
 684:	97 d0       	rcall	.+302    	; 0x7b4 <eeprom_write_byte>
 686:	8a 81       	ldd	r24, Y+2	; 0x02
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	11 f4       	brne	.+4      	; 0x690 <SPIprocessCommand+0x102>
 68c:	85 e4       	ldi	r24, 0x45	; 69
 68e:	01 c0       	rjmp	.+2      	; 0x692 <SPIprocessCommand+0x104>
 690:	86 e4       	ldi	r24, 0x46	; 70
 692:	37 d0       	rcall	.+110    	; 0x702 <USART_Transmit>
		}
	}
	else if (strcmp(command, "L4") == 0) {
 694:	27 c0       	rjmp	.+78     	; 0x6e4 <SPIprocessCommand+0x156>
 696:	64 e3       	ldi	r22, 0x34	; 52
 698:	71 e0       	ldi	r23, 0x01	; 1
 69a:	ce 01       	movw	r24, r28
 69c:	7a d0       	rcall	.+244    	; 0x792 <strcmp>
 69e:	89 2b       	or	r24, r25
 6a0:	09 f5       	brne	.+66     	; 0x6e4 <SPIprocessCommand+0x156>
		PORTD ^= (1 << PD4);
 6a2:	92 b3       	in	r25, 0x12	; 18
 6a4:	80 e1       	ldi	r24, 0x10	; 16
 6a6:	89 27       	eor	r24, r25
 6a8:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF6);
 6aa:	e2 e6       	ldi	r30, 0x62	; 98
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	90 81       	ld	r25, Z
 6b0:	80 e4       	ldi	r24, 0x40	; 64
 6b2:	89 27       	eor	r24, r25
 6b4:	80 83       	st	Z, r24
		uint8_t newLightState_4 = (lastState.lightState_4 == 0) ? 1 : 0;
 6b6:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <lastState+0x3>
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	91 11       	cpse	r25, r1
		if(newLightState_4 != lastState.lightState_4){
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <lastState+0x3>
 6c4:	89 17       	cp	r24, r25
			lastState.lightState_4 = newLightState_4;
 6c6:	71 f0       	breq	.+28     	; 0x6e4 <SPIprocessCommand+0x156>
 6c8:	cf e3       	ldi	r28, 0x3F	; 63
			eeprom_write_byte((uint8_t*)EEPROM_LIGHT4_STATE_ADDR, lastState.lightState_4);                  // Store the Light state 4 in EEPROM
 6ca:	d1 e0       	ldi	r29, 0x01	; 1
 6cc:	8b 83       	std	Y+3, r24	; 0x03
 6ce:	6b 81       	ldd	r22, Y+3	; 0x03
 6d0:	83 e0       	ldi	r24, 0x03	; 3
 6d2:	90 e0       	ldi	r25, 0x00	; 0
			USART_Transmit(lastState.lightState_4 == 1 ? 'G' : 'H');
 6d4:	6f d0       	rcall	.+222    	; 0x7b4 <eeprom_write_byte>
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	11 f4       	brne	.+4      	; 0x6e0 <SPIprocessCommand+0x152>
 6dc:	87 e4       	ldi	r24, 0x47	; 71
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <SPIprocessCommand+0x154>
 6e0:	88 e4       	ldi	r24, 0x48	; 72
 6e2:	0f d0       	rcall	.+30     	; 0x702 <USART_Transmit>
		}
	}
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	08 95       	ret

000006ea <USART_Init>:

#include "uart.h"

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 6ea:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 6ee:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 6f0:	88 e1       	ldi	r24, 0x18	; 24
 6f2:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1 << RXCIE0);
 6f4:	8a b1       	in	r24, 0x0a	; 10
 6f6:	80 68       	ori	r24, 0x80	; 128
 6f8:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 6fa:	8e e0       	ldi	r24, 0x0E	; 14
 6fc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 700:	08 95       	ret

00000702 <USART_Transmit>:
}

void USART_Transmit(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
 702:	5d 9b       	sbis	0x0b, 5	; 11
 704:	fe cf       	rjmp	.-4      	; 0x702 <USART_Transmit>
	UDR0 = data;
 706:	8c b9       	out	0x0c, r24	; 12
 708:	08 95       	ret

0000070a <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
 70a:	5f 9b       	sbis	0x0b, 7	; 11
 70c:	fe cf       	rjmp	.-4      	; 0x70a <USART_Receive>
	return UDR0;
 70e:	8c b1       	in	r24, 0x0c	; 12
 710:	08 95       	ret

00000712 <UARTprocessCommand>:
 */ 


#include "uartDataProcess.h"

void UARTprocessCommand(unsigned char receivedData){
 712:	cf 93       	push	r28
 714:	c8 2f       	mov	r28, r24
	if (receivedData == 'L') {
 716:	8c 34       	cpi	r24, 0x4C	; 76
 718:	49 f4       	brne	.+18     	; 0x72c <UARTprocessCommand+0x1a>
		receivedData = USART_Receive();
 71a:	f7 df       	rcall	.-18     	; 0x70a <USART_Receive>
 71c:	c8 2f       	mov	r28, r24
		if (receivedData == '1') {
 71e:	81 33       	cpi	r24, 0x31	; 49
			light1_ON();
 720:	11 f4       	brne	.+4      	; 0x726 <UARTprocessCommand+0x14>
 722:	d2 dc       	rcall	.-1628   	; 0xc8 <light1_ON>
 724:	03 c0       	rjmp	.+6      	; 0x72c <UARTprocessCommand+0x1a>
			}else if (receivedData == '0') {
 726:	80 33       	cpi	r24, 0x30	; 48
			light1_OFF();
 728:	09 f4       	brne	.+2      	; 0x72c <UARTprocessCommand+0x1a>
		}
	}

	if (receivedData == 'M') {
 72a:	df dc       	rcall	.-1602   	; 0xea <light1_OFF>
 72c:	cd 34       	cpi	r28, 0x4D	; 77
		receivedData = USART_Receive();
 72e:	49 f4       	brne	.+18     	; 0x742 <UARTprocessCommand+0x30>
 730:	ec df       	rcall	.-40     	; 0x70a <USART_Receive>
		if (receivedData == '1') {
 732:	c8 2f       	mov	r28, r24
 734:	81 33       	cpi	r24, 0x31	; 49
			light2_ON();
 736:	11 f4       	brne	.+4      	; 0x73c <UARTprocessCommand+0x2a>
 738:	e8 dc       	rcall	.-1584   	; 0x10a <light2_ON>
			}else if (receivedData == '0') {
 73a:	03 c0       	rjmp	.+6      	; 0x742 <UARTprocessCommand+0x30>
			light2_OFF();
 73c:	80 33       	cpi	r24, 0x30	; 48
 73e:	09 f4       	brne	.+2      	; 0x742 <UARTprocessCommand+0x30>
		}
	}
	if (receivedData == 'N') {
 740:	f5 dc       	rcall	.-1558   	; 0x12c <light2_OFF>
		receivedData = USART_Receive();
 742:	ce 34       	cpi	r28, 0x4E	; 78
 744:	49 f4       	brne	.+18     	; 0x758 <UARTprocessCommand+0x46>
		if (receivedData == '1') {
 746:	e1 df       	rcall	.-62     	; 0x70a <USART_Receive>
 748:	c8 2f       	mov	r28, r24
			light3_ON();
 74a:	81 33       	cpi	r24, 0x31	; 49
 74c:	11 f4       	brne	.+4      	; 0x752 <UARTprocessCommand+0x40>
			}else if (receivedData == '0') {
 74e:	fe dc       	rcall	.-1540   	; 0x14c <light3_ON>
			light3_OFF();
 750:	03 c0       	rjmp	.+6      	; 0x758 <UARTprocessCommand+0x46>
 752:	80 33       	cpi	r24, 0x30	; 48
		}
	}

	if (receivedData == 'O') {
 754:	09 f4       	brne	.+2      	; 0x758 <UARTprocessCommand+0x46>
		receivedData = USART_Receive();
 756:	0b dd       	rcall	.-1514   	; 0x16e <light3_OFF>
 758:	cf 34       	cpi	r28, 0x4F	; 79
		if (receivedData == '1') {
 75a:	49 f4       	brne	.+18     	; 0x76e <UARTprocessCommand+0x5c>
 75c:	d6 df       	rcall	.-84     	; 0x70a <USART_Receive>
			light4_ON();
 75e:	c8 2f       	mov	r28, r24
		}
		else if (receivedData == '0') {
 760:	81 33       	cpi	r24, 0x31	; 49
			light4_OFF();
 762:	11 f4       	brne	.+4      	; 0x768 <UARTprocessCommand+0x56>
 764:	14 dd       	rcall	.-1496   	; 0x18e <light4_ON>
		}
	}
	
	if(receivedData == 'Z'){
 766:	03 c0       	rjmp	.+6      	; 0x76e <UARTprocessCommand+0x5c>
		receivedData = USART_Receive();
 768:	80 33       	cpi	r24, 0x30	; 48
		if(receivedData == '1'){
 76a:	09 f4       	brne	.+2      	; 0x76e <UARTprocessCommand+0x5c>
 76c:	21 dd       	rcall	.-1470   	; 0x1b0 <light4_OFF>
			light1_ON();
 76e:	ca 35       	cpi	r28, 0x5A	; 90
 770:	71 f4       	brne	.+28     	; 0x78e <UARTprocessCommand+0x7c>
			light2_ON();
 772:	cb df       	rcall	.-106    	; 0x70a <USART_Receive>
 774:	81 33       	cpi	r24, 0x31	; 49
			light3_ON();
 776:	29 f4       	brne	.+10     	; 0x782 <UARTprocessCommand+0x70>
 778:	a7 dc       	rcall	.-1714   	; 0xc8 <light1_ON>
			light4_ON();
 77a:	c7 dc       	rcall	.-1650   	; 0x10a <light2_ON>
 77c:	e7 dc       	rcall	.-1586   	; 0x14c <light3_ON>
 77e:	07 dd       	rcall	.-1522   	; 0x18e <light4_ON>
		}
		else if(receivedData == '0'){
 780:	06 c0       	rjmp	.+12     	; 0x78e <UARTprocessCommand+0x7c>
 782:	80 33       	cpi	r24, 0x30	; 48
			light1_OFF();
 784:	21 f4       	brne	.+8      	; 0x78e <UARTprocessCommand+0x7c>
 786:	b1 dc       	rcall	.-1694   	; 0xea <light1_OFF>
			light2_OFF();
 788:	d1 dc       	rcall	.-1630   	; 0x12c <light2_OFF>
 78a:	f1 dc       	rcall	.-1566   	; 0x16e <light3_OFF>
			light3_OFF();
 78c:	11 dd       	rcall	.-1502   	; 0x1b0 <light4_OFF>
 78e:	cf 91       	pop	r28
			light4_OFF();
 790:	08 95       	ret

00000792 <strcmp>:
 792:	fb 01       	movw	r30, r22
		}
	}
 794:	dc 01       	movw	r26, r24
 796:	8d 91       	ld	r24, X+
 798:	01 90       	ld	r0, Z+
 79a:	80 19       	sub	r24, r0
 79c:	01 10       	cpse	r0, r1
 79e:	d9 f3       	breq	.-10     	; 0x796 <strcmp+0x4>
 7a0:	99 0b       	sbc	r25, r25
 7a2:	08 95       	ret

000007a4 <eeprom_read_byte>:
 7a4:	e1 99       	sbic	0x1c, 1	; 28
 7a6:	fe cf       	rjmp	.-4      	; 0x7a4 <eeprom_read_byte>
 7a8:	9f bb       	out	0x1f, r25	; 31
 7aa:	8e bb       	out	0x1e, r24	; 30
 7ac:	e0 9a       	sbi	0x1c, 0	; 28
 7ae:	99 27       	eor	r25, r25
 7b0:	8d b3       	in	r24, 0x1d	; 29
 7b2:	08 95       	ret

000007b4 <eeprom_write_byte>:
 7b4:	26 2f       	mov	r18, r22

000007b6 <eeprom_write_r18>:
 7b6:	e1 99       	sbic	0x1c, 1	; 28
 7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <eeprom_write_r18>
 7ba:	9f bb       	out	0x1f, r25	; 31
 7bc:	8e bb       	out	0x1e, r24	; 30
 7be:	2d bb       	out	0x1d, r18	; 29
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	f8 94       	cli
 7c4:	e2 9a       	sbi	0x1c, 2	; 28
 7c6:	e1 9a       	sbi	0x1c, 1	; 28
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	08 95       	ret

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>
